#!/usr/bin/env python3
import argparse
import logging
import os
import signal
import sys

from uun_iot import Gateway
from uun_iot.utils import LoggingSystemdHandler
from uun_windsurfguru.modules import init

__version__ = "0.2.6"
__package__ = "uun_windsurfguru"


def main():
    argp = argparse.ArgumentParser(
        prog=__package__,
        description="Display wind surf conditions on a colorful LED strip.",
    )
    argp.add_argument(
        "-v", "--version", action="version", version="%(prog) " + __version__
    )
    argp.add_argument(
        "-l",
        "--log",
        metavar="loglevel",
        dest="loglevel",
        type=str,
        help="level of logging: [DEBUG, INFO, WARNING, ERROR, CRITICAL]",
        default="WARNING",
    )
    argp.add_argument(
        "-c",
        "--config",
        metavar="config",
        dest="config",
        type=str,
        help="configuration JSON file",
        default="config.json",
    )
    argp.add_argument(
        "--systemd",
        help="enable output in systemd-friendly format",
        action="store_true",
    )

    sys.excepthook = lambda exctype, value, tb: logging.getLogger(
        __package__
    ).exception("Exception: ", exc_info=(exctype, value, tb))

    args = argp.parse_args()
    if not os.path.exists(args.config):
        sys.exit(f"Could not find configuration file '{args.config}'")

    loglevel = args.loglevel
    llevel = getattr(logging, loglevel.upper(), None)
    if not isinstance(llevel, int):
        raise ValueError(f"Invalid log level: {loglevel}")

    loggerw = logging.getLogger(__package__)  # application specific logger
    loggerw.setLevel(llevel)
    loggeru = logging.getLogger("uun_iot")  # library logger
    loggeru.setLevel(llevel)
    loggeru2 = logging.getLogger("uun_iot_libledstrip")
    loggeru2.setLevel(llevel)

    handler = LoggingSystemdHandler() if args.systemd else logging.StreamHandler()
    handler.setLevel(llevel)
    handler.setFormatter(logging.Formatter("%(name)s - %(levelname)s - %(message)s"))

    loggerw.addHandler(handler)
    loggeru.addHandler(handler)
    loggeru2.addHandler(handler)

    # try to add colors to Windows (colored LED strip)
    try:
        from colorama import init as init_c

        init_c()
    except ImportError:
        pass

    # start module system
    print("=== " + __package__ + " ===")
    with Gateway(args.config, init) as g:
        # Register a SIGTERM signal, as it is issued by systemd on stop/restart.
        #   Because by default, it does not run destructors.
        # Ctrl-C (SINGINT) correctly runs destructors, so no need to register.
        # SIGUSR1 is used internally by HealthCheck to restart the gateway
        signal.signal(signal.SIGTERM, g.signal_handler)
        signal.signal(signal.SIGINT, g.signal_handler)
        signal.signal(signal.SIGUSR1, g.signal_handler)

        g.stopev.wait()


if __name__ == "__main__":
    main()
