# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/04_shiny.ipynb.

# %% auto 0
__all__ = ['render_input_chat', 'render_llm_output']

# %% ../nbs/04_shiny.ipynb 3
import os
from .runs import _temp_env_var
from .transform import RunData
from shiny import module, ui, render
import shiny.experimental as x

# %% ../nbs/04_shiny.ipynb 4
def _get_role(m):
    role = m['role'].upper()
    if 'function_call' in m: return f"{role} - Function Call"
    if role == 'FUNCTION': return 'FUNCTION RESULTS'
    else: return role

def _get_content(m):
    if 'function_call' in m:
        func = m['function_call']
        return f"{func['name']}({func['arguments']})"
    else: return m['content']

def render_input_chat(run:RunData, markdown=True):
    "Render the chat history, except for the last output as a group of cards."
    cards = []
    num_inputs = len(run.inputs)
    for i,m in enumerate(run.inputs):
        content = str(_get_content(m))
        cards.append(
            x.ui.card(
                x.ui.card_header(ui.div({"style": "display: flex; justify-content: space-between;"},
                                    ui.span(
                                        {"style": "font-weight: bold;"}, 
                                        _get_role(m),
                                    ),
                                    ui.span(f'({i+1}/{num_inputs})'),
                                )       
                ),
                x.ui.card_body(ui.markdown(content) if markdown else content),
                class_= "card border-dark mb-3"
            )
        )
    return ui.div(*cards)

# %% ../nbs/04_shiny.ipynb 14
def render_llm_output(run, width="100%", height="250px"):
    "Render the LLM output as an editable text box."
    o = run.output
    return ui.input_text_area('llm_output', label='LLM Output', 
                              value=o['content'], width=width, height=height)
