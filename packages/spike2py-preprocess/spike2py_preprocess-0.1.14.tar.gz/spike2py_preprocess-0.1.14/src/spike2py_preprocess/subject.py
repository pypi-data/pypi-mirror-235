from pathlib import Path
from typing import Union
from dataclasses import dataclass

import spike2py as s2p

import spike2py_preprocess.utils as utils
import spike2py_preprocess.trial as trial


SUBJECT_INFO_FILE = "subject_info.json"
SUBJECT_PREPROCESS_FILE = "subject_preprocess.json"


@dataclass
class SubjectPaths:
    """Dataclass with various paths for participant.

    The class is initialised with SubjectPaths(home=<path>).
    The other related paths are generated by the create() method."""

    home: Path
    raw: Path = ""
    proc: Path = ""
    figures: Path = ""

    def create(self):
        self.raw = self.home / "raw"
        self.proc = self.home / "proc"
        self.figures = self.home / "figures" / "preprocess"
        if not self.figures.exists():
            self.figures.mkdir(parents=True)


def subject(
    subject_path: Path,
    preprocess_info: Union[dict, None] = None,
    study_info: Union[dict, None] = None,
    plot=False,
):
    """Preprocess all trials for a given subject.

    Parameters
    ----------
    subject_path: Path
        Absolute path to subject home/root folder (e.g. 'sub01').
        Data to be preprocess located in 'raw' subfolder (i.e. 'sub01/raw')
    preprocess_info: dict | None
        Provided when this function is used to process subject data as part of a study pipeline.
        Will be replaced with subject level or trial level preprocessing info if provided.
        If no study-wide preprocessing requested, value will be None
    study_info: dict | None
        Provided when function used to process subject data as part of a study pipeline.
        Used to determine which channels to keep.
        Will be replaced with subject level or trial level channel specification if provided.
    plot: bool
        Set to True to generate plots for all extracted reflexes
    """
    paths = gen_paths(subject_path)
    subject_info = utils.read_json(paths.home / SUBJECT_INFO_FILE)
    preprocess_info = utils.get_preprocess_info(
        paths.home / SUBJECT_PREPROCESS_FILE, preprocess_info
    )
    print(f"\tProcessing {subject_info['subject_id']}")
    # TODO: Add test where subject channels are different from study channels
    study_info = _merge_subject_study_info(study_info, subject_info)
    _preprocess_trials(paths, subject_info, preprocess_info, study_info, plot)
    if plot:
        utils.merge_pdfs(paths.figures)


def _merge_subject_study_info(study_info, subject_info):
    subject_info_keys = list(subject_info.keys())
    for key, value in study_info.items():
        if key in subject_info_keys:
            study_info[key] = subject_info[key]
    return study_info


def gen_paths(subject_path):
    paths = SubjectPaths(home=subject_path)
    paths.create()
    return paths


def _preprocess_trials(paths, subject_info, preprocess_info, study_info, plot):
    for trial_ in subject_info["trials"].values():
        trial_info_file = paths.raw / (trial_["file"].split('.')[0] + '_trial_info.json')
        trial_info_json = utils.read_json(trial_info_file, strict=False)

        if trial_info_json is not None:
            trial_["name"] = trial_info_json["name"]
            if "channels" in list(trial_info_json.keys()):
                trial_["channels"] = trial_info_json["channels"]

        channels = _get_channels(trial_, study_info)
        trial_info = s2p.trial.TrialInfo(
            file=paths.raw / trial_["file"],
            channels=channels,
            name=trial_["name"],
            subject_id=paths.home.name,
            path_save_trial=paths.proc,
            path_save_figures=paths.figures
        )
        trial.trial(trial_info, preprocess_info, plot)


def _get_channels(trial_, study_info):
    """Get channels to extract.

    When processing data for a subject (alone, not as part of study),
    look to see if the channels to extract are specified. If not,
    return None, which means all available channels will be outputed.
    When processing data for an entire study and there is no channels
    specified in trial_ (which comes from old.json), then
    look to see if there are channels specified in study_info; if yes,
    use these; if no, return None and use all channels.
    """
    channels = trial_.get("channels")
    if channels is None and study_info is not None:
        channels = study_info.get("channels")
    return channels
