{"version":3,"sources":["StarRating.tsx","index.tsx"],"names":["withStreamlitConnection","props","args","label","maxValue","defaultValue","size","emoticons","read_only","dark_theme","useState","value","setValue","theme","DarkTheme","LightTheme","useEffect","Streamlit","setFrameHeight","onChange","setComponentValue","readOnly","numItems","engine","Styletron","ReactDOM","render","StrictMode","StarRating","document","getElementById"],"mappings":"sQA2DeA,eAhDS,SAACC,GAErB,MAA6EA,EAAMC,KAA5EC,EAAK,EAALA,MAAOC,EAAQ,EAARA,SAAUC,EAAY,EAAZA,aAAaC,EAAI,EAAJA,KAAKC,EAAS,EAATA,UAAWC,EAAS,EAATA,UAAUC,EAAU,EAAVA,WAE/D,EAA0BC,mBAASL,GAAa,mBAAzCM,EAAK,KAAEC,EAAQ,KAEtB,GAAGH,EACD,IAAII,EAAQC,SAGZD,EAAQE,IAKV,OAFAC,qBAAU,kBAAMC,IAAUC,oBAEvBX,EAEC,oCACA,4BAAKJ,GACL,kBAAC,IAAa,CAACU,MAAOA,GACtB,kBAAC,IAAc,CACbM,SAAU,YAAc,IAAZR,EAAK,EAALA,MAAYC,EAASD,GAAQM,IAAUG,kBAAkBT,IACrEL,KAAMA,EACNK,MAAOA,EACPU,SAAYb,MAQd,oCACA,4BAAKL,GACL,kBAAC,IAAa,CAACU,MAAOA,GACtB,kBAAC,IAAU,CACTS,SAAUlB,EACVe,SAAU,YAAc,IAAZR,EAAK,EAALA,MAAYC,EAASD,GAAQM,IAAUG,kBAAkBT,IACrEL,KAAMA,EACNK,MAAOA,EACPU,SAAYb,S,gBC1ChBe,EAAS,IAAIC,IAGnBC,IAASC,OACP,kBAAC,IAAMC,WAAU,KACf,kBAAC,IAAiB,CAAChB,MAAOY,GAEtB,kBAACK,EAAU,QAIjBC,SAASC,eAAe,W","file":"static/js/main.6fe35020.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  ComponentProps,\r\n  Streamlit,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\";\r\nimport { StarRating,\r\nEmoticonRating } from \"baseui/rating\";\r\nimport { ThemeProvider, LightTheme, DarkTheme} from \"baseui\"\r\n\r\n\r\nconst RatingComponent = (props: ComponentProps) => {\r\n\r\n    const {label, maxValue, defaultValue,size,emoticons, read_only,dark_theme} = props.args;\r\n\r\n    const [value, setValue] = useState(defaultValue);\r\n\r\n    if(dark_theme) {\r\n      var theme = DarkTheme\r\n    }\r\n    else {\r\n      theme = LightTheme\r\n    }\r\n\r\n    useEffect(() => Streamlit.setFrameHeight());\r\n\r\n    if(emoticons) {\r\n      return (\r\n        <>\r\n        <h3>{label}</h3>\r\n        <ThemeProvider theme={theme}>\r\n        <EmoticonRating\r\n          onChange={({value}) => {setValue(value); Streamlit.setComponentValue(value);}}\r\n          size={size}\r\n          value={value}\r\n          readOnly = {read_only}\r\n        />\r\n        </ThemeProvider>\r\n        </>\r\n      );\r\n    }\r\n   else {\r\n    return (\r\n        <>\r\n        <h3>{label}</h3>\r\n        <ThemeProvider theme={theme}>\r\n        <StarRating\r\n          numItems={maxValue}\r\n          onChange={({value}) => {setValue(value); Streamlit.setComponentValue(value);}}\r\n          size={size}\r\n          value={value}\r\n          readOnly = {read_only}\r\n        />\r\n        </ThemeProvider>\r\n        </>\r\n      );\r\n    }\r\n}\r\n\r\nexport default withStreamlitConnection(RatingComponent);\r\n","\r\nimport React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport StarRating from \"./StarRating\"\r\n\r\n// Lots of import to define a Styletron engine and load the light theme of baseui\r\nimport { Client as Styletron } from \"styletron-engine-atomic\"\r\nimport { Provider as StyletronProvider } from \"styletron-react\"\r\n\r\nconst engine = new Styletron()\r\n\r\n// Wrap your CustomSlider with the baseui them\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <StyletronProvider value={engine}>\r\n      {/* <ThemeProvider theme={LightTheme}> */}\r\n        <StarRating />\r\n      {/* </ThemeProvider> */}\r\n    </StyletronProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)"],"sourceRoot":""}