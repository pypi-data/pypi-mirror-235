Metadata-Version: 2.1
Name: lib-py-comp
Version: 0.0.2
Home-page: http://pypi.python.org/pypi/lib_py_comp/0.0.2
Author: hypothesisbase
Author-email: support@hypothesisbase.com
License: MIT
Description-Content-Type: text/markdown


# AutoGeneratedDocs

```python
lib_py_comp.__init__



lib_py_comp.dsa.__init__



lib_py_comp.dsa.kv_db

    class KeyValueDB()
        def __init__(self, dataDir)
    
        def clear(self)
    
        def get(self, key, default=None)
    
        def set(self, key, value)
    
        def put(self, key, value)
    
        def remove(self, key)
    
        def delete(self, key)
    
        def batchWrite(self, setValues, removeValues, sync=True)
    
        def iterate(
            self,
            key_from = None,
            key_to = None,
            include_value = True,
            reverse = False,
        )
    
        def __iter__(self)
    

lib_py_comp.dsa.byte_array

    def makeVba(base_path)
    
    def mergeVbas(vba1, vba2, out_path)
    
    class VariableBytesArray()
        def __init__(self, base_path: str)
    
        def index_size(self) -> int
    
        def data_size(self) -> int
    
        def read_index_bytes(self, offset: int, limit: int) -> str
    
        def read_data_bytes(self, offset: int, limit: int) -> str
    
        def count(self)
    
        def append(self, target_bytes) -> int
    
        def extendConserve(self, target_bytes_L1) -> int
    
        def extendLiberal(self, target_bytes_L1) -> int
    
        def extend(self, target_bytes_L1, conserve=False) -> int
    
        def get(self, item_id: int) -> str
    
        def slice(self, id_lower_bound: int, id_upper_bound: int)
    
        def popK(self, k: int) -> int
    
        def clear(self)
    

lib_py_comp.dsa.file_io

    def fwrite(fileName, fileRepr, mode='w')
    
    def fread(fileName, mode='r')

lib_py_comp.dsa.delimited_io

    def fwrite(fileName, fileRepr, mode='w')
    
    def fread(fileName, mode='r')
    
    class DelimitedWriter()
        def __init__(self, filePath, bufferSize, delimiter)
    
        def __del__(self)
    
        def commit(self)
    
        def writeF1(self, entry)
    
        def write(self, entry, sync=False)
    
        def close(self)
    
        def clear(self)
    
    
    class DelimitedReader()
        def __init__(self, filePath, bufferSize, delimiter)
    
        def updateBuffer(self, numBytes)
    
        def hasNext(self)
    
        def next(self)
    
        def __iter__(self)
    
        def __next__(self)
    

lib_py_comp.dsa.buffered_io

    def fwrite(fileName, fileRepr, mode='w')
    
    def fread(fileName, mode='r')
    
    class BufferedWriter()
        def __init__(self, filePath, bufferSize)
    
        def __del__(self)
    
        def commit(self)
    
        def writeF1(self, entry)
    
        def write(self, entry, sync=False)
    
        def close(self)
    
        def clear(self)
    
    
    class BufferedReader()
        def __init__(self, filePath, bufferSize)
    
        def updateBuffer(self, numBytes)
    
        def hasNext(self)
    
        def next(self)
    
        def __iter__(self)
    
        def __next__(self)
    

lib_py_comp.alg.serialization

    def serialize_data(target_value, target_type, classes, str_encoding='latin-1')

lib_py_comp.alg.__init__



lib_py_comp.alg.typon_math

    def deserialize_int(int_val_repr)
    
    def deserialize_int32(int_val_repr)
    
    def serialize_int(int_val_arg)
    
    def serialize_int32(int_val_arg)
    
    def deserialize_dbl(dbl_val_repr)
    
    def serialize_dbl(dbl_val_arg)

lib_py_comp.alg.deserialization

    def deserialize_data(target_buffer, target_type, buffer_index, classes, str_encoding=None)

lib_py_comp.alg.partitioning

    def partition_batch_size(data, batch_size)
    
    def partition_num_batches(data, num_batches)
    
    def partition_data(data, batch_size)

lib_py_comp.tests.test_delimited



lib_py_comp.tests.__init__



lib_py_comp.tests.test_kv



lib_py_comp.tests.test_buffered



lib_py_comp.tests.test_ba



```
