# coding: utf-8

"""
    Billingo API v3

    This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.  # noqa: E501

    OpenAPI spec version: 3.0.14
    Contact: hello@billingo.hu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReceiptInsert(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'vendor_id': 'str',
        'partner_id': 'int',
        'name': 'str',
        'emails': 'list[str]',
        'block_id': 'int',
        'type': 'DocumentType',
        'payment_method': 'PaymentMethod',
        'currency': 'Currency',
        'conversion_rate': 'float',
        'electronic': 'bool',
        'items': 'list[OneOfReceiptInsertItemsItems]'
    }

    attribute_map = {
        'vendor_id': 'vendor_id',
        'partner_id': 'partner_id',
        'name': 'name',
        'emails': 'emails',
        'block_id': 'block_id',
        'type': 'type',
        'payment_method': 'payment_method',
        'currency': 'currency',
        'conversion_rate': 'conversion_rate',
        'electronic': 'electronic',
        'items': 'items'
    }

    def __init__(self, vendor_id=None, partner_id=None, name=None, emails=None, block_id=None, type=None, payment_method=None, currency=None, conversion_rate=None, electronic=False, items=None):  # noqa: E501
        """ReceiptInsert - a model defined in Swagger"""  # noqa: E501
        self._vendor_id = None
        self._partner_id = None
        self._name = None
        self._emails = None
        self._block_id = None
        self._type = None
        self._payment_method = None
        self._currency = None
        self._conversion_rate = None
        self._electronic = None
        self._items = None
        self.discriminator = None
        if vendor_id is not None:
            self.vendor_id = vendor_id
        if partner_id is not None:
            self.partner_id = partner_id
        if name is not None:
            self.name = name
        if emails is not None:
            self.emails = emails
        self.block_id = block_id
        self.type = type
        self.payment_method = payment_method
        self.currency = currency
        if conversion_rate is not None:
            self.conversion_rate = conversion_rate
        if electronic is not None:
            self.electronic = electronic
        if items is not None:
            self.items = items

    @property
    def vendor_id(self):
        """Gets the vendor_id of this ReceiptInsert.  # noqa: E501


        :return: The vendor_id of this ReceiptInsert.  # noqa: E501
        :rtype: str
        """
        return self._vendor_id

    @vendor_id.setter
    def vendor_id(self, vendor_id):
        """Sets the vendor_id of this ReceiptInsert.


        :param vendor_id: The vendor_id of this ReceiptInsert.  # noqa: E501
        :type: str
        """

        self._vendor_id = vendor_id

    @property
    def partner_id(self):
        """Gets the partner_id of this ReceiptInsert.  # noqa: E501


        :return: The partner_id of this ReceiptInsert.  # noqa: E501
        :rtype: int
        """
        return self._partner_id

    @partner_id.setter
    def partner_id(self, partner_id):
        """Sets the partner_id of this ReceiptInsert.


        :param partner_id: The partner_id of this ReceiptInsert.  # noqa: E501
        :type: int
        """

        self._partner_id = partner_id

    @property
    def name(self):
        """Gets the name of this ReceiptInsert.  # noqa: E501


        :return: The name of this ReceiptInsert.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReceiptInsert.


        :param name: The name of this ReceiptInsert.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def emails(self):
        """Gets the emails of this ReceiptInsert.  # noqa: E501


        :return: The emails of this ReceiptInsert.  # noqa: E501
        :rtype: list[str]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this ReceiptInsert.


        :param emails: The emails of this ReceiptInsert.  # noqa: E501
        :type: list[str]
        """

        self._emails = emails

    @property
    def block_id(self):
        """Gets the block_id of this ReceiptInsert.  # noqa: E501


        :return: The block_id of this ReceiptInsert.  # noqa: E501
        :rtype: int
        """
        return self._block_id

    @block_id.setter
    def block_id(self, block_id):
        """Sets the block_id of this ReceiptInsert.


        :param block_id: The block_id of this ReceiptInsert.  # noqa: E501
        :type: int
        """
        if block_id is None:
            raise ValueError("Invalid value for `block_id`, must not be `None`")  # noqa: E501

        self._block_id = block_id

    @property
    def type(self):
        """Gets the type of this ReceiptInsert.  # noqa: E501


        :return: The type of this ReceiptInsert.  # noqa: E501
        :rtype: DocumentType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ReceiptInsert.


        :param type: The type of this ReceiptInsert.  # noqa: E501
        :type: DocumentType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def payment_method(self):
        """Gets the payment_method of this ReceiptInsert.  # noqa: E501


        :return: The payment_method of this ReceiptInsert.  # noqa: E501
        :rtype: PaymentMethod
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this ReceiptInsert.


        :param payment_method: The payment_method of this ReceiptInsert.  # noqa: E501
        :type: PaymentMethod
        """
        if payment_method is None:
            raise ValueError("Invalid value for `payment_method`, must not be `None`")  # noqa: E501

        self._payment_method = payment_method

    @property
    def currency(self):
        """Gets the currency of this ReceiptInsert.  # noqa: E501


        :return: The currency of this ReceiptInsert.  # noqa: E501
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this ReceiptInsert.


        :param currency: The currency of this ReceiptInsert.  # noqa: E501
        :type: Currency
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def conversion_rate(self):
        """Gets the conversion_rate of this ReceiptInsert.  # noqa: E501


        :return: The conversion_rate of this ReceiptInsert.  # noqa: E501
        :rtype: float
        """
        return self._conversion_rate

    @conversion_rate.setter
    def conversion_rate(self, conversion_rate):
        """Sets the conversion_rate of this ReceiptInsert.


        :param conversion_rate: The conversion_rate of this ReceiptInsert.  # noqa: E501
        :type: float
        """

        self._conversion_rate = conversion_rate

    @property
    def electronic(self):
        """Gets the electronic of this ReceiptInsert.  # noqa: E501


        :return: The electronic of this ReceiptInsert.  # noqa: E501
        :rtype: bool
        """
        return self._electronic

    @electronic.setter
    def electronic(self, electronic):
        """Sets the electronic of this ReceiptInsert.


        :param electronic: The electronic of this ReceiptInsert.  # noqa: E501
        :type: bool
        """

        self._electronic = electronic

    @property
    def items(self):
        """Gets the items of this ReceiptInsert.  # noqa: E501


        :return: The items of this ReceiptInsert.  # noqa: E501
        :rtype: list[OneOfReceiptInsertItemsItems]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this ReceiptInsert.


        :param items: The items of this ReceiptInsert.  # noqa: E501
        :type: list[OneOfReceiptInsertItemsItems]
        """

        self._items = items

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReceiptInsert, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReceiptInsert):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
