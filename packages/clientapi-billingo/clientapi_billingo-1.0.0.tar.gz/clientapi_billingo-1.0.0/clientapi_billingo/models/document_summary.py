# coding: utf-8

"""
    Billingo API v3

    This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.  # noqa: E501

    OpenAPI spec version: 3.0.14
    Contact: hello@billingo.hu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DocumentSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'net_amount': 'float',
        'net_amount_local': 'float',
        'gross_amount_local': 'float',
        'vat_amount': 'float',
        'vat_amount_local': 'float',
        'vat_rate_summary': 'list[DocumentVatRateSummary]'
    }

    attribute_map = {
        'net_amount': 'net_amount',
        'net_amount_local': 'net_amount_local',
        'gross_amount_local': 'gross_amount_local',
        'vat_amount': 'vat_amount',
        'vat_amount_local': 'vat_amount_local',
        'vat_rate_summary': 'vat_rate_summary'
    }

    def __init__(self, net_amount=None, net_amount_local=None, gross_amount_local=None, vat_amount=None, vat_amount_local=None, vat_rate_summary=None):  # noqa: E501
        """DocumentSummary - a model defined in Swagger"""  # noqa: E501
        self._net_amount = None
        self._net_amount_local = None
        self._gross_amount_local = None
        self._vat_amount = None
        self._vat_amount_local = None
        self._vat_rate_summary = None
        self.discriminator = None
        if net_amount is not None:
            self.net_amount = net_amount
        if net_amount_local is not None:
            self.net_amount_local = net_amount_local
        if gross_amount_local is not None:
            self.gross_amount_local = gross_amount_local
        if vat_amount is not None:
            self.vat_amount = vat_amount
        if vat_amount_local is not None:
            self.vat_amount_local = vat_amount_local
        if vat_rate_summary is not None:
            self.vat_rate_summary = vat_rate_summary

    @property
    def net_amount(self):
        """Gets the net_amount of this DocumentSummary.  # noqa: E501


        :return: The net_amount of this DocumentSummary.  # noqa: E501
        :rtype: float
        """
        return self._net_amount

    @net_amount.setter
    def net_amount(self, net_amount):
        """Sets the net_amount of this DocumentSummary.


        :param net_amount: The net_amount of this DocumentSummary.  # noqa: E501
        :type: float
        """

        self._net_amount = net_amount

    @property
    def net_amount_local(self):
        """Gets the net_amount_local of this DocumentSummary.  # noqa: E501


        :return: The net_amount_local of this DocumentSummary.  # noqa: E501
        :rtype: float
        """
        return self._net_amount_local

    @net_amount_local.setter
    def net_amount_local(self, net_amount_local):
        """Sets the net_amount_local of this DocumentSummary.


        :param net_amount_local: The net_amount_local of this DocumentSummary.  # noqa: E501
        :type: float
        """

        self._net_amount_local = net_amount_local

    @property
    def gross_amount_local(self):
        """Gets the gross_amount_local of this DocumentSummary.  # noqa: E501


        :return: The gross_amount_local of this DocumentSummary.  # noqa: E501
        :rtype: float
        """
        return self._gross_amount_local

    @gross_amount_local.setter
    def gross_amount_local(self, gross_amount_local):
        """Sets the gross_amount_local of this DocumentSummary.


        :param gross_amount_local: The gross_amount_local of this DocumentSummary.  # noqa: E501
        :type: float
        """

        self._gross_amount_local = gross_amount_local

    @property
    def vat_amount(self):
        """Gets the vat_amount of this DocumentSummary.  # noqa: E501


        :return: The vat_amount of this DocumentSummary.  # noqa: E501
        :rtype: float
        """
        return self._vat_amount

    @vat_amount.setter
    def vat_amount(self, vat_amount):
        """Sets the vat_amount of this DocumentSummary.


        :param vat_amount: The vat_amount of this DocumentSummary.  # noqa: E501
        :type: float
        """

        self._vat_amount = vat_amount

    @property
    def vat_amount_local(self):
        """Gets the vat_amount_local of this DocumentSummary.  # noqa: E501


        :return: The vat_amount_local of this DocumentSummary.  # noqa: E501
        :rtype: float
        """
        return self._vat_amount_local

    @vat_amount_local.setter
    def vat_amount_local(self, vat_amount_local):
        """Sets the vat_amount_local of this DocumentSummary.


        :param vat_amount_local: The vat_amount_local of this DocumentSummary.  # noqa: E501
        :type: float
        """

        self._vat_amount_local = vat_amount_local

    @property
    def vat_rate_summary(self):
        """Gets the vat_rate_summary of this DocumentSummary.  # noqa: E501


        :return: The vat_rate_summary of this DocumentSummary.  # noqa: E501
        :rtype: list[DocumentVatRateSummary]
        """
        return self._vat_rate_summary

    @vat_rate_summary.setter
    def vat_rate_summary(self, vat_rate_summary):
        """Sets the vat_rate_summary of this DocumentSummary.


        :param vat_rate_summary: The vat_rate_summary of this DocumentSummary.  # noqa: E501
        :type: list[DocumentVatRateSummary]
        """

        self._vat_rate_summary = vat_rate_summary

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DocumentSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocumentSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
