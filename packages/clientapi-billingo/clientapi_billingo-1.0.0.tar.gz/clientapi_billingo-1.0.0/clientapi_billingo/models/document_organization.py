# coding: utf-8

"""
    Billingo API v3

    This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.  # noqa: E501

    OpenAPI spec version: 3.0.14
    Contact: hello@billingo.hu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DocumentOrganization(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'tax_number': 'str',
        'bank_account': 'DocumentBankAccount',
        'address': 'Address',
        'small_taxpayer': 'bool',
        'ev_number': 'str',
        'eu_tax_number': 'str',
        'cash_settled': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'tax_number': 'tax_number',
        'bank_account': 'bank_account',
        'address': 'address',
        'small_taxpayer': 'small_taxpayer',
        'ev_number': 'ev_number',
        'eu_tax_number': 'eu_tax_number',
        'cash_settled': 'cash_settled'
    }

    def __init__(self, name=None, tax_number=None, bank_account=None, address=None, small_taxpayer=None, ev_number=None, eu_tax_number=None, cash_settled=None):  # noqa: E501
        """DocumentOrganization - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._tax_number = None
        self._bank_account = None
        self._address = None
        self._small_taxpayer = None
        self._ev_number = None
        self._eu_tax_number = None
        self._cash_settled = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if tax_number is not None:
            self.tax_number = tax_number
        if bank_account is not None:
            self.bank_account = bank_account
        if address is not None:
            self.address = address
        if small_taxpayer is not None:
            self.small_taxpayer = small_taxpayer
        if ev_number is not None:
            self.ev_number = ev_number
        if eu_tax_number is not None:
            self.eu_tax_number = eu_tax_number
        if cash_settled is not None:
            self.cash_settled = cash_settled

    @property
    def name(self):
        """Gets the name of this DocumentOrganization.  # noqa: E501


        :return: The name of this DocumentOrganization.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DocumentOrganization.


        :param name: The name of this DocumentOrganization.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def tax_number(self):
        """Gets the tax_number of this DocumentOrganization.  # noqa: E501


        :return: The tax_number of this DocumentOrganization.  # noqa: E501
        :rtype: str
        """
        return self._tax_number

    @tax_number.setter
    def tax_number(self, tax_number):
        """Sets the tax_number of this DocumentOrganization.


        :param tax_number: The tax_number of this DocumentOrganization.  # noqa: E501
        :type: str
        """

        self._tax_number = tax_number

    @property
    def bank_account(self):
        """Gets the bank_account of this DocumentOrganization.  # noqa: E501


        :return: The bank_account of this DocumentOrganization.  # noqa: E501
        :rtype: DocumentBankAccount
        """
        return self._bank_account

    @bank_account.setter
    def bank_account(self, bank_account):
        """Sets the bank_account of this DocumentOrganization.


        :param bank_account: The bank_account of this DocumentOrganization.  # noqa: E501
        :type: DocumentBankAccount
        """

        self._bank_account = bank_account

    @property
    def address(self):
        """Gets the address of this DocumentOrganization.  # noqa: E501


        :return: The address of this DocumentOrganization.  # noqa: E501
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this DocumentOrganization.


        :param address: The address of this DocumentOrganization.  # noqa: E501
        :type: Address
        """

        self._address = address

    @property
    def small_taxpayer(self):
        """Gets the small_taxpayer of this DocumentOrganization.  # noqa: E501


        :return: The small_taxpayer of this DocumentOrganization.  # noqa: E501
        :rtype: bool
        """
        return self._small_taxpayer

    @small_taxpayer.setter
    def small_taxpayer(self, small_taxpayer):
        """Sets the small_taxpayer of this DocumentOrganization.


        :param small_taxpayer: The small_taxpayer of this DocumentOrganization.  # noqa: E501
        :type: bool
        """

        self._small_taxpayer = small_taxpayer

    @property
    def ev_number(self):
        """Gets the ev_number of this DocumentOrganization.  # noqa: E501


        :return: The ev_number of this DocumentOrganization.  # noqa: E501
        :rtype: str
        """
        return self._ev_number

    @ev_number.setter
    def ev_number(self, ev_number):
        """Sets the ev_number of this DocumentOrganization.


        :param ev_number: The ev_number of this DocumentOrganization.  # noqa: E501
        :type: str
        """

        self._ev_number = ev_number

    @property
    def eu_tax_number(self):
        """Gets the eu_tax_number of this DocumentOrganization.  # noqa: E501


        :return: The eu_tax_number of this DocumentOrganization.  # noqa: E501
        :rtype: str
        """
        return self._eu_tax_number

    @eu_tax_number.setter
    def eu_tax_number(self, eu_tax_number):
        """Sets the eu_tax_number of this DocumentOrganization.


        :param eu_tax_number: The eu_tax_number of this DocumentOrganization.  # noqa: E501
        :type: str
        """

        self._eu_tax_number = eu_tax_number

    @property
    def cash_settled(self):
        """Gets the cash_settled of this DocumentOrganization.  # noqa: E501


        :return: The cash_settled of this DocumentOrganization.  # noqa: E501
        :rtype: bool
        """
        return self._cash_settled

    @cash_settled.setter
    def cash_settled(self, cash_settled):
        """Sets the cash_settled of this DocumentOrganization.


        :param cash_settled: The cash_settled of this DocumentOrganization.  # noqa: E501
        :type: bool
        """

        self._cash_settled = cash_settled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DocumentOrganization, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocumentOrganization):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
