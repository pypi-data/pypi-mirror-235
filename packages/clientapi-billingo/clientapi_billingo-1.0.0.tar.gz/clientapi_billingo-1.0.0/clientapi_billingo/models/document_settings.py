# coding: utf-8

"""
    Billingo API v3

    This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.  # noqa: E501

    OpenAPI spec version: 3.0.14
    Contact: hello@billingo.hu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DocumentSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mediated_service': 'bool',
        'without_financial_fulfillment': 'bool',
        'online_payment': 'OnlinePayment',
        'round': 'Round',
        'no_send_onlineszamla_by_user': 'bool',
        'order_number': 'str',
        'place_id': 'int',
        'instant_payment': 'bool',
        'selected_type': 'DocumentType'
    }

    attribute_map = {
        'mediated_service': 'mediated_service',
        'without_financial_fulfillment': 'without_financial_fulfillment',
        'online_payment': 'online_payment',
        'round': 'round',
        'no_send_onlineszamla_by_user': 'no_send_onlineszamla_by_user',
        'order_number': 'order_number',
        'place_id': 'place_id',
        'instant_payment': 'instant_payment',
        'selected_type': 'selected_type'
    }

    def __init__(self, mediated_service=False, without_financial_fulfillment=False, online_payment=None, round=None, no_send_onlineszamla_by_user=None, order_number=None, place_id=None, instant_payment=None, selected_type=None):  # noqa: E501
        """DocumentSettings - a model defined in Swagger"""  # noqa: E501
        self._mediated_service = None
        self._without_financial_fulfillment = None
        self._online_payment = None
        self._round = None
        self._no_send_onlineszamla_by_user = None
        self._order_number = None
        self._place_id = None
        self._instant_payment = None
        self._selected_type = None
        self.discriminator = None
        if mediated_service is not None:
            self.mediated_service = mediated_service
        if without_financial_fulfillment is not None:
            self.without_financial_fulfillment = without_financial_fulfillment
        if online_payment is not None:
            self.online_payment = online_payment
        if round is not None:
            self.round = round
        if no_send_onlineszamla_by_user is not None:
            self.no_send_onlineszamla_by_user = no_send_onlineszamla_by_user
        if order_number is not None:
            self.order_number = order_number
        if place_id is not None:
            self.place_id = place_id
        if instant_payment is not None:
            self.instant_payment = instant_payment
        if selected_type is not None:
            self.selected_type = selected_type

    @property
    def mediated_service(self):
        """Gets the mediated_service of this DocumentSettings.  # noqa: E501


        :return: The mediated_service of this DocumentSettings.  # noqa: E501
        :rtype: bool
        """
        return self._mediated_service

    @mediated_service.setter
    def mediated_service(self, mediated_service):
        """Sets the mediated_service of this DocumentSettings.


        :param mediated_service: The mediated_service of this DocumentSettings.  # noqa: E501
        :type: bool
        """

        self._mediated_service = mediated_service

    @property
    def without_financial_fulfillment(self):
        """Gets the without_financial_fulfillment of this DocumentSettings.  # noqa: E501


        :return: The without_financial_fulfillment of this DocumentSettings.  # noqa: E501
        :rtype: bool
        """
        return self._without_financial_fulfillment

    @without_financial_fulfillment.setter
    def without_financial_fulfillment(self, without_financial_fulfillment):
        """Sets the without_financial_fulfillment of this DocumentSettings.


        :param without_financial_fulfillment: The without_financial_fulfillment of this DocumentSettings.  # noqa: E501
        :type: bool
        """

        self._without_financial_fulfillment = without_financial_fulfillment

    @property
    def online_payment(self):
        """Gets the online_payment of this DocumentSettings.  # noqa: E501


        :return: The online_payment of this DocumentSettings.  # noqa: E501
        :rtype: OnlinePayment
        """
        return self._online_payment

    @online_payment.setter
    def online_payment(self, online_payment):
        """Sets the online_payment of this DocumentSettings.


        :param online_payment: The online_payment of this DocumentSettings.  # noqa: E501
        :type: OnlinePayment
        """

        self._online_payment = online_payment

    @property
    def round(self):
        """Gets the round of this DocumentSettings.  # noqa: E501


        :return: The round of this DocumentSettings.  # noqa: E501
        :rtype: Round
        """
        return self._round

    @round.setter
    def round(self, round):
        """Sets the round of this DocumentSettings.


        :param round: The round of this DocumentSettings.  # noqa: E501
        :type: Round
        """

        self._round = round

    @property
    def no_send_onlineszamla_by_user(self):
        """Gets the no_send_onlineszamla_by_user of this DocumentSettings.  # noqa: E501


        :return: The no_send_onlineszamla_by_user of this DocumentSettings.  # noqa: E501
        :rtype: bool
        """
        return self._no_send_onlineszamla_by_user

    @no_send_onlineszamla_by_user.setter
    def no_send_onlineszamla_by_user(self, no_send_onlineszamla_by_user):
        """Sets the no_send_onlineszamla_by_user of this DocumentSettings.


        :param no_send_onlineszamla_by_user: The no_send_onlineszamla_by_user of this DocumentSettings.  # noqa: E501
        :type: bool
        """

        self._no_send_onlineszamla_by_user = no_send_onlineszamla_by_user

    @property
    def order_number(self):
        """Gets the order_number of this DocumentSettings.  # noqa: E501


        :return: The order_number of this DocumentSettings.  # noqa: E501
        :rtype: str
        """
        return self._order_number

    @order_number.setter
    def order_number(self, order_number):
        """Sets the order_number of this DocumentSettings.


        :param order_number: The order_number of this DocumentSettings.  # noqa: E501
        :type: str
        """

        self._order_number = order_number

    @property
    def place_id(self):
        """Gets the place_id of this DocumentSettings.  # noqa: E501


        :return: The place_id of this DocumentSettings.  # noqa: E501
        :rtype: int
        """
        return self._place_id

    @place_id.setter
    def place_id(self, place_id):
        """Sets the place_id of this DocumentSettings.


        :param place_id: The place_id of this DocumentSettings.  # noqa: E501
        :type: int
        """

        self._place_id = place_id

    @property
    def instant_payment(self):
        """Gets the instant_payment of this DocumentSettings.  # noqa: E501


        :return: The instant_payment of this DocumentSettings.  # noqa: E501
        :rtype: bool
        """
        return self._instant_payment

    @instant_payment.setter
    def instant_payment(self, instant_payment):
        """Sets the instant_payment of this DocumentSettings.


        :param instant_payment: The instant_payment of this DocumentSettings.  # noqa: E501
        :type: bool
        """

        self._instant_payment = instant_payment

    @property
    def selected_type(self):
        """Gets the selected_type of this DocumentSettings.  # noqa: E501


        :return: The selected_type of this DocumentSettings.  # noqa: E501
        :rtype: DocumentType
        """
        return self._selected_type

    @selected_type.setter
    def selected_type(self, selected_type):
        """Sets the selected_type of this DocumentSettings.


        :param selected_type: The selected_type of this DocumentSettings.  # noqa: E501
        :type: DocumentType
        """

        self._selected_type = selected_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DocumentSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocumentSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
