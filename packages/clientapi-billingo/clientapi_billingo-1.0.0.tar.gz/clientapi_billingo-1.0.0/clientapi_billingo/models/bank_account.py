# coding: utf-8

"""
    Billingo API v3

    This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.  # noqa: E501

    OpenAPI spec version: 3.0.14
    Contact: hello@billingo.hu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BankAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'account_number': 'str',
        'account_number_iban': 'str',
        'swift': 'str',
        'currency': 'Currency',
        'need_qr': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'account_number': 'account_number',
        'account_number_iban': 'account_number_iban',
        'swift': 'swift',
        'currency': 'currency',
        'need_qr': 'need_qr'
    }

    def __init__(self, id=None, name=None, account_number=None, account_number_iban=None, swift=None, currency=None, need_qr=False):  # noqa: E501
        """BankAccount - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._account_number = None
        self._account_number_iban = None
        self._swift = None
        self._currency = None
        self._need_qr = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.name = name
        self.account_number = account_number
        if account_number_iban is not None:
            self.account_number_iban = account_number_iban
        if swift is not None:
            self.swift = swift
        self.currency = currency
        if need_qr is not None:
            self.need_qr = need_qr

    @property
    def id(self):
        """Gets the id of this BankAccount.  # noqa: E501


        :return: The id of this BankAccount.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BankAccount.


        :param id: The id of this BankAccount.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this BankAccount.  # noqa: E501


        :return: The name of this BankAccount.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BankAccount.


        :param name: The name of this BankAccount.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def account_number(self):
        """Gets the account_number of this BankAccount.  # noqa: E501


        :return: The account_number of this BankAccount.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this BankAccount.


        :param account_number: The account_number of this BankAccount.  # noqa: E501
        :type: str
        """
        if account_number is None:
            raise ValueError("Invalid value for `account_number`, must not be `None`")  # noqa: E501

        self._account_number = account_number

    @property
    def account_number_iban(self):
        """Gets the account_number_iban of this BankAccount.  # noqa: E501


        :return: The account_number_iban of this BankAccount.  # noqa: E501
        :rtype: str
        """
        return self._account_number_iban

    @account_number_iban.setter
    def account_number_iban(self, account_number_iban):
        """Sets the account_number_iban of this BankAccount.


        :param account_number_iban: The account_number_iban of this BankAccount.  # noqa: E501
        :type: str
        """

        self._account_number_iban = account_number_iban

    @property
    def swift(self):
        """Gets the swift of this BankAccount.  # noqa: E501


        :return: The swift of this BankAccount.  # noqa: E501
        :rtype: str
        """
        return self._swift

    @swift.setter
    def swift(self, swift):
        """Sets the swift of this BankAccount.


        :param swift: The swift of this BankAccount.  # noqa: E501
        :type: str
        """

        self._swift = swift

    @property
    def currency(self):
        """Gets the currency of this BankAccount.  # noqa: E501


        :return: The currency of this BankAccount.  # noqa: E501
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this BankAccount.


        :param currency: The currency of this BankAccount.  # noqa: E501
        :type: Currency
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def need_qr(self):
        """Gets the need_qr of this BankAccount.  # noqa: E501


        :return: The need_qr of this BankAccount.  # noqa: E501
        :rtype: bool
        """
        return self._need_qr

    @need_qr.setter
    def need_qr(self, need_qr):
        """Sets the need_qr of this BankAccount.


        :param need_qr: The need_qr of this BankAccount.  # noqa: E501
        :type: bool
        """

        self._need_qr = need_qr

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BankAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BankAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
