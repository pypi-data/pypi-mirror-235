# coding: utf-8

"""
    Billingo API v3

    This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.  # noqa: E501

    OpenAPI spec version: 3.0.14
    Contact: hello@billingo.hu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LedgerNumberInformation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bevetel': 'str',
        'vevo': 'str',
        'penztar': 'str',
        'afa': 'str'
    }

    attribute_map = {
        'bevetel': 'bevetel',
        'vevo': 'vevo',
        'penztar': 'penztar',
        'afa': 'afa'
    }

    def __init__(self, bevetel=None, vevo=None, penztar=None, afa=None):  # noqa: E501
        """LedgerNumberInformation - a model defined in Swagger"""  # noqa: E501
        self._bevetel = None
        self._vevo = None
        self._penztar = None
        self._afa = None
        self.discriminator = None
        if bevetel is not None:
            self.bevetel = bevetel
        if vevo is not None:
            self.vevo = vevo
        if penztar is not None:
            self.penztar = penztar
        if afa is not None:
            self.afa = afa

    @property
    def bevetel(self):
        """Gets the bevetel of this LedgerNumberInformation.  # noqa: E501


        :return: The bevetel of this LedgerNumberInformation.  # noqa: E501
        :rtype: str
        """
        return self._bevetel

    @bevetel.setter
    def bevetel(self, bevetel):
        """Sets the bevetel of this LedgerNumberInformation.


        :param bevetel: The bevetel of this LedgerNumberInformation.  # noqa: E501
        :type: str
        """

        self._bevetel = bevetel

    @property
    def vevo(self):
        """Gets the vevo of this LedgerNumberInformation.  # noqa: E501


        :return: The vevo of this LedgerNumberInformation.  # noqa: E501
        :rtype: str
        """
        return self._vevo

    @vevo.setter
    def vevo(self, vevo):
        """Sets the vevo of this LedgerNumberInformation.


        :param vevo: The vevo of this LedgerNumberInformation.  # noqa: E501
        :type: str
        """

        self._vevo = vevo

    @property
    def penztar(self):
        """Gets the penztar of this LedgerNumberInformation.  # noqa: E501


        :return: The penztar of this LedgerNumberInformation.  # noqa: E501
        :rtype: str
        """
        return self._penztar

    @penztar.setter
    def penztar(self, penztar):
        """Sets the penztar of this LedgerNumberInformation.


        :param penztar: The penztar of this LedgerNumberInformation.  # noqa: E501
        :type: str
        """

        self._penztar = penztar

    @property
    def afa(self):
        """Gets the afa of this LedgerNumberInformation.  # noqa: E501


        :return: The afa of this LedgerNumberInformation.  # noqa: E501
        :rtype: str
        """
        return self._afa

    @afa.setter
    def afa(self, afa):
        """Sets the afa of this LedgerNumberInformation.


        :param afa: The afa of this LedgerNumberInformation.  # noqa: E501
        :type: str
        """

        self._afa = afa

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LedgerNumberInformation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LedgerNumberInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
