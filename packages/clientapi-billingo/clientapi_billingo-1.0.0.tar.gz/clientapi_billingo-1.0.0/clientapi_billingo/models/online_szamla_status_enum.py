# coding: utf-8

"""
    Billingo API v3

    This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.  # noqa: E501

    OpenAPI spec version: 3.0.14
    Contact: hello@billingo.hu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OnlineSzamlaStatusEnum(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    ABORTED = "aborted"
    DONE = "done"
    EMPTY_ORGANIZATION_COUNTRY_CODE = "empty_organization_country_code"
    EMPTY_PARTNER_COUNTRY_CODE = "empty_partner_country_code"
    EMPTY_TAX = "empty_tax"
    FORBIDDEN = "forbidden"
    INVALID_ADDRESS = "invalid_address"
    INVALID_CLIENT = "invalid_client"
    INVALID_CONVERSION_RATE = "invalid_conversion_rate"
    INVALID_CUSTOMER = "invalid_customer"
    INVALID_INVOICE_REFERENCE = "invalid_invoice_reference"
    INVALID_POSTALCODE = "invalid_postalcode"
    INVALID_SECURITY_USER = "invalid_security_user"
    INVALID_TAX = "invalid_tax"
    INVALID_TAX_NUMBER = "invalid_tax_number"
    INVALID_USER_RELATION = "invalid_user_relation"
    INVALID_VAT_DATA = "invalid_vat_data"
    INVOICE_NUMBER_NOT_UNIQUE = "invoice_number_not_unique"
    KOBAK_PROCESSING = "kobak_processing"
    MISSING_DOCUMENT_ITEM_NAME = "missing_document_item_name"
    NAV_WARN = "nav_warn"
    NO_ONLINE_SZAMLA_SETTINGS = "no_online_szamla_settings"
    NO_SEND_BY_USER = "no_send_by_user"
    NON_EXIST_TAX_NUMBER = "non_exist_tax_number"
    NOT_UNIQUE = "not unique"
    NOT_CHECKED = "not_checked"
    NOT_REGISTERED_CUSTOMER = "not_registered_customer"
    PROCESSING = "processing"
    RECEIVED = "received"
    SAVED = "saved"
    SEND_FAILED = "send_failed"
    SENT = "sent"
    STARTED = "started"
    TECHNICAL_ERROR = "technical_error"
    UNDER_TAX_LIMIT = "under_tax_limit"
    USER_HAS_INVALID_KOBAK = "user_has_invalid_kobak"
    USER_HASNOT_KOBAK = "user_hasnot_kobak"
    VALIDATION_OK = "validation_ok"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self):  # noqa: E501
        """OnlineSzamlaStatusEnum - a model defined in Swagger"""  # noqa: E501
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OnlineSzamlaStatusEnum, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OnlineSzamlaStatusEnum):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
