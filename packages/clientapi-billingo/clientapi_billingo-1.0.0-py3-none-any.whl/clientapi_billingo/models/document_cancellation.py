# coding: utf-8

"""
    Billingo API v3

    This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.  # noqa: E501

    OpenAPI spec version: 3.0.14
    Contact: hello@billingo.hu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DocumentCancellation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cancellation_reason': 'str',
        'cancellation_recipients': 'str'
    }

    attribute_map = {
        'cancellation_reason': 'cancellation_reason',
        'cancellation_recipients': 'cancellation_recipients'
    }

    def __init__(self, cancellation_reason=None, cancellation_recipients=None):  # noqa: E501
        """DocumentCancellation - a model defined in Swagger"""  # noqa: E501
        self._cancellation_reason = None
        self._cancellation_recipients = None
        self.discriminator = None
        if cancellation_reason is not None:
            self.cancellation_reason = cancellation_reason
        if cancellation_recipients is not None:
            self.cancellation_recipients = cancellation_recipients

    @property
    def cancellation_reason(self):
        """Gets the cancellation_reason of this DocumentCancellation.  # noqa: E501


        :return: The cancellation_reason of this DocumentCancellation.  # noqa: E501
        :rtype: str
        """
        return self._cancellation_reason

    @cancellation_reason.setter
    def cancellation_reason(self, cancellation_reason):
        """Sets the cancellation_reason of this DocumentCancellation.


        :param cancellation_reason: The cancellation_reason of this DocumentCancellation.  # noqa: E501
        :type: str
        """

        self._cancellation_reason = cancellation_reason

    @property
    def cancellation_recipients(self):
        """Gets the cancellation_recipients of this DocumentCancellation.  # noqa: E501


        :return: The cancellation_recipients of this DocumentCancellation.  # noqa: E501
        :rtype: str
        """
        return self._cancellation_recipients

    @cancellation_recipients.setter
    def cancellation_recipients(self, cancellation_recipients):
        """Sets the cancellation_recipients of this DocumentCancellation.


        :param cancellation_recipients: The cancellation_recipients of this DocumentCancellation.  # noqa: E501
        :type: str
        """

        self._cancellation_recipients = cancellation_recipients

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DocumentCancellation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocumentCancellation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
