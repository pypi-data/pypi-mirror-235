# coding: utf-8

"""
    Billingo API v3

    This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.  # noqa: E501

    OpenAPI spec version: 3.0.14
    Contact: hello@billingo.hu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DocumentList(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data': 'list[Document]',
        'total': 'int',
        'per_page': 'int',
        'current_page': 'int',
        'last_page': 'int',
        'prev_page_url': 'str',
        'next_page_url': 'str'
    }

    attribute_map = {
        'data': 'data',
        'total': 'total',
        'per_page': 'per_page',
        'current_page': 'current_page',
        'last_page': 'last_page',
        'prev_page_url': 'prev_page_url',
        'next_page_url': 'next_page_url'
    }

    def __init__(self, data=None, total=None, per_page=None, current_page=None, last_page=None, prev_page_url=None, next_page_url=None):  # noqa: E501
        """DocumentList - a model defined in Swagger"""  # noqa: E501
        self._data = None
        self._total = None
        self._per_page = None
        self._current_page = None
        self._last_page = None
        self._prev_page_url = None
        self._next_page_url = None
        self.discriminator = None
        if data is not None:
            self.data = data
        if total is not None:
            self.total = total
        if per_page is not None:
            self.per_page = per_page
        if current_page is not None:
            self.current_page = current_page
        if last_page is not None:
            self.last_page = last_page
        if prev_page_url is not None:
            self.prev_page_url = prev_page_url
        if next_page_url is not None:
            self.next_page_url = next_page_url

    @property
    def data(self):
        """Gets the data of this DocumentList.  # noqa: E501


        :return: The data of this DocumentList.  # noqa: E501
        :rtype: list[Document]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this DocumentList.


        :param data: The data of this DocumentList.  # noqa: E501
        :type: list[Document]
        """

        self._data = data

    @property
    def total(self):
        """Gets the total of this DocumentList.  # noqa: E501


        :return: The total of this DocumentList.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this DocumentList.


        :param total: The total of this DocumentList.  # noqa: E501
        :type: int
        """

        self._total = total

    @property
    def per_page(self):
        """Gets the per_page of this DocumentList.  # noqa: E501


        :return: The per_page of this DocumentList.  # noqa: E501
        :rtype: int
        """
        return self._per_page

    @per_page.setter
    def per_page(self, per_page):
        """Sets the per_page of this DocumentList.


        :param per_page: The per_page of this DocumentList.  # noqa: E501
        :type: int
        """

        self._per_page = per_page

    @property
    def current_page(self):
        """Gets the current_page of this DocumentList.  # noqa: E501


        :return: The current_page of this DocumentList.  # noqa: E501
        :rtype: int
        """
        return self._current_page

    @current_page.setter
    def current_page(self, current_page):
        """Sets the current_page of this DocumentList.


        :param current_page: The current_page of this DocumentList.  # noqa: E501
        :type: int
        """

        self._current_page = current_page

    @property
    def last_page(self):
        """Gets the last_page of this DocumentList.  # noqa: E501


        :return: The last_page of this DocumentList.  # noqa: E501
        :rtype: int
        """
        return self._last_page

    @last_page.setter
    def last_page(self, last_page):
        """Sets the last_page of this DocumentList.


        :param last_page: The last_page of this DocumentList.  # noqa: E501
        :type: int
        """

        self._last_page = last_page

    @property
    def prev_page_url(self):
        """Gets the prev_page_url of this DocumentList.  # noqa: E501


        :return: The prev_page_url of this DocumentList.  # noqa: E501
        :rtype: str
        """
        return self._prev_page_url

    @prev_page_url.setter
    def prev_page_url(self, prev_page_url):
        """Sets the prev_page_url of this DocumentList.


        :param prev_page_url: The prev_page_url of this DocumentList.  # noqa: E501
        :type: str
        """

        self._prev_page_url = prev_page_url

    @property
    def next_page_url(self):
        """Gets the next_page_url of this DocumentList.  # noqa: E501


        :return: The next_page_url of this DocumentList.  # noqa: E501
        :rtype: str
        """
        return self._next_page_url

    @next_page_url.setter
    def next_page_url(self, next_page_url):
        """Sets the next_page_url of this DocumentList.


        :param next_page_url: The next_page_url of this DocumentList.  # noqa: E501
        :type: str
        """

        self._next_page_url = next_page_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DocumentList, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocumentList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
