# coding: utf-8

"""
    Billingo API v3

    This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.  # noqa: E501

    OpenAPI spec version: 3.0.14
    Contact: hello@billingo.hu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ServerTime(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'epoch': 'int',
        'formatted': 'str',
        'w3c': 'str',
        'timezone': 'str'
    }

    attribute_map = {
        'epoch': 'epoch',
        'formatted': 'formatted',
        'w3c': 'w3c',
        'timezone': 'timezone'
    }

    def __init__(self, epoch=None, formatted=None, w3c=None, timezone=None):  # noqa: E501
        """ServerTime - a model defined in Swagger"""  # noqa: E501
        self._epoch = None
        self._formatted = None
        self._w3c = None
        self._timezone = None
        self.discriminator = None
        if epoch is not None:
            self.epoch = epoch
        if formatted is not None:
            self.formatted = formatted
        if w3c is not None:
            self.w3c = w3c
        if timezone is not None:
            self.timezone = timezone

    @property
    def epoch(self):
        """Gets the epoch of this ServerTime.  # noqa: E501


        :return: The epoch of this ServerTime.  # noqa: E501
        :rtype: int
        """
        return self._epoch

    @epoch.setter
    def epoch(self, epoch):
        """Sets the epoch of this ServerTime.


        :param epoch: The epoch of this ServerTime.  # noqa: E501
        :type: int
        """

        self._epoch = epoch

    @property
    def formatted(self):
        """Gets the formatted of this ServerTime.  # noqa: E501


        :return: The formatted of this ServerTime.  # noqa: E501
        :rtype: str
        """
        return self._formatted

    @formatted.setter
    def formatted(self, formatted):
        """Sets the formatted of this ServerTime.


        :param formatted: The formatted of this ServerTime.  # noqa: E501
        :type: str
        """

        self._formatted = formatted

    @property
    def w3c(self):
        """Gets the w3c of this ServerTime.  # noqa: E501


        :return: The w3c of this ServerTime.  # noqa: E501
        :rtype: str
        """
        return self._w3c

    @w3c.setter
    def w3c(self, w3c):
        """Sets the w3c of this ServerTime.


        :param w3c: The w3c of this ServerTime.  # noqa: E501
        :type: str
        """

        self._w3c = w3c

    @property
    def timezone(self):
        """Gets the timezone of this ServerTime.  # noqa: E501


        :return: The timezone of this ServerTime.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this ServerTime.


        :param timezone: The timezone of this ServerTime.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServerTime, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServerTime):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
