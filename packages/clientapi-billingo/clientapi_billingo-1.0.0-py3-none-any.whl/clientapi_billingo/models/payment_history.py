# coding: utf-8

"""
    Billingo API v3

    This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.  # noqa: E501

    OpenAPI spec version: 3.0.14
    Contact: hello@billingo.hu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PaymentHistory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_date': 'date',
        'price': 'float',
        'payment_method': 'PaymentMethod',
        'voucher_number': 'str',
        'conversion_rate': 'float'
    }

    attribute_map = {
        '_date': 'date',
        'price': 'price',
        'payment_method': 'payment_method',
        'voucher_number': 'voucher_number',
        'conversion_rate': 'conversion_rate'
    }

    def __init__(self, _date=None, price=None, payment_method=None, voucher_number=None, conversion_rate=None):  # noqa: E501
        """PaymentHistory - a model defined in Swagger"""  # noqa: E501
        self.__date = None
        self._price = None
        self._payment_method = None
        self._voucher_number = None
        self._conversion_rate = None
        self.discriminator = None
        self._date = _date
        self.price = price
        self.payment_method = payment_method
        if voucher_number is not None:
            self.voucher_number = voucher_number
        if conversion_rate is not None:
            self.conversion_rate = conversion_rate

    @property
    def _date(self):
        """Gets the _date of this PaymentHistory.  # noqa: E501


        :return: The _date of this PaymentHistory.  # noqa: E501
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this PaymentHistory.


        :param _date: The _date of this PaymentHistory.  # noqa: E501
        :type: date
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def price(self):
        """Gets the price of this PaymentHistory.  # noqa: E501


        :return: The price of this PaymentHistory.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this PaymentHistory.


        :param price: The price of this PaymentHistory.  # noqa: E501
        :type: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def payment_method(self):
        """Gets the payment_method of this PaymentHistory.  # noqa: E501


        :return: The payment_method of this PaymentHistory.  # noqa: E501
        :rtype: PaymentMethod
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this PaymentHistory.


        :param payment_method: The payment_method of this PaymentHistory.  # noqa: E501
        :type: PaymentMethod
        """
        if payment_method is None:
            raise ValueError("Invalid value for `payment_method`, must not be `None`")  # noqa: E501

        self._payment_method = payment_method

    @property
    def voucher_number(self):
        """Gets the voucher_number of this PaymentHistory.  # noqa: E501


        :return: The voucher_number of this PaymentHistory.  # noqa: E501
        :rtype: str
        """
        return self._voucher_number

    @voucher_number.setter
    def voucher_number(self, voucher_number):
        """Sets the voucher_number of this PaymentHistory.


        :param voucher_number: The voucher_number of this PaymentHistory.  # noqa: E501
        :type: str
        """

        self._voucher_number = voucher_number

    @property
    def conversion_rate(self):
        """Gets the conversion_rate of this PaymentHistory.  # noqa: E501


        :return: The conversion_rate of this PaymentHistory.  # noqa: E501
        :rtype: float
        """
        return self._conversion_rate

    @conversion_rate.setter
    def conversion_rate(self, conversion_rate):
        """Sets the conversion_rate of this PaymentHistory.


        :param conversion_rate: The conversion_rate of this PaymentHistory.  # noqa: E501
        :type: float
        """

        self._conversion_rate = conversion_rate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentHistory, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentHistory):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
