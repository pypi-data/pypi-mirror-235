# coding: utf-8

"""
    Billingo API v3

    This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.  # noqa: E501

    OpenAPI spec version: 3.0.14
    Contact: hello@billingo.hu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Vat(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    _0_ = "0%"
    _1_ = "1%"
    _10_ = "10%"
    _11_ = "11%"
    _12_ = "12%"
    _13_ = "13%"
    _14_ = "14%"
    _15_ = "15%"
    _16_ = "16%"
    _17_ = "17%"
    _18_ = "18%"
    _19_ = "19%"
    _2_ = "2%"
    _20_ = "20%"
    _21_ = "21%"
    _22_ = "22%"
    _23_ = "23%"
    _24_ = "24%"
    _25_ = "25%"
    _26_ = "26%"
    _27_ = "27%"
    _3_ = "3%"
    _4_ = "4%"
    _5_ = "5%"
    _5_5_ = "5,5%"
    _6_ = "6%"
    _7_ = "7%"
    _7_7_ = "7,7%"
    _8_ = "8%"
    _9_ = "9%"
    _9_5_ = "9,5%"
    AAM = "AAM"
    AM = "AM"
    EU = "EU"
    EUK = "EUK"
    F_AFA = "F.AFA"
    FAD = "FAD"
    K_AFA = "K.AFA"
    MAA = "MAA"
    TAM = "TAM"
    _KK = "ÁKK"
    _THK = "ÁTHK"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self):  # noqa: E501
        """Vat - a model defined in Swagger"""  # noqa: E501
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Vat, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Vat):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
