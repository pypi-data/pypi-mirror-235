# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `rime-api-key` header.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GenerativefirewallFirewallRuleConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fact_sheet_url': 'str',
        'sensitive_terms_url': 'str',
        'allowed_topics': 'list[str]',
        'language': 'RimeLanguage',
        'selected_rules': 'list[GenerativefirewallFirewallRuleType]'
    }

    attribute_map = {
        'fact_sheet_url': 'factSheetUrl',
        'sensitive_terms_url': 'sensitiveTermsUrl',
        'allowed_topics': 'allowedTopics',
        'language': 'language',
        'selected_rules': 'selectedRules'
    }

    def __init__(self, fact_sheet_url=None, sensitive_terms_url=None, allowed_topics=None, language=None, selected_rules=None):  # noqa: E501
        """GenerativefirewallFirewallRuleConfig - a model defined in Swagger"""  # noqa: E501
        self._fact_sheet_url = None
        self._sensitive_terms_url = None
        self._allowed_topics = None
        self._language = None
        self._selected_rules = None
        self.discriminator = None
        if fact_sheet_url is not None:
            self.fact_sheet_url = fact_sheet_url
        if sensitive_terms_url is not None:
            self.sensitive_terms_url = sensitive_terms_url
        if allowed_topics is not None:
            self.allowed_topics = allowed_topics
        if language is not None:
            self.language = language
        if selected_rules is not None:
            self.selected_rules = selected_rules

    @property
    def fact_sheet_url(self):
        """Gets the fact_sheet_url of this GenerativefirewallFirewallRuleConfig.  # noqa: E501

        Fact sheet URL describes the location of a fact sheet to use in validation rules around correctness. If not provided, the factual inconsistency rules will not run.  # noqa: E501

        :return: The fact_sheet_url of this GenerativefirewallFirewallRuleConfig.  # noqa: E501
        :rtype: str
        """
        return self._fact_sheet_url

    @fact_sheet_url.setter
    def fact_sheet_url(self, fact_sheet_url):
        """Sets the fact_sheet_url of this GenerativefirewallFirewallRuleConfig.

        Fact sheet URL describes the location of a fact sheet to use in validation rules around correctness. If not provided, the factual inconsistency rules will not run.  # noqa: E501

        :param fact_sheet_url: The fact_sheet_url of this GenerativefirewallFirewallRuleConfig.  # noqa: E501
        :type: str
        """

        self._fact_sheet_url = fact_sheet_url

    @property
    def sensitive_terms_url(self):
        """Gets the sensitive_terms_url of this GenerativefirewallFirewallRuleConfig.  # noqa: E501

        Sensitive terms URL describes the location of a sensitive terms sheet to use in validation rules around PII. If not provided, the PII rules will not run.  # noqa: E501

        :return: The sensitive_terms_url of this GenerativefirewallFirewallRuleConfig.  # noqa: E501
        :rtype: str
        """
        return self._sensitive_terms_url

    @sensitive_terms_url.setter
    def sensitive_terms_url(self, sensitive_terms_url):
        """Sets the sensitive_terms_url of this GenerativefirewallFirewallRuleConfig.

        Sensitive terms URL describes the location of a sensitive terms sheet to use in validation rules around PII. If not provided, the PII rules will not run.  # noqa: E501

        :param sensitive_terms_url: The sensitive_terms_url of this GenerativefirewallFirewallRuleConfig.  # noqa: E501
        :type: str
        """

        self._sensitive_terms_url = sensitive_terms_url

    @property
    def allowed_topics(self):
        """Gets the allowed_topics of this GenerativefirewallFirewallRuleConfig.  # noqa: E501

        Allowed topics describes the expected chat topics. It is used for the Off-topic rule. If not provided, the off-topic rule will not run. The maximum number of allowed topics is 3. Configuring more topics may increase the firewall latency.  # noqa: E501

        :return: The allowed_topics of this GenerativefirewallFirewallRuleConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_topics

    @allowed_topics.setter
    def allowed_topics(self, allowed_topics):
        """Sets the allowed_topics of this GenerativefirewallFirewallRuleConfig.

        Allowed topics describes the expected chat topics. It is used for the Off-topic rule. If not provided, the off-topic rule will not run. The maximum number of allowed topics is 3. Configuring more topics may increase the firewall latency.  # noqa: E501

        :param allowed_topics: The allowed_topics of this GenerativefirewallFirewallRuleConfig.  # noqa: E501
        :type: list[str]
        """

        self._allowed_topics = allowed_topics

    @property
    def language(self):
        """Gets the language of this GenerativefirewallFirewallRuleConfig.  # noqa: E501


        :return: The language of this GenerativefirewallFirewallRuleConfig.  # noqa: E501
        :rtype: RimeLanguage
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this GenerativefirewallFirewallRuleConfig.


        :param language: The language of this GenerativefirewallFirewallRuleConfig.  # noqa: E501
        :type: RimeLanguage
        """

        self._language = language

    @property
    def selected_rules(self):
        """Gets the selected_rules of this GenerativefirewallFirewallRuleConfig.  # noqa: E501

        If this list is empty, all available firewall rules will be run. Otherwise, only the rules specified here will be run.  # noqa: E501

        :return: The selected_rules of this GenerativefirewallFirewallRuleConfig.  # noqa: E501
        :rtype: list[GenerativefirewallFirewallRuleType]
        """
        return self._selected_rules

    @selected_rules.setter
    def selected_rules(self, selected_rules):
        """Sets the selected_rules of this GenerativefirewallFirewallRuleConfig.

        If this list is empty, all available firewall rules will be run. Otherwise, only the rules specified here will be run.  # noqa: E501

        :param selected_rules: The selected_rules of this GenerativefirewallFirewallRuleConfig.  # noqa: E501
        :type: list[GenerativefirewallFirewallRuleType]
        """

        self._selected_rules = selected_rules

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GenerativefirewallFirewallRuleConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GenerativefirewallFirewallRuleConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
