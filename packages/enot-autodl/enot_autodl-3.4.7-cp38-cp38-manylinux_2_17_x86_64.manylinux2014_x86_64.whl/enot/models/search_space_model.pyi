import torch
from _typeshed import Incomplete
from enot.core import SearchSpace
from enot.models.operations.search_variants_container import SearchVariantsContainer
from torch import nn
from typing import Any, List, Optional, Tuple, Union

class SearchSpaceModel(SearchSpace):
    original_model: Incomplete
    def __init__(self, original_model: nn.Module, **kwargs) -> None: ...
    @property
    def latency_type(self) -> Optional[str]: ...
    @property
    def constant_latency(self) -> float: ...
    @property
    def forward_latency(self) -> torch.Tensor: ...
    @property
    def output_distribution_optimization_enabled(self) -> bool: ...
    @property
    def search_variants_containers(self) -> List[SearchVariantsContainer]: ...
    def get_network_by_indexes(self, selected_op_index: Union[Tuple[int, ...], List[int]]) -> nn.Module: ...
    def get_network_with_best_arch(self) -> nn.Module: ...
    def initialize_output_distribution_optimization(self, *sample_input_args, **sample_input_kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...
