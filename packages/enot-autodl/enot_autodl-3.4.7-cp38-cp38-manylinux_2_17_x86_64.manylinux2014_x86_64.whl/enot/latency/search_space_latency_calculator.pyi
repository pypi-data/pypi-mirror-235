import abc
from abc import ABC, abstractmethod
from enot.latency.search_space_latency_container import SearchSpaceLatencyContainer
from enot.models import SearchSpaceModel
from typing import Any, Dict, Optional, Tuple

class SearchSpaceLatencyCalculator(ABC, metaclass=abc.ABCMeta):
    def __init__(self, search_space: SearchSpaceModel, **kwargs) -> None: ...
    @abstractmethod
    def compute(self, inputs: Tuple, keyword_inputs: Optional[Dict[str, Any]] = ...) -> SearchSpaceLatencyContainer: ...

class SearchSpaceCommonCalculator(SearchSpaceLatencyCalculator):
    def __init__(self, search_space: SearchSpaceModel, **kwargs) -> None: ...
    def compute(self, inputs: Tuple, keyword_inputs: Optional[Dict[str, Any]] = ...) -> SearchSpaceLatencyContainer: ...

class SearchSpaceMacThopCalculator(SearchSpaceCommonCalculator):
    def __init__(self, search_space: SearchSpaceModel, **kwargs) -> None: ...

class SearchSpaceMacPthflopsCalculator(SearchSpaceCommonCalculator):
    def __init__(self, search_space: SearchSpaceModel, **kwargs) -> None: ...

class SearchSpaceMacFvcoreCalculator(SearchSpaceCommonCalculator):
    def __init__(self, search_space: SearchSpaceModel, **kwargs) -> None: ...

class SearchSpacePytorchLatencyCalculator(SearchSpaceLatencyCalculator):
    def __init__(self, search_space: SearchSpaceModel, **kwargs) -> None: ...
    def compute(self, inputs: Tuple, keyword_inputs: Optional[Dict[str, Any]] = ...) -> SearchSpaceLatencyContainer: ...

class SearchSpacePytorchCpuLatencyCalculator(SearchSpacePytorchLatencyCalculator):
    def __init__(self, search_space: SearchSpaceModel, **kwargs) -> None: ...

class SearchSpacePytorchCudaLatencyCalculator(SearchSpacePytorchLatencyCalculator):
    def __init__(self, search_space: SearchSpaceModel, **kwargs) -> None: ...

def create_latency_calculator(latency_type: str, search_space: SearchSpaceModel, **kwargs) -> SearchSpaceLatencyCalculator: ...
def initialize_latency(latency_type: str, search_space: SearchSpaceModel, inputs: Tuple, keyword_inputs: Optional[Dict[str, Any]] = ..., **kwargs) -> SearchSpaceLatencyContainer: ...
def reset_latency(search_space: SearchSpaceModel) -> None: ...
def available_calculators() -> str: ...
