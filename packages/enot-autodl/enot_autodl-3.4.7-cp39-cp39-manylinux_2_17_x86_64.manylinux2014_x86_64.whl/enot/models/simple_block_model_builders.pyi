import torch.nn as nn
from typing import List

def make_divisible(v: int, divisor: int, min_value: int = ...) -> int: ...
def build_simple_block_model(in_channels: int, search_ops: List[str], blocks_out_channels: List[int], blocks_count: List[int], blocks_stride: List[int], width_multiplier: float = ..., min_channels: int = ..., stem: nn.Module = ..., head: nn.Module = ..., init_weights_kn: bool = ...) -> nn.Sequential: ...
def build_frozen_simple_block_model(in_channels: int, blocks_op_name: List[str], blocks_out_channels: List[int], blocks_count: List[int], blocks_stride: List[int], width_multiplier: float = ..., min_channels: int = ..., stem: nn.Module = ..., head: nn.Module = ..., init_weights_kn: bool = ...) -> nn.Sequential: ...
