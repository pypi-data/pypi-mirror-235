from enot.models import SearchSpaceModel
from pathlib import Path
from typing import List, Union

class SearchSpaceLatencyContainer:
    def __init__(self, latency_type: str, constant_latency: float, operations_latencies: List[List[float]]) -> None: ...
    @property
    def latency_type(self) -> str: ...
    @property
    def constant_latency(self) -> float: ...
    @property
    def operations_latencies(self) -> List[List[float]]: ...
    @classmethod
    def load_from_file(cls, filename: Union[str, Path]) -> SearchSpaceLatencyContainer: ...
    @classmethod
    def load_from_bytes(cls, data: bytes) -> SearchSpaceLatencyContainer: ...
    def save_to_file(self, filename: Union[str, Path]) -> None: ...
    def save_to_bytes(self) -> bytes: ...

def apply_latency_container(search_space: SearchSpaceModel, latency_container: SearchSpaceLatencyContainer) -> None: ...
def extract_latency_container(search_space: SearchSpaceModel) -> SearchSpaceLatencyContainer: ...
