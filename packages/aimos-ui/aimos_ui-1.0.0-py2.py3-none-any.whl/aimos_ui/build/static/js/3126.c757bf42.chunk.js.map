{"version":3,"file":"static/js/3126.c757bf42.chunk.js","mappings":"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","sources":["../node_modules/@nivo/legends/src/svg/symbols/SymbolTriangle.tsx","../node_modules/@nivo/legends/src/defaults.ts","../node_modules/@nivo/legends/src/compute.ts","../node_modules/@nivo/legends/src/svg/LegendSvgItem.tsx","../node_modules/@nivo/legends/src/svg/symbols/SymbolCircle.tsx","../node_modules/@nivo/legends/src/svg/symbols/SymbolDiamond.tsx","../node_modules/@nivo/legends/src/svg/symbols/SymbolSquare.tsx","../node_modules/@nivo/legends/src/svg/LegendSvg.tsx","../node_modules/@nivo/legends/src/svg/BoxLegendSvg.tsx","../node_modules/@nivo/legends/src/canvas.ts","../node_modules/@nivo/legends/src/props.ts"],"sourcesContent":["import { SymbolProps } from './types'\n\nexport const SymbolTriangle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                M${size / 2} 0\n                L${size} ${size}\n                L0 ${size}\n                L${size / 2} 0\n            `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n","import { ContinuousColorsLegendProps } from './types'\n\nexport const continuousColorsLegendDefaults: {\n    length: NonNullable<ContinuousColorsLegendProps['length']>\n    thickness: NonNullable<ContinuousColorsLegendProps['thickness']>\n    direction: NonNullable<ContinuousColorsLegendProps['direction']>\n    tickPosition: NonNullable<ContinuousColorsLegendProps['tickPosition']>\n    tickSize: NonNullable<ContinuousColorsLegendProps['tickSize']>\n    tickSpacing: NonNullable<ContinuousColorsLegendProps['tickSpacing']>\n    tickOverlap: NonNullable<ContinuousColorsLegendProps['tickOverlap']>\n    tickFormat: NonNullable<ContinuousColorsLegendProps['tickFormat']>\n    titleAlign: NonNullable<ContinuousColorsLegendProps['titleAlign']>\n    titleOffset: NonNullable<ContinuousColorsLegendProps['titleOffset']>\n} = {\n    length: 200,\n    thickness: 16,\n    direction: 'row',\n    tickPosition: 'after',\n    tickSize: 4,\n    tickSpacing: 3,\n    tickOverlap: false,\n    tickFormat: (value: number) => `${value}`,\n    titleAlign: 'start',\n    titleOffset: 4,\n}\n","import { scaleLinear } from 'd3-scale'\nimport { getValueFormatter } from '@nivo/core'\nimport { computeContinuousColorScaleColorStops } from '@nivo/colors'\nimport {\n    BoxLegendSvgProps,\n    ContinuousColorsLegendProps,\n    LegendAnchor,\n    LegendItemDirection,\n} from './types'\nimport { continuousColorsLegendDefaults } from './defaults'\n\nconst isObject = <T>(item: unknown): item is T =>\n    typeof item === 'object' && !Array.isArray(item) && item !== null\n\nconst zeroPadding = {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n}\n\nexport const computeDimensions = ({\n    direction,\n    itemsSpacing,\n    padding: _padding,\n    itemCount,\n    itemWidth,\n    itemHeight,\n}: Pick<BoxLegendSvgProps, 'direction' | 'padding'> &\n    Record<'itemsSpacing' | 'itemCount' | 'itemWidth' | 'itemHeight', number>) => {\n    if (typeof _padding !== 'number' && !isObject(_padding)) {\n        throw new Error('Invalid property padding, must be one of: number, object')\n    }\n\n    const padding =\n        typeof _padding === 'number'\n            ? {\n                  top: _padding,\n                  right: _padding,\n                  bottom: _padding,\n                  left: _padding,\n              }\n            : {\n                  ...zeroPadding,\n                  ..._padding,\n              }\n\n    const horizontalPadding = padding.left + padding.right\n    const verticalPadding = padding.top + padding.bottom\n    let width = itemWidth + horizontalPadding\n    let height = itemHeight + verticalPadding\n    const spacing = (itemCount - 1) * itemsSpacing\n    if (direction === 'row') {\n        width = itemWidth * itemCount + spacing + horizontalPadding\n    } else if (direction === 'column') {\n        height = itemHeight * itemCount + spacing + verticalPadding\n    }\n\n    return { width, height, padding }\n}\n\nexport const computePositionFromAnchor = ({\n    anchor,\n    translateX,\n    translateY,\n    containerWidth,\n    containerHeight,\n    width,\n    height,\n}: { anchor: LegendAnchor } & Record<\n    'translateX' | 'translateY' | 'containerWidth' | 'containerHeight' | 'width' | 'height',\n    number\n>) => {\n    let x = translateX\n    let y = translateY\n\n    switch (anchor) {\n        case 'top':\n            x += (containerWidth - width) / 2\n            break\n\n        case 'top-right':\n            x += containerWidth - width\n            break\n\n        case 'right':\n            x += containerWidth - width\n            y += (containerHeight - height) / 2\n            break\n\n        case 'bottom-right':\n            x += containerWidth - width\n            y += containerHeight - height\n            break\n\n        case 'bottom':\n            x += (containerWidth - width) / 2\n            y += containerHeight - height\n            break\n\n        case 'bottom-left':\n            y += containerHeight - height\n            break\n\n        case 'left':\n            y += (containerHeight - height) / 2\n            break\n\n        case 'center':\n            x += (containerWidth - width) / 2\n            y += (containerHeight - height) / 2\n            break\n    }\n\n    return { x, y }\n}\n\nexport const computeItemLayout = ({\n    direction,\n    justify,\n    symbolSize,\n    symbolSpacing,\n    width,\n    height,\n}: {\n    direction: LegendItemDirection\n    justify: boolean\n} & Record<'symbolSize' | 'symbolSpacing' | 'width' | 'height', number>) => {\n    let symbolX\n    let symbolY\n\n    let labelX\n    let labelY\n    let labelAnchor: 'start' | 'middle' | 'end'\n    let labelAlignment: 'alphabetic' | 'central' | 'text-before-edge'\n\n    switch (direction) {\n        case 'left-to-right':\n            symbolX = 0\n            symbolY = (height - symbolSize) / 2\n\n            labelY = height / 2\n            labelAlignment = 'central'\n            if (justify) {\n                labelX = width\n                labelAnchor = 'end'\n            } else {\n                labelX = symbolSize + symbolSpacing\n                labelAnchor = 'start'\n            }\n            break\n\n        case 'right-to-left':\n            symbolX = width - symbolSize\n            symbolY = (height - symbolSize) / 2\n\n            labelY = height / 2\n            labelAlignment = 'central'\n            if (justify) {\n                labelX = 0\n                labelAnchor = 'start'\n            } else {\n                labelX = width - symbolSize - symbolSpacing\n                labelAnchor = 'end'\n            }\n            break\n\n        case 'top-to-bottom':\n            symbolX = (width - symbolSize) / 2\n            symbolY = 0\n\n            labelX = width / 2\n\n            labelAnchor = 'middle'\n            if (justify) {\n                labelY = height\n                labelAlignment = 'alphabetic'\n            } else {\n                labelY = symbolSize + symbolSpacing\n                labelAlignment = 'text-before-edge'\n            }\n            break\n\n        case 'bottom-to-top':\n            symbolX = (width - symbolSize) / 2\n            symbolY = height - symbolSize\n\n            labelX = width / 2\n            labelAnchor = 'middle'\n            if (justify) {\n                labelY = 0\n                labelAlignment = 'text-before-edge'\n            } else {\n                labelY = height - symbolSize - symbolSpacing\n                labelAlignment = 'alphabetic'\n            }\n            break\n    }\n\n    return {\n        symbolX,\n        symbolY,\n        labelX,\n        labelY,\n        labelAnchor,\n        labelAlignment,\n    }\n}\n\nexport const computeContinuousColorsLegend = ({\n    scale,\n    ticks,\n    length = continuousColorsLegendDefaults.length,\n    thickness = continuousColorsLegendDefaults.thickness,\n    direction = continuousColorsLegendDefaults.direction,\n    tickPosition = continuousColorsLegendDefaults.tickPosition,\n    tickSize = continuousColorsLegendDefaults.tickSize,\n    tickSpacing = continuousColorsLegendDefaults.tickSpacing,\n    tickOverlap = continuousColorsLegendDefaults.tickOverlap,\n    tickFormat = continuousColorsLegendDefaults.tickFormat,\n    title,\n    titleAlign = continuousColorsLegendDefaults.titleAlign,\n    titleOffset = continuousColorsLegendDefaults.titleOffset,\n}: ContinuousColorsLegendProps) => {\n    // left to right for `row`, bottom to top for `column`\n    const domain = direction === 'column' ? [...scale.domain()].reverse() : scale.domain()\n\n    const positionScale = scaleLinear().domain(domain)\n    if (domain.length === 2) {\n        // sequential, quantize\n        positionScale.range([0, length])\n    } else if (domain.length === 3) {\n        // diverging\n        positionScale.range([0, length / 2, length])\n    }\n\n    let values: number[]\n    if ('thresholds' in scale) {\n        // quantize\n        values = [domain[0], ...scale.thresholds(), domain[1]]\n    } else {\n        // sequential, diverging\n        values = Array.isArray(ticks) ? ticks : (scale as any).ticks(ticks)\n    }\n\n    const colorStops = computeContinuousColorScaleColorStops(scale, 32)\n\n    const formatValue = getValueFormatter(tickFormat)\n\n    const computedTicks: {\n        x1: number\n        y1: number\n        x2: number\n        y2: number\n        text: string\n        textX: number\n        textY: number\n        textHorizontalAlign: 'start' | 'middle' | 'end'\n        textVerticalAlign: 'alphabetic' | 'central' | 'hanging'\n    }[] = []\n\n    let width: number\n    let height: number\n\n    const gradientX1 = 0\n    let gradientY1 = 0\n    let gradientX2 = 0\n    const gradientY2 = 0\n\n    let titleX: number\n    let titleY: number\n    let titleRotation: number\n    let titleVerticalAlign: 'alphabetic' | 'hanging'\n\n    if (direction === 'row') {\n        width = length\n        height = thickness\n\n        gradientX2 = 1\n\n        let y1: number\n        let y2: number\n\n        let textY: number\n        const textHorizontalAlign = 'middle'\n        let textVerticalAlign: 'alphabetic' | 'hanging'\n\n        titleRotation = 0\n        if (titleAlign === 'start') {\n            titleX = 0\n        } else if (titleAlign === 'middle') {\n            titleX = length / 2\n        } else {\n            titleX = length\n        }\n\n        if (tickPosition === 'before') {\n            y1 = -tickSize\n            y2 = tickOverlap ? thickness : 0\n\n            textY = -tickSize - tickSpacing\n            textVerticalAlign = 'alphabetic'\n\n            titleY = thickness + titleOffset\n            titleVerticalAlign = 'hanging'\n        } else {\n            y1 = tickOverlap ? 0 : thickness\n            y2 = thickness + tickSize\n\n            textY = y2 + tickSpacing\n            textVerticalAlign = 'hanging'\n\n            titleY = -titleOffset\n            titleVerticalAlign = 'alphabetic'\n        }\n\n        values.forEach(value => {\n            const x = positionScale(value)\n\n            computedTicks.push({\n                x1: x,\n                y1,\n                x2: x,\n                y2,\n                text: formatValue(value),\n                textX: x,\n                textY,\n                textHorizontalAlign,\n                textVerticalAlign,\n            })\n        })\n    } else {\n        width = thickness\n        height = length\n\n        gradientY1 = 1\n\n        let x1: number\n        let x2: number\n\n        let textX: number\n        let textHorizontalAlign: 'start' | 'end'\n        const textVerticalAlign = 'central'\n\n        titleRotation = -90\n        if (titleAlign === 'start') {\n            titleY = length\n        } else if (titleAlign === 'middle') {\n            titleY = length / 2\n        } else {\n            titleY = 0\n        }\n\n        if (tickPosition === 'before') {\n            x1 = -tickSize\n            x2 = tickOverlap ? thickness : 0\n\n            textX = x1 - tickSpacing\n            textHorizontalAlign = 'end'\n\n            titleX = thickness + titleOffset\n            titleVerticalAlign = 'hanging'\n        } else {\n            x1 = tickOverlap ? 0 : thickness\n            x2 = thickness + tickSize\n\n            textX = x2 + tickSpacing\n            textHorizontalAlign = 'start'\n\n            titleX = -titleOffset\n            titleVerticalAlign = 'alphabetic'\n        }\n\n        values.forEach(value => {\n            const y = positionScale(value)\n\n            computedTicks.push({\n                x1,\n                y1: y,\n                x2,\n                y2: y,\n                text: formatValue(value),\n                textX,\n                textY: y,\n                textHorizontalAlign,\n                textVerticalAlign,\n            })\n        })\n    }\n\n    return {\n        width,\n        height,\n        gradientX1,\n        gradientY1,\n        gradientX2,\n        gradientY2,\n        colorStops,\n        ticks: computedTicks,\n        titleText: title,\n        titleX,\n        titleY,\n        titleRotation,\n        titleHorizontalAlign: titleAlign,\n        titleVerticalAlign,\n    }\n}\n","import { useState, useCallback } from 'react'\nimport * as React from 'react'\nimport { useTheme } from '@nivo/core'\nimport { LegendSvgItemProps } from '../types'\nimport { computeItemLayout } from '../compute'\nimport { SymbolCircle, SymbolDiamond, SymbolSquare, SymbolTriangle } from './symbols'\n\ntype Style = Partial<{\n    itemBackground: string\n    itemOpacity: number\n    itemTextColor: string\n    symbolBorderColor: string\n    symbolBorderWidth: number\n    symbolSize: number\n}>\n\nconst symbolByShape = {\n    circle: SymbolCircle,\n    diamond: SymbolDiamond,\n    square: SymbolSquare,\n    triangle: SymbolTriangle,\n}\n\nexport const LegendSvgItem = ({\n    x,\n    y,\n    width,\n    height,\n    data,\n    direction = 'left-to-right',\n    justify = false,\n    textColor,\n    background = 'transparent',\n    opacity = 1,\n\n    symbolShape = 'square',\n    symbolSize = 16,\n    symbolSpacing = 8,\n    symbolBorderWidth = 0,\n    symbolBorderColor = 'transparent',\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: LegendSvgItemProps) => {\n    const [style, setStyle] = useState<Style>({})\n    const theme = useTheme()\n\n    const handleMouseEnter = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on === 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseEnter?.(data, event)\n        },\n        [onMouseEnter, data, effects]\n    )\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on !== 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseLeave?.(data, event)\n        },\n        [onMouseLeave, data, effects]\n    )\n\n    const { symbolX, symbolY, labelX, labelY, labelAnchor, labelAlignment } = computeItemLayout({\n        direction,\n        justify,\n        symbolSize: style.symbolSize ?? symbolSize,\n        symbolSpacing,\n        width,\n        height,\n    })\n\n    const isInteractive = [onClick, onMouseEnter, onMouseLeave, toggleSerie].some(\n        handler => handler !== undefined\n    )\n\n    const SymbolShape = typeof symbolShape === 'function' ? symbolShape : symbolByShape[symbolShape]\n\n    return (\n        <g\n            transform={`translate(${x},${y})`}\n            style={{\n                opacity: style.itemOpacity ?? opacity,\n            }}\n        >\n            <rect\n                width={width}\n                height={height}\n                fill={style.itemBackground ?? background}\n                style={{\n                    cursor: isInteractive ? 'pointer' : 'auto',\n                }}\n                onClick={event => {\n                    onClick?.(data, event)\n                    toggleSerie?.(data.id)\n                }}\n                onMouseEnter={handleMouseEnter}\n                onMouseLeave={handleMouseLeave}\n            />\n            {React.createElement(SymbolShape, {\n                id: data.id,\n                x: symbolX,\n                y: symbolY,\n                size: style.symbolSize ?? symbolSize,\n                fill: data.fill ?? data.color ?? 'black',\n                borderWidth: style.symbolBorderWidth ?? symbolBorderWidth,\n                borderColor: style.symbolBorderColor ?? symbolBorderColor,\n                ...(data.hidden ? theme.legends.hidden.symbol : undefined),\n            })}\n            <text\n                textAnchor={labelAnchor}\n                style={{\n                    ...theme.legends.text,\n                    fill: style.itemTextColor ?? textColor ?? theme.legends.text.fill ?? 'black',\n                    dominantBaseline: labelAlignment,\n                    pointerEvents: 'none',\n                    userSelect: 'none',\n                    ...(data.hidden ? theme.legends.hidden.text : undefined),\n                }}\n                x={labelX}\n                y={labelY}\n            >\n                {data.label}\n            </text>\n        </g>\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolCircle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <circle\n            r={size / 2}\n            cx={x + size / 2}\n            cy={y + size / 2}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolDiamond = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                    M${size / 2} 0\n                    L${size * 0.8} ${size / 2}\n                    L${size / 2} ${size}\n                    L${size * 0.2} ${size / 2}\n                    L${size / 2} 0\n                `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolSquare = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <rect\n            x={x}\n            y={y}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            width={size}\n            height={size}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n","import { LegendSvgItem } from './LegendSvgItem'\nimport { LegendSvgProps } from '../types'\nimport { computeDimensions } from '../compute'\n\nexport const LegendSvg = ({\n    data,\n\n    x,\n    y,\n    direction,\n    padding: _padding = 0,\n    justify,\n    effects,\n\n    itemWidth,\n    itemHeight,\n    itemDirection = 'left-to-right',\n    itemsSpacing = 0,\n    itemTextColor,\n    itemBackground = 'transparent',\n    itemOpacity = 1,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n}: LegendSvgProps) => {\n    const { padding } = computeDimensions({\n        itemCount: data.length,\n        itemWidth,\n        itemHeight,\n        itemsSpacing,\n        direction,\n        padding: _padding,\n    })\n\n    const xStep = direction === 'row' ? itemWidth + itemsSpacing : 0\n    const yStep = direction === 'column' ? itemHeight + itemsSpacing : 0\n\n    return (\n        <g transform={`translate(${x},${y})`}>\n            {data.map((data, i) => (\n                <LegendSvgItem\n                    key={i}\n                    data={data}\n                    x={i * xStep + padding.left}\n                    y={i * yStep + padding.top}\n                    width={itemWidth}\n                    height={itemHeight}\n                    direction={itemDirection}\n                    justify={justify}\n                    effects={effects}\n                    textColor={itemTextColor}\n                    background={itemBackground}\n                    opacity={itemOpacity}\n                    symbolShape={symbolShape}\n                    symbolSize={symbolSize}\n                    symbolSpacing={symbolSpacing}\n                    symbolBorderWidth={symbolBorderWidth}\n                    symbolBorderColor={symbolBorderColor}\n                    onClick={onClick}\n                    onMouseEnter={onMouseEnter}\n                    onMouseLeave={onMouseLeave}\n                    toggleSerie={toggleSerie}\n                />\n            ))}\n        </g>\n    )\n}\n","import { LegendSvg } from './LegendSvg'\nimport { BoxLegendSvgProps } from '../types'\nimport { computeDimensions, computePositionFromAnchor } from '../compute'\n\nexport const BoxLegendSvg = ({\n    data,\n\n    containerWidth,\n    containerHeight,\n    translateX = 0,\n    translateY = 0,\n    anchor,\n    direction,\n    padding = 0,\n    justify,\n\n    itemsSpacing = 0,\n    itemWidth,\n    itemHeight,\n    itemDirection,\n    itemTextColor,\n    itemBackground,\n    itemOpacity,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: BoxLegendSvgProps) => {\n    const { width, height } = computeDimensions({\n        itemCount: data.length,\n        itemsSpacing,\n        itemWidth,\n        itemHeight,\n        direction,\n        padding,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    return (\n        <LegendSvg\n            data={data}\n            x={x}\n            y={y}\n            direction={direction}\n            padding={padding}\n            justify={justify}\n            effects={effects}\n            itemsSpacing={itemsSpacing}\n            itemWidth={itemWidth}\n            itemHeight={itemHeight}\n            itemDirection={itemDirection}\n            itemTextColor={itemTextColor}\n            itemBackground={itemBackground}\n            itemOpacity={itemOpacity}\n            symbolShape={symbolShape}\n            symbolSize={symbolSize}\n            symbolSpacing={symbolSpacing}\n            symbolBorderWidth={symbolBorderWidth}\n            symbolBorderColor={symbolBorderColor}\n            onClick={onClick}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            toggleSerie={typeof toggleSerie === 'boolean' ? undefined : toggleSerie}\n        />\n    )\n}\n","import { CompleteTheme, degreesToRadians } from '@nivo/core'\nimport {\n    computeDimensions,\n    computePositionFromAnchor,\n    computeItemLayout,\n    computeContinuousColorsLegend,\n} from './compute'\nimport { AnchoredContinuousColorsLegendProps, LegendCanvasProps } from './types'\nimport { continuousColorsLegendDefaults } from './defaults'\n\nconst textAlignMapping = {\n    start: 'left',\n    middle: 'center',\n    end: 'right',\n} as const\n\nexport const renderLegendToCanvas = (\n    ctx: CanvasRenderingContext2D,\n    {\n        data,\n\n        containerWidth,\n        containerHeight,\n        translateX = 0,\n        translateY = 0,\n        anchor,\n        direction,\n        padding: _padding = 0,\n        justify = false,\n\n        // items\n        itemsSpacing = 0,\n        itemWidth,\n        itemHeight,\n        itemDirection = 'left-to-right',\n        itemTextColor,\n\n        // symbol\n        symbolSize = 16,\n        symbolSpacing = 8,\n        // @todo add support for shapes\n        // symbolShape = LegendSvgItem.defaultProps.symbolShape,\n\n        theme,\n    }: LegendCanvasProps\n) => {\n    const { width, height, padding } = computeDimensions({\n        itemCount: data.length,\n        itemWidth,\n        itemHeight,\n        itemsSpacing,\n        direction,\n        padding: _padding,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    const xStep = direction === 'row' ? itemWidth + itemsSpacing : 0\n    const yStep = direction === 'column' ? itemHeight + itemsSpacing : 0\n\n    ctx.save()\n    ctx.translate(x, y)\n\n    ctx.font = `${theme.legends.text.fontSize}px ${theme.legends.text.fontFamily || 'sans-serif'}`\n\n    data.forEach((d, i) => {\n        const itemX = i * xStep + padding.left\n        const itemY = i * yStep + padding.top\n\n        const { symbolX, symbolY, labelX, labelY, labelAnchor, labelAlignment } = computeItemLayout(\n            {\n                direction: itemDirection,\n                justify,\n                symbolSize,\n                symbolSpacing,\n                width: itemWidth,\n                height: itemHeight,\n            }\n        )\n\n        ctx.fillStyle = d.color ?? 'black'\n        ctx.fillRect(itemX + symbolX, itemY + symbolY, symbolSize, symbolSize)\n\n        ctx.textAlign = textAlignMapping[labelAnchor]\n\n        if (labelAlignment === 'central') {\n            ctx.textBaseline = 'middle'\n        }\n\n        ctx.fillStyle = itemTextColor ?? theme.legends.text.fill ?? 'black'\n        ctx.fillText(String(d.label), itemX + labelX, itemY + labelY)\n    })\n\n    ctx.restore()\n}\n\nexport const renderContinuousColorLegendToCanvas = (\n    ctx: CanvasRenderingContext2D,\n    {\n        containerWidth,\n        containerHeight,\n        anchor,\n        translateX = 0,\n        translateY = 0,\n        scale,\n        length = continuousColorsLegendDefaults.length,\n        thickness = continuousColorsLegendDefaults.thickness,\n        direction = continuousColorsLegendDefaults.direction,\n        ticks: _ticks,\n        tickPosition = continuousColorsLegendDefaults.tickPosition,\n        tickSize = continuousColorsLegendDefaults.tickSize,\n        tickSpacing = continuousColorsLegendDefaults.tickSpacing,\n        tickOverlap = continuousColorsLegendDefaults.tickOverlap,\n        tickFormat = continuousColorsLegendDefaults.tickFormat,\n        title,\n        titleAlign = continuousColorsLegendDefaults.titleAlign,\n        titleOffset = continuousColorsLegendDefaults.titleOffset,\n        theme,\n    }: AnchoredContinuousColorsLegendProps & {\n        theme: CompleteTheme\n    }\n) => {\n    const {\n        width,\n        height,\n        gradientX1,\n        gradientY1,\n        gradientX2,\n        gradientY2,\n        colorStops,\n        ticks,\n        titleText,\n        titleX,\n        titleY,\n        titleRotation,\n        titleVerticalAlign,\n        titleHorizontalAlign,\n    } = computeContinuousColorsLegend({\n        scale,\n        ticks: _ticks,\n        length,\n        thickness,\n        direction,\n        tickPosition,\n        tickSize,\n        tickSpacing,\n        tickOverlap,\n        tickFormat,\n        title,\n        titleAlign,\n        titleOffset,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    const initialStyles = {\n        font: ctx.font,\n        textAlign: ctx.textAlign,\n        textBaseline: ctx.textBaseline,\n    }\n    ctx.save()\n\n    ctx.translate(x, y)\n\n    const gradient = ctx.createLinearGradient(\n        gradientX1 * width,\n        gradientY1 * height,\n        gradientX2 * width,\n        gradientY2 * height\n    )\n    colorStops.forEach(colorStop => {\n        gradient.addColorStop(colorStop.offset, colorStop.stopColor)\n    })\n\n    ctx.fillStyle = gradient\n    ctx.fillRect(0, 0, width, height)\n\n    ctx.font = `${\n        theme.legends.ticks.text.fontWeight ? `${theme.legends.ticks.text.fontWeight} ` : ''\n    }${theme.legends.ticks.text.fontSize}px ${theme.legends.ticks.text.fontFamily}`\n\n    ticks.forEach(tick => {\n        if ((theme.legends.ticks.line.strokeWidth ?? 0) > 0) {\n            ctx.lineWidth = Number(theme.axis.ticks.line.strokeWidth)\n            if (theme.axis.ticks.line.stroke) {\n                ctx.strokeStyle = theme.axis.ticks.line.stroke\n            }\n            ctx.lineCap = 'square'\n\n            ctx.beginPath()\n            ctx.moveTo(tick.x1, tick.y1)\n            ctx.lineTo(tick.x2, tick.y2)\n            ctx.stroke()\n        }\n\n        if (theme.legends.ticks.text.fill) {\n            ctx.fillStyle = theme.legends.ticks.text.fill\n        }\n        ctx.textAlign = tick.textHorizontalAlign === 'middle' ? 'center' : tick.textHorizontalAlign\n        ctx.textBaseline = tick.textVerticalAlign === 'central' ? 'middle' : tick.textVerticalAlign\n\n        ctx.fillText(tick.text, tick.textX, tick.textY)\n    })\n\n    if (titleText) {\n        ctx.save()\n        ctx.translate(titleX, titleY)\n        ctx.rotate(degreesToRadians(titleRotation))\n\n        ctx.font = `${\n            theme.legends.title.text.fontWeight ? `${theme.legends.title.text.fontWeight} ` : ''\n        }${theme.legends.title.text.fontSize}px ${theme.legends.title.text.fontFamily}`\n        if (theme.legends.title.text.fill) {\n            ctx.fillStyle = theme.legends.title.text.fill\n        }\n        ctx.textAlign = titleHorizontalAlign === 'middle' ? 'center' : titleHorizontalAlign\n        ctx.textBaseline = titleVerticalAlign\n\n        ctx.fillText(titleText, 0, 0)\n\n        ctx.restore()\n    }\n\n    ctx.restore()\n\n    ctx.font = initialStyles.font\n    ctx.textAlign = initialStyles.textAlign\n    ctx.textBaseline = initialStyles.textBaseline\n}\n","import PropTypes from 'prop-types'\n\n/**\n * The prop type is exported as a simple object instead of `PropTypes.shape`\n * to be able to add extra properties.\n *\n * @example\n * ```javascript\n * import { LegendPropShape } from '@nivo/legends'\n *\n * const customLegendPropType = PropTypes.shape({\n *     ...LegendPropShape,\n *     extra: PropTypes.any.isRequired,\n * })\n * ```\n */\nexport const LegendPropShape = {\n    data: PropTypes.arrayOf(PropTypes.object),\n\n    // position & layout\n    anchor: PropTypes.oneOf([\n        'top',\n        'top-right',\n        'right',\n        'bottom-right',\n        'bottom',\n        'bottom-left',\n        'left',\n        'top-left',\n        'center',\n    ]).isRequired,\n    translateX: PropTypes.number,\n    translateY: PropTypes.number,\n    direction: PropTypes.oneOf(['row', 'column']).isRequired,\n\n    // item\n    itemsSpacing: PropTypes.number,\n    itemWidth: PropTypes.number.isRequired,\n    itemHeight: PropTypes.number.isRequired,\n    itemDirection: PropTypes.oneOf([\n        'left-to-right',\n        'right-to-left',\n        'top-to-bottom',\n        'bottom-to-top',\n    ]),\n    itemTextColor: PropTypes.string,\n    itemBackground: PropTypes.string,\n    itemOpacity: PropTypes.number,\n\n    symbolShape: PropTypes.oneOfType([\n        PropTypes.oneOf(['circle', 'diamond', 'square', 'triangle']),\n        PropTypes.func,\n    ]),\n    symbolSize: PropTypes.number,\n    symbolSpacing: PropTypes.number,\n    symbolBorderWidth: PropTypes.number,\n    symbolBorderColor: PropTypes.string,\n\n    onClick: PropTypes.func,\n    onMouseEnter: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n\n    effects: PropTypes.arrayOf(\n        PropTypes.shape({\n            on: PropTypes.oneOfType([PropTypes.oneOf(['hover'])]).isRequired,\n            style: PropTypes.shape({\n                itemTextColor: PropTypes.string,\n                itemBackground: PropTypes.string,\n                itemOpacity: PropTypes.number,\n                symbolSize: PropTypes.number,\n                symbolBorderWidth: PropTypes.number,\n                symbolBorderColor: PropTypes.string,\n            }).isRequired,\n        })\n    ),\n}\n"],"names":["p","Object","assign","bind","t","e","arguments","length","i","n","prototype","hasOwnProperty","call","apply","b","top","right","bottom","left","k","direction","itemsSpacing","o","padding","r","itemCount","l","itemWidth","a","itemHeight","Array","isArray","Error","c","s","d","h","g","m","width","height","x","anchor","translateX","translateY","containerWidth","containerHeight","y","S","justify","symbolSize","symbolSpacing","symbolX","symbolY","labelX","labelY","labelAnchor","labelAlignment","C","circle","size","fill","opacity","borderWidth","borderColor","cx","cy","strokeWidth","stroke","style","pointerEvents","diamond","transform","children","square","triangle","B","f","u","v","A","W","data","O","z","w","X","textColor","Y","background","H","E","j","T","symbolShape","L","M","F","P","R","q","symbolBorderWidth","V","D","symbolBorderColor","G","I","onClick","N","onMouseEnter","_","onMouseLeave","J","toggleSerie","K","effects","Q","U","Z","$","tt","filter","on","reduce","et","it","nt","ot","rt","lt","at","ct","st","some","dt","itemOpacity","itemBackground","cursor","id","color","hidden","legends","symbol","textAnchor","text","itemTextColor","dominantBaseline","userSelect","label","itemDirection","map","start","middle","end","theme","save","translate","font","fontSize","fontFamily","forEach","fillStyle","fillRect","textAlign","textBaseline","fillText","String","restore","isRequired"],"sourceRoot":""}