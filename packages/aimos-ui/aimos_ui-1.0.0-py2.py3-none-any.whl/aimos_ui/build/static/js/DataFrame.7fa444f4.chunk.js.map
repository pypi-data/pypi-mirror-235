{"version":3,"file":"static/js/DataFrame.7fa444f4.chunk.js","mappings":"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","sources":["pages/Board/components/DataTable.tsx","pages/Board/components/VisualizationElements/DataFrameVizElement.tsx"],"sourcesContent":["// @ts-nocheck\n/*eslint-disable */\n\nimport React, {\n  useRef,\n  useState,\n  useCallback,\n  useEffect,\n  useMemo,\n} from 'react';\nimport Grid, {\n  IChildrenProps,\n  Cell as DefaultCell,\n  useSelection,\n  useEditable,\n  useSizer as useAutoSizer,\n  useTooltip,\n  Direction,\n  SelectionProps,\n  Selection,\n} from '@rowsncolumns/grid';\nimport { Rect, Text, Group, RegularPolygon } from 'react-konva';\nimport { useMeasure } from 'react-use';\n\nexport default ({ data }): any => {\n  const dragHandleWidth = 2;\n  const DraggableRect = (props) => {\n    return (\n      <Rect\n        fill='#1473e6'\n        draggable\n        hitStrokeWidth={20}\n        onMouseEnter={() => (document.body.style.cursor = 'ew-resize')}\n        onMouseLeave={() => (document.body.style.cursor = 'default')}\n        dragBoundFunc={(pos) => {\n          return {\n            ...pos,\n            y: 0,\n          };\n        }}\n        {...props}\n      />\n    );\n  };\n  const HeaderComponent = ({\n    rowIndex,\n    columnIndex,\n    x,\n    y,\n    width,\n    height,\n    onResize,\n  }) => {\n    const text = Object.keys(data[0])[columnIndex];\n    const fill = '#eee';\n    return (\n      <Group>\n        <Rect\n          x={x}\n          y={y}\n          height={height}\n          width={width}\n          fill={fill}\n          stroke='grey'\n          strokeWidth={0.5}\n        />\n        <Text\n          x={x}\n          y={y}\n          height={height}\n          width={width}\n          text={text}\n          fontStyle='bold'\n          verticalAlign='middle'\n          align='center'\n        />\n        <DraggableRect\n          x={x + width - dragHandleWidth}\n          y={y}\n          width={dragHandleWidth}\n          height={height}\n          onDragMove={(e) => {\n            const node = e.target;\n            const newWidth = node.x() - x + dragHandleWidth;\n\n            onResize(columnIndex, newWidth);\n          }}\n        />\n      </Group>\n    );\n  };\n  const Cell = ({\n    rowIndex,\n    columnIndex,\n    x,\n    y,\n    width,\n    height,\n    key,\n  }: IChildrenProps) => {\n    const text = data[rowIndex][Object.keys(data[0])[columnIndex]];\n    const fill = 'white';\n    return (\n      <React.Fragment key={key}>\n        <Rect\n          x={x}\n          y={y}\n          height={height}\n          width={width}\n          fill={fill}\n          stroke='grey'\n          strokeWidth={0.5}\n        />\n        <Text\n          x={x}\n          y={y}\n          height={height}\n          width={width}\n          text={text}\n          fontStyle='normal'\n          verticalAlign='middle'\n          align='center'\n        />\n      </React.Fragment>\n    );\n  };\n  const columnCount = Object.keys(data[0] ?? {}).length;\n  const rowCount = data.length;\n\n  const gridRef = useRef();\n  const mainGridRef = useRef();\n  const [containerRef, { width, height }] = useMeasure();\n  const [columnWidthMap, setColumnWidthMap] = useState({});\n  const handleResize = (columnIndex, newWidth) => {\n    setColumnWidthMap((prev) => {\n      return {\n        ...prev,\n        [columnIndex]: newWidth,\n      };\n    });\n    gridRef.current.resizeColumns([columnIndex]);\n    mainGridRef.current.resizeColumns([columnIndex]);\n  };\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        width: '100%',\n        height: '100%',\n      }}\n      ref={containerRef}\n    >\n      <Grid\n        columnCount={columnCount}\n        height={20}\n        rowCount={1}\n        ref={gridRef}\n        width={width}\n        columnWidth={(index) => {\n          if (index in columnWidthMap) return columnWidthMap[index];\n          return 200;\n        }}\n        rowHeight={(index) => 20}\n        showScrollbar={false}\n        itemRenderer={(props) => (\n          <HeaderComponent onResize={handleResize} {...props} />\n        )}\n      />\n      <Grid\n        columnCount={columnCount}\n        rowCount={rowCount}\n        height={height - 20}\n        width={width}\n        ref={mainGridRef}\n        columnWidth={(index) => {\n          if (index in columnWidthMap) return columnWidthMap[index];\n          return 200;\n        }}\n        rowHeight={(index) => 20}\n        onScroll={({ scrollLeft }) => {\n          gridRef.current.scrollTo({ scrollLeft });\n        }}\n        itemRenderer={Cell}\n      />\n    </div>\n  );\n};\n\n/*eslint-disable */\n","import * as React from 'react';\n\nimport DataTable from '../DataTable';\n\nfunction DataFrameVizElement(props: any) {\n  const data =\n    typeof props.data === 'string' ? JSON.parse(props.data) : props.data;\n  return <DataTable data={data} />;\n}\nexport default DataFrameVizElement;\n"],"names":["_ref","_data$","data","DraggableRect","props","_jsx","Rect","_objectSpread","fill","draggable","hitStrokeWidth","onMouseEnter","document","body","style","cursor","onMouseLeave","dragBoundFunc","pos","y","HeaderComponent","_ref2","rowIndex","columnIndex","x","width","height","onResize","text","Object","keys","_jsxs","Group","children","stroke","strokeWidth","Text","fontStyle","verticalAlign","align","onDragMove","e","newWidth","target","columnCount","length","rowCount","gridRef","useRef","mainGridRef","_useMeasure","useMeasure","_useMeasure2","_slicedToArray","containerRef","_useMeasure2$","_useState","useState","_useState2","columnWidthMap","setColumnWidthMap","handleResize","prev","_defineProperty","current","resizeColumns","display","flexDirection","ref","Grid","columnWidth","index","rowHeight","showScrollbar","itemRenderer","onScroll","_ref4","scrollLeft","scrollTo","_ref3","key","React","JSON","parse","DataTable"],"sourceRoot":""}