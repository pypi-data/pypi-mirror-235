# coding: utf-8

"""
    BOAVIZTAPI - DEMO

    <p>üéØ Retrieving the impacts of digital elements.</p> <p>This is a quick demo, to see full documentation <a href=\"https://doc.api.boavizta.org\">click here</a></p> <h2>Features</h2> <p>Bellow a list of all available features.</p> <h3>üëÑ Verbose</h3> <p>Verbose is an HTTP parameter. If set at true :</p> <ul> <li>Shows the impacts of each component</li> <li>Shows the value used for each attribute</li> </ul> <p><em>\"attribute\": {\"value\": \"value\", \"unit\": \"unit\", \"status\": \"Status\", \"source\": \"Source\", \"min\":\"min\", \"max\":\"max\", \"significant_figures\":\"significant_figures\"}</em></p> <h3>üî® Embedded</h3> <ul> <li>Embedded impacts are the impacts occurring during raw material extraction, manufacture, distribution and end of life</li> <li>When end of life is not taken into account, we specified it in the <code>warnings</code></li> </ul> <h3>üîå  Usage</h3> <p>Usage impacts are assessed by multiplying :</p> <ul> <li> <p>a <strong>duration</strong></p> </li> <li> <p>an <strong>impact factor</strong> </p> </li> <li> <p>an <strong>electrical consumption</strong> </p> </li> </ul> <h4>‚è≤ Duration</h4> <p>Usage impacts can be given as a router parameter, in hours.</p> <p>If no duration is given, <strong>the impact is assess for the all life duration of the asset</strong>.</p> <h4>‚úñÔ∏è Impact factors</h4> <ul> <li>Impact factors can be given : <em>\"usage\":{\"elec_factors\":{[criteria]: 0.38}}</em></li> <li> <p>Impact factors can be retrieved from : <em>\"usage\":{\"usage_location\": \"FRA\"}</em>. </p> </li> <li> <p>See the list of locations : <a href=\"/v1/utils/country_code\">/v1/utils/country_code</a>*</p> </li> </ul> <h4>‚ö° Electrical consumption</h4> <h5>‚è∫Ô∏è Given</h5> <ul> <li>Electrical consumption can be given for one hour (average) <em>\"usage\":{\"avg_power\": 1}</em>.</li> </ul> <h5>üìà Modeled</h5> <ul> <li>Electrical consumption can be retrieved from consumption profile using <em>usage:{time_workload: 50}</em>.</li> </ul> <h5>üìã Archetype</h5> <ul> <li>In some cases, default electrical consumption can be taken from the archetype</li> </ul> <h3>üîÉ Auto-complete &amp; üìã Archetype</h3> <p>The API will complete the missing attributes in a request with a completion function or with values taken from the <code>archetype</code> specified in the route parameter.</p> <h3>‚è¨ Allocation</h3> <ul> <li>Usage impacts are assessed on the duration given in route parameter</li> <li>Embedded impacts are allocated linearly on the duration given in parameter <code>embedded_impact = impact * (duration/life_duration)</code></li> </ul> <p>If no duration is given, the life_duration (<code>`hours_life_time</code>) of the asset is used.</p>

    The version of the OpenAPI document: 1.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_call, ValidationError
from typing import Dict, List, Optional, Tuple

from pydantic import StrictBool, StrictFloat, StrictInt, StrictStr

from typing import Any, List, Optional, Union

from boaviztapi_sdk.models.box import Box
from boaviztapi_sdk.models.desktop import Desktop
from boaviztapi_sdk.models.laptop import Laptop
from boaviztapi_sdk.models.smartphone import Smartphone
from boaviztapi_sdk.models.tablet import Tablet
from boaviztapi_sdk.models.television import Television

from boaviztapi_sdk.api_client import ApiClient
from boaviztapi_sdk.api_response import ApiResponse
from boaviztapi_sdk.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class TerminalApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def box_get_all_archetype_name_v1_terminal_box_archetypes_get(
        self,
        **kwargs,
    ) -> object:
        """Box Get All Archetype Name  # noqa: E501

        # ‚úîÔ∏è Get all the available user terminal archetype for a given user terminal name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.box_get_all_archetype_name_v1_terminal_box_archetypes_get(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the box_get_all_archetype_name_v1_terminal_box_archetypes_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)

        return self.box_get_all_archetype_name_v1_terminal_box_archetypes_get_with_http_info.raw_function(
            **kwargs,
        )

    @validate_call
    def box_get_all_archetype_name_v1_terminal_box_archetypes_get_with_http_info(
        self,
        **kwargs,
    ) -> ApiResponse:
        """Box Get All Archetype Name  # noqa: E501

        # ‚úîÔ∏è Get all the available user terminal archetype for a given user terminal name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.box_get_all_archetype_name_v1_terminal_box_archetypes_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method box_get_all_archetype_name_v1_terminal_box_archetypes_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats: Dict[str, str] = {}

        # process the path parameters
        _path_params: Dict[str, str] = {}

        # process the query parameters
        _query_params: List[Tuple[str, str]] = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings: List[str] = []  # noqa: E501

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }

        return self.api_client.call_api(
            '/v1/terminal/box/archetypes', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_call
    def box_get_archetype_config_v1_terminal_box_archetype_config_get(
        self,
        archetype: StrictStr,
        **kwargs,
    ) -> object:
        """Box Get Archetype Config  # noqa: E501

        # ‚úîÔ∏è Get the configuration of a given archetype  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.box_get_archetype_config_v1_terminal_box_archetype_config_get(archetype, async_req=True)
        >>> result = thread.get()

        :param archetype: (required)
        :type archetype: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the box_get_archetype_config_v1_terminal_box_archetype_config_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)

        return self.box_get_archetype_config_v1_terminal_box_archetype_config_get_with_http_info.raw_function(
            archetype,
            **kwargs,
        )

    @validate_call
    def box_get_archetype_config_v1_terminal_box_archetype_config_get_with_http_info(
        self,
        archetype: StrictStr,
        **kwargs,
    ) -> ApiResponse:
        """Box Get Archetype Config  # noqa: E501

        # ‚úîÔ∏è Get the configuration of a given archetype  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.box_get_archetype_config_v1_terminal_box_archetype_config_get_with_http_info(archetype, async_req=True)
        >>> result = thread.get()

        :param archetype: (required)
        :type archetype: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'archetype'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method box_get_archetype_config_v1_terminal_box_archetype_config_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats: Dict[str, str] = {}

        # process the path parameters
        _path_params: Dict[str, str] = {}

        # process the query parameters
        _query_params: List[Tuple[str, str]] = []
        if _params.get('archetype') is not None:  # noqa: E501
            _query_params.append(('archetype', _params['archetype']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings: List[str] = []  # noqa: E501

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/v1/terminal/box/archetype_config', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_call
    def box_impact_v1_terminal_box_get(
        self,
        archetype: Optional[StrictStr] = None,
        verbose: Optional[StrictBool] = None,
        duration: Optional[Union[StrictFloat, StrictInt]] = None,
        criteria: Optional[List[StrictStr]] = None,
        **kwargs,
    ) -> object:
        """Box Impact  # noqa: E501

        # ‚úî Terminal impacts ### Features  üëÑ Verbose  üîÉ Auto-complete  üî® Embedded  The impacts values are fixüîå Usage  * ‚è∫Ô∏è  Given  * üìã Archetype  ‚è¨ Allocation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.box_impact_v1_terminal_box_get(archetype, verbose, duration, criteria, async_req=True)
        >>> result = thread.get()

        :param archetype:
        :type archetype: str
        :param verbose:
        :type verbose: bool
        :param duration:
        :type duration: float
        :param criteria:
        :type criteria: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the box_impact_v1_terminal_box_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)

        return self.box_impact_v1_terminal_box_get_with_http_info.raw_function(
            archetype,
            verbose,
            duration,
            criteria,
            **kwargs,
        )

    @validate_call
    def box_impact_v1_terminal_box_get_with_http_info(
        self,
        archetype: Optional[StrictStr] = None,
        verbose: Optional[StrictBool] = None,
        duration: Optional[Union[StrictFloat, StrictInt]] = None,
        criteria: Optional[List[StrictStr]] = None,
        **kwargs,
    ) -> ApiResponse:
        """Box Impact  # noqa: E501

        # ‚úî Terminal impacts ### Features  üëÑ Verbose  üîÉ Auto-complete  üî® Embedded  The impacts values are fixüîå Usage  * ‚è∫Ô∏è  Given  * üìã Archetype  ‚è¨ Allocation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.box_impact_v1_terminal_box_get_with_http_info(archetype, verbose, duration, criteria, async_req=True)
        >>> result = thread.get()

        :param archetype:
        :type archetype: str
        :param verbose:
        :type verbose: bool
        :param duration:
        :type duration: float
        :param criteria:
        :type criteria: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'archetype',
            'verbose',
            'duration',
            'criteria'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method box_impact_v1_terminal_box_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats: Dict[str, str] = {}

        # process the path parameters
        _path_params: Dict[str, str] = {}

        # process the query parameters
        _query_params: List[Tuple[str, str]] = []
        if _params.get('archetype') is not None:  # noqa: E501
            _query_params.append(('archetype', _params['archetype']))

        if _params.get('verbose') is not None:  # noqa: E501
            _query_params.append(('verbose', _params['verbose']))

        if _params.get('duration') is not None:  # noqa: E501
            _query_params.append(('duration', _params['duration']))

        if _params.get('criteria') is not None:  # noqa: E501
            _query_params.append(('criteria', _params['criteria']))
            _collection_formats['criteria'] = 'multi'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings: List[str] = []  # noqa: E501

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/v1/terminal/box', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_call
    def box_impact_v1_terminal_box_post(
        self,
        verbose: Optional[StrictBool] = None,
        duration: Optional[Union[StrictFloat, StrictInt]] = None,
        archetype: Optional[StrictStr] = None,
        criteria: Optional[List[StrictStr]] = None,
        box: Optional[Box] = None,
        **kwargs,
    ) -> object:
        """Box Impact  # noqa: E501

        # ‚úî Terminal impacts ### Features  üëÑ Verbose  üîÉ Auto-complete  üî® Embedded  The impacts values are fixüîå Usage  * ‚è∫Ô∏è  Given  * üìã Archetype  ‚è¨ Allocation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.box_impact_v1_terminal_box_post(verbose, duration, archetype, criteria, box, async_req=True)
        >>> result = thread.get()

        :param verbose:
        :type verbose: bool
        :param duration:
        :type duration: float
        :param archetype:
        :type archetype: str
        :param criteria:
        :type criteria: List[str]
        :param box:
        :type box: Box
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the box_impact_v1_terminal_box_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)

        return self.box_impact_v1_terminal_box_post_with_http_info.raw_function(
            verbose,
            duration,
            archetype,
            criteria,
            box,
            **kwargs,
        )

    @validate_call
    def box_impact_v1_terminal_box_post_with_http_info(
        self,
        verbose: Optional[StrictBool] = None,
        duration: Optional[Union[StrictFloat, StrictInt]] = None,
        archetype: Optional[StrictStr] = None,
        criteria: Optional[List[StrictStr]] = None,
        box: Optional[Box] = None,
        **kwargs,
    ) -> ApiResponse:
        """Box Impact  # noqa: E501

        # ‚úî Terminal impacts ### Features  üëÑ Verbose  üîÉ Auto-complete  üî® Embedded  The impacts values are fixüîå Usage  * ‚è∫Ô∏è  Given  * üìã Archetype  ‚è¨ Allocation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.box_impact_v1_terminal_box_post_with_http_info(verbose, duration, archetype, criteria, box, async_req=True)
        >>> result = thread.get()

        :param verbose:
        :type verbose: bool
        :param duration:
        :type duration: float
        :param archetype:
        :type archetype: str
        :param criteria:
        :type criteria: List[str]
        :param box:
        :type box: Box
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'verbose',
            'duration',
            'archetype',
            'criteria',
            'box'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method box_impact_v1_terminal_box_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats: Dict[str, str] = {}

        # process the path parameters
        _path_params: Dict[str, str] = {}

        # process the query parameters
        _query_params: List[Tuple[str, str]] = []
        if _params.get('verbose') is not None:  # noqa: E501
            _query_params.append(('verbose', _params['verbose']))

        if _params.get('duration') is not None:  # noqa: E501
            _query_params.append(('duration', _params['duration']))

        if _params.get('archetype') is not None:  # noqa: E501
            _query_params.append(('archetype', _params['archetype']))

        if _params.get('criteria') is not None:  # noqa: E501
            _query_params.append(('criteria', _params['criteria']))
            _collection_formats['criteria'] = 'multi'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        # process the body parameter
        _body_params = None
        if _params['box'] is not None:
            _body_params = _params['box']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings: List[str] = []  # noqa: E501

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/v1/terminal/box', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_call
    def desktop_get_all_archetype_name_v1_terminal_desktop_archetypes_get(
        self,
        **kwargs,
    ) -> object:
        """Desktop Get All Archetype Name  # noqa: E501

        # ‚úîÔ∏è Get all the available user terminal archetype for a given user terminal name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.desktop_get_all_archetype_name_v1_terminal_desktop_archetypes_get(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the desktop_get_all_archetype_name_v1_terminal_desktop_archetypes_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)

        return self.desktop_get_all_archetype_name_v1_terminal_desktop_archetypes_get_with_http_info.raw_function(
            **kwargs,
        )

    @validate_call
    def desktop_get_all_archetype_name_v1_terminal_desktop_archetypes_get_with_http_info(
        self,
        **kwargs,
    ) -> ApiResponse:
        """Desktop Get All Archetype Name  # noqa: E501

        # ‚úîÔ∏è Get all the available user terminal archetype for a given user terminal name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.desktop_get_all_archetype_name_v1_terminal_desktop_archetypes_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method desktop_get_all_archetype_name_v1_terminal_desktop_archetypes_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats: Dict[str, str] = {}

        # process the path parameters
        _path_params: Dict[str, str] = {}

        # process the query parameters
        _query_params: List[Tuple[str, str]] = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings: List[str] = []  # noqa: E501

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }

        return self.api_client.call_api(
            '/v1/terminal/desktop/archetypes', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_call
    def desktop_get_archetype_config_v1_terminal_desktop_archetype_config_get(
        self,
        archetype: StrictStr,
        **kwargs,
    ) -> object:
        """Desktop Get Archetype Config  # noqa: E501

        # ‚úîÔ∏è Get the configuration of a given archetype  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.desktop_get_archetype_config_v1_terminal_desktop_archetype_config_get(archetype, async_req=True)
        >>> result = thread.get()

        :param archetype: (required)
        :type archetype: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the desktop_get_archetype_config_v1_terminal_desktop_archetype_config_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)

        return self.desktop_get_archetype_config_v1_terminal_desktop_archetype_config_get_with_http_info.raw_function(
            archetype,
            **kwargs,
        )

    @validate_call
    def desktop_get_archetype_config_v1_terminal_desktop_archetype_config_get_with_http_info(
        self,
        archetype: StrictStr,
        **kwargs,
    ) -> ApiResponse:
        """Desktop Get Archetype Config  # noqa: E501

        # ‚úîÔ∏è Get the configuration of a given archetype  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.desktop_get_archetype_config_v1_terminal_desktop_archetype_config_get_with_http_info(archetype, async_req=True)
        >>> result = thread.get()

        :param archetype: (required)
        :type archetype: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'archetype'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method desktop_get_archetype_config_v1_terminal_desktop_archetype_config_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats: Dict[str, str] = {}

        # process the path parameters
        _path_params: Dict[str, str] = {}

        # process the query parameters
        _query_params: List[Tuple[str, str]] = []
        if _params.get('archetype') is not None:  # noqa: E501
            _query_params.append(('archetype', _params['archetype']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings: List[str] = []  # noqa: E501

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/v1/terminal/desktop/archetype_config', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_call
    def desktop_impact_v1_terminal_desktop_get(
        self,
        archetype: Optional[StrictStr] = None,
        verbose: Optional[StrictBool] = None,
        duration: Optional[Union[StrictFloat, StrictInt]] = None,
        criteria: Optional[List[StrictStr]] = None,
        **kwargs,
    ) -> object:
        """Desktop Impact  # noqa: E501

        # ‚úî Terminal impacts ### Features  üëÑ Verbose  üîÉ Auto-complete  üî® Embedded  The impacts values are fixüîå Usage  * ‚è∫Ô∏è  Given  * üìã Archetype  ‚è¨ Allocation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.desktop_impact_v1_terminal_desktop_get(archetype, verbose, duration, criteria, async_req=True)
        >>> result = thread.get()

        :param archetype:
        :type archetype: str
        :param verbose:
        :type verbose: bool
        :param duration:
        :type duration: float
        :param criteria:
        :type criteria: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the desktop_impact_v1_terminal_desktop_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)

        return self.desktop_impact_v1_terminal_desktop_get_with_http_info.raw_function(
            archetype,
            verbose,
            duration,
            criteria,
            **kwargs,
        )

    @validate_call
    def desktop_impact_v1_terminal_desktop_get_with_http_info(
        self,
        archetype: Optional[StrictStr] = None,
        verbose: Optional[StrictBool] = None,
        duration: Optional[Union[StrictFloat, StrictInt]] = None,
        criteria: Optional[List[StrictStr]] = None,
        **kwargs,
    ) -> ApiResponse:
        """Desktop Impact  # noqa: E501

        # ‚úî Terminal impacts ### Features  üëÑ Verbose  üîÉ Auto-complete  üî® Embedded  The impacts values are fixüîå Usage  * ‚è∫Ô∏è  Given  * üìã Archetype  ‚è¨ Allocation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.desktop_impact_v1_terminal_desktop_get_with_http_info(archetype, verbose, duration, criteria, async_req=True)
        >>> result = thread.get()

        :param archetype:
        :type archetype: str
        :param verbose:
        :type verbose: bool
        :param duration:
        :type duration: float
        :param criteria:
        :type criteria: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'archetype',
            'verbose',
            'duration',
            'criteria'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method desktop_impact_v1_terminal_desktop_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats: Dict[str, str] = {}

        # process the path parameters
        _path_params: Dict[str, str] = {}

        # process the query parameters
        _query_params: List[Tuple[str, str]] = []
        if _params.get('archetype') is not None:  # noqa: E501
            _query_params.append(('archetype', _params['archetype']))

        if _params.get('verbose') is not None:  # noqa: E501
            _query_params.append(('verbose', _params['verbose']))

        if _params.get('duration') is not None:  # noqa: E501
            _query_params.append(('duration', _params['duration']))

        if _params.get('criteria') is not None:  # noqa: E501
            _query_params.append(('criteria', _params['criteria']))
            _collection_formats['criteria'] = 'multi'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings: List[str] = []  # noqa: E501

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/v1/terminal/desktop', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_call
    def desktop_impact_v1_terminal_desktop_post(
        self,
        verbose: Optional[StrictBool] = None,
        duration: Optional[Union[StrictFloat, StrictInt]] = None,
        archetype: Optional[StrictStr] = None,
        criteria: Optional[List[StrictStr]] = None,
        desktop: Optional[Desktop] = None,
        **kwargs,
    ) -> object:
        """Desktop Impact  # noqa: E501

        # ‚úî Terminal impacts ### Features  üëÑ Verbose  üîÉ Auto-complete  üî® Embedded  The impacts values are fixüîå Usage  * ‚è∫Ô∏è  Given  * üìã Archetype  ‚è¨ Allocation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.desktop_impact_v1_terminal_desktop_post(verbose, duration, archetype, criteria, desktop, async_req=True)
        >>> result = thread.get()

        :param verbose:
        :type verbose: bool
        :param duration:
        :type duration: float
        :param archetype:
        :type archetype: str
        :param criteria:
        :type criteria: List[str]
        :param desktop:
        :type desktop: Desktop
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the desktop_impact_v1_terminal_desktop_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)

        return self.desktop_impact_v1_terminal_desktop_post_with_http_info.raw_function(
            verbose,
            duration,
            archetype,
            criteria,
            desktop,
            **kwargs,
        )

    @validate_call
    def desktop_impact_v1_terminal_desktop_post_with_http_info(
        self,
        verbose: Optional[StrictBool] = None,
        duration: Optional[Union[StrictFloat, StrictInt]] = None,
        archetype: Optional[StrictStr] = None,
        criteria: Optional[List[StrictStr]] = None,
        desktop: Optional[Desktop] = None,
        **kwargs,
    ) -> ApiResponse:
        """Desktop Impact  # noqa: E501

        # ‚úî Terminal impacts ### Features  üëÑ Verbose  üîÉ Auto-complete  üî® Embedded  The impacts values are fixüîå Usage  * ‚è∫Ô∏è  Given  * üìã Archetype  ‚è¨ Allocation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.desktop_impact_v1_terminal_desktop_post_with_http_info(verbose, duration, archetype, criteria, desktop, async_req=True)
        >>> result = thread.get()

        :param verbose:
        :type verbose: bool
        :param duration:
        :type duration: float
        :param archetype:
        :type archetype: str
        :param criteria:
        :type criteria: List[str]
        :param desktop:
        :type desktop: Desktop
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'verbose',
            'duration',
            'archetype',
            'criteria',
            'desktop'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method desktop_impact_v1_terminal_desktop_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats: Dict[str, str] = {}

        # process the path parameters
        _path_params: Dict[str, str] = {}

        # process the query parameters
        _query_params: List[Tuple[str, str]] = []
        if _params.get('verbose') is not None:  # noqa: E501
            _query_params.append(('verbose', _params['verbose']))

        if _params.get('duration') is not None:  # noqa: E501
            _query_params.append(('duration', _params['duration']))

        if _params.get('archetype') is not None:  # noqa: E501
            _query_params.append(('archetype', _params['archetype']))

        if _params.get('criteria') is not None:  # noqa: E501
            _query_params.append(('criteria', _params['criteria']))
            _collection_formats['criteria'] = 'multi'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        # process the body parameter
        _body_params = None
        if _params['desktop'] is not None:
            _body_params = _params['desktop']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings: List[str] = []  # noqa: E501

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/v1/terminal/desktop', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_call
    def laptop_get_all_archetype_name_v1_terminal_laptop_archetypes_get(
        self,
        **kwargs,
    ) -> object:
        """Laptop Get All Archetype Name  # noqa: E501

        # ‚úîÔ∏è Get all the available user terminal archetype for a given user terminal name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.laptop_get_all_archetype_name_v1_terminal_laptop_archetypes_get(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the laptop_get_all_archetype_name_v1_terminal_laptop_archetypes_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)

        return self.laptop_get_all_archetype_name_v1_terminal_laptop_archetypes_get_with_http_info.raw_function(
            **kwargs,
        )

    @validate_call
    def laptop_get_all_archetype_name_v1_terminal_laptop_archetypes_get_with_http_info(
        self,
        **kwargs,
    ) -> ApiResponse:
        """Laptop Get All Archetype Name  # noqa: E501

        # ‚úîÔ∏è Get all the available user terminal archetype for a given user terminal name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.laptop_get_all_archetype_name_v1_terminal_laptop_archetypes_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method laptop_get_all_archetype_name_v1_terminal_laptop_archetypes_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats: Dict[str, str] = {}

        # process the path parameters
        _path_params: Dict[str, str] = {}

        # process the query parameters
        _query_params: List[Tuple[str, str]] = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings: List[str] = []  # noqa: E501

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }

        return self.api_client.call_api(
            '/v1/terminal/laptop/archetypes', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_call
    def laptop_get_archetype_config_v1_terminal_laptop_archetype_config_get(
        self,
        archetype: StrictStr,
        **kwargs,
    ) -> object:
        """Laptop Get Archetype Config  # noqa: E501

        # ‚úîÔ∏è Get the configuration of a given archetype  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.laptop_get_archetype_config_v1_terminal_laptop_archetype_config_get(archetype, async_req=True)
        >>> result = thread.get()

        :param archetype: (required)
        :type archetype: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the laptop_get_archetype_config_v1_terminal_laptop_archetype_config_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)

        return self.laptop_get_archetype_config_v1_terminal_laptop_archetype_config_get_with_http_info.raw_function(
            archetype,
            **kwargs,
        )

    @validate_call
    def laptop_get_archetype_config_v1_terminal_laptop_archetype_config_get_with_http_info(
        self,
        archetype: StrictStr,
        **kwargs,
    ) -> ApiResponse:
        """Laptop Get Archetype Config  # noqa: E501

        # ‚úîÔ∏è Get the configuration of a given archetype  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.laptop_get_archetype_config_v1_terminal_laptop_archetype_config_get_with_http_info(archetype, async_req=True)
        >>> result = thread.get()

        :param archetype: (required)
        :type archetype: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'archetype'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method laptop_get_archetype_config_v1_terminal_laptop_archetype_config_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats: Dict[str, str] = {}

        # process the path parameters
        _path_params: Dict[str, str] = {}

        # process the query parameters
        _query_params: List[Tuple[str, str]] = []
        if _params.get('archetype') is not None:  # noqa: E501
            _query_params.append(('archetype', _params['archetype']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings: List[str] = []  # noqa: E501

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/v1/terminal/laptop/archetype_config', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_call
    def laptop_impact_v1_terminal_laptop_get(
        self,
        archetype: Optional[StrictStr] = None,
        verbose: Optional[StrictBool] = None,
        duration: Optional[Union[StrictFloat, StrictInt]] = None,
        criteria: Optional[List[StrictStr]] = None,
        **kwargs,
    ) -> object:
        """Laptop Impact  # noqa: E501

        # ‚úî Terminal impacts ### Features  üëÑ Verbose  üîÉ Auto-complete  üî® Embedded  The impacts values are fixüîå Usage  * ‚è∫Ô∏è  Given  * üìã Archetype  ‚è¨ Allocation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.laptop_impact_v1_terminal_laptop_get(archetype, verbose, duration, criteria, async_req=True)
        >>> result = thread.get()

        :param archetype:
        :type archetype: str
        :param verbose:
        :type verbose: bool
        :param duration:
        :type duration: float
        :param criteria:
        :type criteria: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the laptop_impact_v1_terminal_laptop_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)

        return self.laptop_impact_v1_terminal_laptop_get_with_http_info.raw_function(
            archetype,
            verbose,
            duration,
            criteria,
            **kwargs,
        )

    @validate_call
    def laptop_impact_v1_terminal_laptop_get_with_http_info(
        self,
        archetype: Optional[StrictStr] = None,
        verbose: Optional[StrictBool] = None,
        duration: Optional[Union[StrictFloat, StrictInt]] = None,
        criteria: Optional[List[StrictStr]] = None,
        **kwargs,
    ) -> ApiResponse:
        """Laptop Impact  # noqa: E501

        # ‚úî Terminal impacts ### Features  üëÑ Verbose  üîÉ Auto-complete  üî® Embedded  The impacts values are fixüîå Usage  * ‚è∫Ô∏è  Given  * üìã Archetype  ‚è¨ Allocation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.laptop_impact_v1_terminal_laptop_get_with_http_info(archetype, verbose, duration, criteria, async_req=True)
        >>> result = thread.get()

        :param archetype:
        :type archetype: str
        :param verbose:
        :type verbose: bool
        :param duration:
        :type duration: float
        :param criteria:
        :type criteria: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'archetype',
            'verbose',
            'duration',
            'criteria'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method laptop_impact_v1_terminal_laptop_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats: Dict[str, str] = {}

        # process the path parameters
        _path_params: Dict[str, str] = {}

        # process the query parameters
        _query_params: List[Tuple[str, str]] = []
        if _params.get('archetype') is not None:  # noqa: E501
            _query_params.append(('archetype', _params['archetype']))

        if _params.get('verbose') is not None:  # noqa: E501
            _query_params.append(('verbose', _params['verbose']))

        if _params.get('duration') is not None:  # noqa: E501
            _query_params.append(('duration', _params['duration']))

        if _params.get('criteria') is not None:  # noqa: E501
            _query_params.append(('criteria', _params['criteria']))
            _collection_formats['criteria'] = 'multi'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings: List[str] = []  # noqa: E501

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/v1/terminal/laptop', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_call
    def laptop_impact_v1_terminal_laptop_post(
        self,
        verbose: Optional[StrictBool] = None,
        duration: Optional[Union[StrictFloat, StrictInt]] = None,
        archetype: Optional[StrictStr] = None,
        criteria: Optional[List[StrictStr]] = None,
        laptop: Optional[Laptop] = None,
        **kwargs,
    ) -> object:
        """Laptop Impact  # noqa: E501

        # ‚úî Terminal impacts ### Features  üëÑ Verbose  üîÉ Auto-complete  üî® Embedded  The impacts values are fixüîå Usage  * ‚è∫Ô∏è  Given  * üìã Archetype  ‚è¨ Allocation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.laptop_impact_v1_terminal_laptop_post(verbose, duration, archetype, criteria, laptop, async_req=True)
        >>> result = thread.get()

        :param verbose:
        :type verbose: bool
        :param duration:
        :type duration: float
        :param archetype:
        :type archetype: str
        :param criteria:
        :type criteria: List[str]
        :param laptop:
        :type laptop: Laptop
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the laptop_impact_v1_terminal_laptop_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)

        return self.laptop_impact_v1_terminal_laptop_post_with_http_info.raw_function(
            verbose,
            duration,
            archetype,
            criteria,
            laptop,
            **kwargs,
        )

    @validate_call
    def laptop_impact_v1_terminal_laptop_post_with_http_info(
        self,
        verbose: Optional[StrictBool] = None,
        duration: Optional[Union[StrictFloat, StrictInt]] = None,
        archetype: Optional[StrictStr] = None,
        criteria: Optional[List[StrictStr]] = None,
        laptop: Optional[Laptop] = None,
        **kwargs,
    ) -> ApiResponse:
        """Laptop Impact  # noqa: E501

        # ‚úî Terminal impacts ### Features  üëÑ Verbose  üîÉ Auto-complete  üî® Embedded  The impacts values are fixüîå Usage  * ‚è∫Ô∏è  Given  * üìã Archetype  ‚è¨ Allocation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.laptop_impact_v1_terminal_laptop_post_with_http_info(verbose, duration, archetype, criteria, laptop, async_req=True)
        >>> result = thread.get()

        :param verbose:
        :type verbose: bool
        :param duration:
        :type duration: float
        :param archetype:
        :type archetype: str
        :param criteria:
        :type criteria: List[str]
        :param laptop:
        :type laptop: Laptop
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'verbose',
            'duration',
            'archetype',
            'criteria',
            'laptop'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method laptop_impact_v1_terminal_laptop_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats: Dict[str, str] = {}

        # process the path parameters
        _path_params: Dict[str, str] = {}

        # process the query parameters
        _query_params: List[Tuple[str, str]] = []
        if _params.get('verbose') is not None:  # noqa: E501
            _query_params.append(('verbose', _params['verbose']))

        if _params.get('duration') is not None:  # noqa: E501
            _query_params.append(('duration', _params['duration']))

        if _params.get('archetype') is not None:  # noqa: E501
            _query_params.append(('archetype', _params['archetype']))

        if _params.get('criteria') is not None:  # noqa: E501
            _query_params.append(('criteria', _params['criteria']))
            _collection_formats['criteria'] = 'multi'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        # process the body parameter
        _body_params = None
        if _params['laptop'] is not None:
            _body_params = _params['laptop']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings: List[str] = []  # noqa: E501

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/v1/terminal/laptop', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_call
    def smartphone_get_all_archetype_name_v1_terminal_smartphone_archetypes_get(
        self,
        **kwargs,
    ) -> object:
        """Smartphone Get All Archetype Name  # noqa: E501

        # ‚úîÔ∏è Get all the available user terminal archetype for a given user terminal name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.smartphone_get_all_archetype_name_v1_terminal_smartphone_archetypes_get(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the smartphone_get_all_archetype_name_v1_terminal_smartphone_archetypes_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)

        return self.smartphone_get_all_archetype_name_v1_terminal_smartphone_archetypes_get_with_http_info.raw_function(
            **kwargs,
        )

    @validate_call
    def smartphone_get_all_archetype_name_v1_terminal_smartphone_archetypes_get_with_http_info(
        self,
        **kwargs,
    ) -> ApiResponse:
        """Smartphone Get All Archetype Name  # noqa: E501

        # ‚úîÔ∏è Get all the available user terminal archetype for a given user terminal name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.smartphone_get_all_archetype_name_v1_terminal_smartphone_archetypes_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method smartphone_get_all_archetype_name_v1_terminal_smartphone_archetypes_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats: Dict[str, str] = {}

        # process the path parameters
        _path_params: Dict[str, str] = {}

        # process the query parameters
        _query_params: List[Tuple[str, str]] = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings: List[str] = []  # noqa: E501

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }

        return self.api_client.call_api(
            '/v1/terminal/smartphone/archetypes', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_call
    def smartphone_get_archetype_config_v1_terminal_smartphone_archetype_config_get(
        self,
        archetype: StrictStr,
        **kwargs,
    ) -> object:
        """Smartphone Get Archetype Config  # noqa: E501

        # ‚úîÔ∏è Get the configuration of a given archetype  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.smartphone_get_archetype_config_v1_terminal_smartphone_archetype_config_get(archetype, async_req=True)
        >>> result = thread.get()

        :param archetype: (required)
        :type archetype: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the smartphone_get_archetype_config_v1_terminal_smartphone_archetype_config_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)

        return self.smartphone_get_archetype_config_v1_terminal_smartphone_archetype_config_get_with_http_info.raw_function(
            archetype,
            **kwargs,
        )

    @validate_call
    def smartphone_get_archetype_config_v1_terminal_smartphone_archetype_config_get_with_http_info(
        self,
        archetype: StrictStr,
        **kwargs,
    ) -> ApiResponse:
        """Smartphone Get Archetype Config  # noqa: E501

        # ‚úîÔ∏è Get the configuration of a given archetype  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.smartphone_get_archetype_config_v1_terminal_smartphone_archetype_config_get_with_http_info(archetype, async_req=True)
        >>> result = thread.get()

        :param archetype: (required)
        :type archetype: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'archetype'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method smartphone_get_archetype_config_v1_terminal_smartphone_archetype_config_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats: Dict[str, str] = {}

        # process the path parameters
        _path_params: Dict[str, str] = {}

        # process the query parameters
        _query_params: List[Tuple[str, str]] = []
        if _params.get('archetype') is not None:  # noqa: E501
            _query_params.append(('archetype', _params['archetype']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings: List[str] = []  # noqa: E501

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/v1/terminal/smartphone/archetype_config', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_call
    def smartphone_impact_v1_terminal_smartphone_get(
        self,
        archetype: Optional[StrictStr] = None,
        verbose: Optional[StrictBool] = None,
        duration: Optional[Union[StrictFloat, StrictInt]] = None,
        criteria: Optional[List[StrictStr]] = None,
        **kwargs,
    ) -> object:
        """Smartphone Impact  # noqa: E501

        # ‚úî Terminal impacts ### Features  üëÑ Verbose  üîÉ Auto-complete  üî® Embedded  The impacts values are fixüîå Usage  * ‚è∫Ô∏è  Given  * üìã Archetype  ‚è¨ Allocation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.smartphone_impact_v1_terminal_smartphone_get(archetype, verbose, duration, criteria, async_req=True)
        >>> result = thread.get()

        :param archetype:
        :type archetype: str
        :param verbose:
        :type verbose: bool
        :param duration:
        :type duration: float
        :param criteria:
        :type criteria: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the smartphone_impact_v1_terminal_smartphone_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)

        return self.smartphone_impact_v1_terminal_smartphone_get_with_http_info.raw_function(
            archetype,
            verbose,
            duration,
            criteria,
            **kwargs,
        )

    @validate_call
    def smartphone_impact_v1_terminal_smartphone_get_with_http_info(
        self,
        archetype: Optional[StrictStr] = None,
        verbose: Optional[StrictBool] = None,
        duration: Optional[Union[StrictFloat, StrictInt]] = None,
        criteria: Optional[List[StrictStr]] = None,
        **kwargs,
    ) -> ApiResponse:
        """Smartphone Impact  # noqa: E501

        # ‚úî Terminal impacts ### Features  üëÑ Verbose  üîÉ Auto-complete  üî® Embedded  The impacts values are fixüîå Usage  * ‚è∫Ô∏è  Given  * üìã Archetype  ‚è¨ Allocation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.smartphone_impact_v1_terminal_smartphone_get_with_http_info(archetype, verbose, duration, criteria, async_req=True)
        >>> result = thread.get()

        :param archetype:
        :type archetype: str
        :param verbose:
        :type verbose: bool
        :param duration:
        :type duration: float
        :param criteria:
        :type criteria: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'archetype',
            'verbose',
            'duration',
            'criteria'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method smartphone_impact_v1_terminal_smartphone_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats: Dict[str, str] = {}

        # process the path parameters
        _path_params: Dict[str, str] = {}

        # process the query parameters
        _query_params: List[Tuple[str, str]] = []
        if _params.get('archetype') is not None:  # noqa: E501
            _query_params.append(('archetype', _params['archetype']))

        if _params.get('verbose') is not None:  # noqa: E501
            _query_params.append(('verbose', _params['verbose']))

        if _params.get('duration') is not None:  # noqa: E501
            _query_params.append(('duration', _params['duration']))

        if _params.get('criteria') is not None:  # noqa: E501
            _query_params.append(('criteria', _params['criteria']))
            _collection_formats['criteria'] = 'multi'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings: List[str] = []  # noqa: E501

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/v1/terminal/smartphone', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_call
    def smartphone_impact_v1_terminal_smartphone_post(
        self,
        verbose: Optional[StrictBool] = None,
        duration: Optional[Union[StrictFloat, StrictInt]] = None,
        archetype: Optional[StrictStr] = None,
        criteria: Optional[List[StrictStr]] = None,
        smartphone: Optional[Smartphone] = None,
        **kwargs,
    ) -> object:
        """Smartphone Impact  # noqa: E501

        # ‚úî Terminal impacts ### Features  üëÑ Verbose  üîÉ Auto-complete  üî® Embedded  The impacts values are fixüîå Usage  * ‚è∫Ô∏è  Given  * üìã Archetype  ‚è¨ Allocation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.smartphone_impact_v1_terminal_smartphone_post(verbose, duration, archetype, criteria, smartphone, async_req=True)
        >>> result = thread.get()

        :param verbose:
        :type verbose: bool
        :param duration:
        :type duration: float
        :param archetype:
        :type archetype: str
        :param criteria:
        :type criteria: List[str]
        :param smartphone:
        :type smartphone: Smartphone
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the smartphone_impact_v1_terminal_smartphone_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)

        return self.smartphone_impact_v1_terminal_smartphone_post_with_http_info.raw_function(
            verbose,
            duration,
            archetype,
            criteria,
            smartphone,
            **kwargs,
        )

    @validate_call
    def smartphone_impact_v1_terminal_smartphone_post_with_http_info(
        self,
        verbose: Optional[StrictBool] = None,
        duration: Optional[Union[StrictFloat, StrictInt]] = None,
        archetype: Optional[StrictStr] = None,
        criteria: Optional[List[StrictStr]] = None,
        smartphone: Optional[Smartphone] = None,
        **kwargs,
    ) -> ApiResponse:
        """Smartphone Impact  # noqa: E501

        # ‚úî Terminal impacts ### Features  üëÑ Verbose  üîÉ Auto-complete  üî® Embedded  The impacts values are fixüîå Usage  * ‚è∫Ô∏è  Given  * üìã Archetype  ‚è¨ Allocation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.smartphone_impact_v1_terminal_smartphone_post_with_http_info(verbose, duration, archetype, criteria, smartphone, async_req=True)
        >>> result = thread.get()

        :param verbose:
        :type verbose: bool
        :param duration:
        :type duration: float
        :param archetype:
        :type archetype: str
        :param criteria:
        :type criteria: List[str]
        :param smartphone:
        :type smartphone: Smartphone
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'verbose',
            'duration',
            'archetype',
            'criteria',
            'smartphone'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method smartphone_impact_v1_terminal_smartphone_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats: Dict[str, str] = {}

        # process the path parameters
        _path_params: Dict[str, str] = {}

        # process the query parameters
        _query_params: List[Tuple[str, str]] = []
        if _params.get('verbose') is not None:  # noqa: E501
            _query_params.append(('verbose', _params['verbose']))

        if _params.get('duration') is not None:  # noqa: E501
            _query_params.append(('duration', _params['duration']))

        if _params.get('archetype') is not None:  # noqa: E501
            _query_params.append(('archetype', _params['archetype']))

        if _params.get('criteria') is not None:  # noqa: E501
            _query_params.append(('criteria', _params['criteria']))
            _collection_formats['criteria'] = 'multi'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        # process the body parameter
        _body_params = None
        if _params['smartphone'] is not None:
            _body_params = _params['smartphone']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings: List[str] = []  # noqa: E501

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/v1/terminal/smartphone', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_call
    def tablet_get_all_archetype_name_v1_terminal_tablet_archetypes_get(
        self,
        **kwargs,
    ) -> object:
        """Tablet Get All Archetype Name  # noqa: E501

        # ‚úîÔ∏è Get all the available user terminal archetype for a given user terminal name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.tablet_get_all_archetype_name_v1_terminal_tablet_archetypes_get(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the tablet_get_all_archetype_name_v1_terminal_tablet_archetypes_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)

        return self.tablet_get_all_archetype_name_v1_terminal_tablet_archetypes_get_with_http_info.raw_function(
            **kwargs,
        )

    @validate_call
    def tablet_get_all_archetype_name_v1_terminal_tablet_archetypes_get_with_http_info(
        self,
        **kwargs,
    ) -> ApiResponse:
        """Tablet Get All Archetype Name  # noqa: E501

        # ‚úîÔ∏è Get all the available user terminal archetype for a given user terminal name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.tablet_get_all_archetype_name_v1_terminal_tablet_archetypes_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tablet_get_all_archetype_name_v1_terminal_tablet_archetypes_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats: Dict[str, str] = {}

        # process the path parameters
        _path_params: Dict[str, str] = {}

        # process the query parameters
        _query_params: List[Tuple[str, str]] = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings: List[str] = []  # noqa: E501

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }

        return self.api_client.call_api(
            '/v1/terminal/tablet/archetypes', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_call
    def tablet_get_archetype_config_v1_terminal_tablet_archetype_config_get(
        self,
        archetype: StrictStr,
        **kwargs,
    ) -> object:
        """Tablet Get Archetype Config  # noqa: E501

        # ‚úîÔ∏è Get the configuration of a given archetype  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.tablet_get_archetype_config_v1_terminal_tablet_archetype_config_get(archetype, async_req=True)
        >>> result = thread.get()

        :param archetype: (required)
        :type archetype: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the tablet_get_archetype_config_v1_terminal_tablet_archetype_config_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)

        return self.tablet_get_archetype_config_v1_terminal_tablet_archetype_config_get_with_http_info.raw_function(
            archetype,
            **kwargs,
        )

    @validate_call
    def tablet_get_archetype_config_v1_terminal_tablet_archetype_config_get_with_http_info(
        self,
        archetype: StrictStr,
        **kwargs,
    ) -> ApiResponse:
        """Tablet Get Archetype Config  # noqa: E501

        # ‚úîÔ∏è Get the configuration of a given archetype  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.tablet_get_archetype_config_v1_terminal_tablet_archetype_config_get_with_http_info(archetype, async_req=True)
        >>> result = thread.get()

        :param archetype: (required)
        :type archetype: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'archetype'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tablet_get_archetype_config_v1_terminal_tablet_archetype_config_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats: Dict[str, str] = {}

        # process the path parameters
        _path_params: Dict[str, str] = {}

        # process the query parameters
        _query_params: List[Tuple[str, str]] = []
        if _params.get('archetype') is not None:  # noqa: E501
            _query_params.append(('archetype', _params['archetype']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings: List[str] = []  # noqa: E501

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/v1/terminal/tablet/archetype_config', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_call
    def tablet_impact_v1_terminal_tablet_get(
        self,
        archetype: Optional[StrictStr] = None,
        verbose: Optional[StrictBool] = None,
        duration: Optional[Union[StrictFloat, StrictInt]] = None,
        criteria: Optional[List[StrictStr]] = None,
        **kwargs,
    ) -> object:
        """Tablet Impact  # noqa: E501

        # ‚úî Terminal impacts ### Features  üëÑ Verbose  üîÉ Auto-complete  üî® Embedded  The impacts values are fixüîå Usage  * ‚è∫Ô∏è  Given  * üìã Archetype  ‚è¨ Allocation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.tablet_impact_v1_terminal_tablet_get(archetype, verbose, duration, criteria, async_req=True)
        >>> result = thread.get()

        :param archetype:
        :type archetype: str
        :param verbose:
        :type verbose: bool
        :param duration:
        :type duration: float
        :param criteria:
        :type criteria: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the tablet_impact_v1_terminal_tablet_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)

        return self.tablet_impact_v1_terminal_tablet_get_with_http_info.raw_function(
            archetype,
            verbose,
            duration,
            criteria,
            **kwargs,
        )

    @validate_call
    def tablet_impact_v1_terminal_tablet_get_with_http_info(
        self,
        archetype: Optional[StrictStr] = None,
        verbose: Optional[StrictBool] = None,
        duration: Optional[Union[StrictFloat, StrictInt]] = None,
        criteria: Optional[List[StrictStr]] = None,
        **kwargs,
    ) -> ApiResponse:
        """Tablet Impact  # noqa: E501

        # ‚úî Terminal impacts ### Features  üëÑ Verbose  üîÉ Auto-complete  üî® Embedded  The impacts values are fixüîå Usage  * ‚è∫Ô∏è  Given  * üìã Archetype  ‚è¨ Allocation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.tablet_impact_v1_terminal_tablet_get_with_http_info(archetype, verbose, duration, criteria, async_req=True)
        >>> result = thread.get()

        :param archetype:
        :type archetype: str
        :param verbose:
        :type verbose: bool
        :param duration:
        :type duration: float
        :param criteria:
        :type criteria: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'archetype',
            'verbose',
            'duration',
            'criteria'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tablet_impact_v1_terminal_tablet_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats: Dict[str, str] = {}

        # process the path parameters
        _path_params: Dict[str, str] = {}

        # process the query parameters
        _query_params: List[Tuple[str, str]] = []
        if _params.get('archetype') is not None:  # noqa: E501
            _query_params.append(('archetype', _params['archetype']))

        if _params.get('verbose') is not None:  # noqa: E501
            _query_params.append(('verbose', _params['verbose']))

        if _params.get('duration') is not None:  # noqa: E501
            _query_params.append(('duration', _params['duration']))

        if _params.get('criteria') is not None:  # noqa: E501
            _query_params.append(('criteria', _params['criteria']))
            _collection_formats['criteria'] = 'multi'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings: List[str] = []  # noqa: E501

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/v1/terminal/tablet', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_call
    def tablet_impact_v1_terminal_tablet_post(
        self,
        verbose: Optional[StrictBool] = None,
        duration: Optional[Union[StrictFloat, StrictInt]] = None,
        archetype: Optional[StrictStr] = None,
        criteria: Optional[List[StrictStr]] = None,
        tablet: Optional[Tablet] = None,
        **kwargs,
    ) -> object:
        """Tablet Impact  # noqa: E501

        # ‚úî Terminal impacts ### Features  üëÑ Verbose  üîÉ Auto-complete  üî® Embedded  The impacts values are fixüîå Usage  * ‚è∫Ô∏è  Given  * üìã Archetype  ‚è¨ Allocation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.tablet_impact_v1_terminal_tablet_post(verbose, duration, archetype, criteria, tablet, async_req=True)
        >>> result = thread.get()

        :param verbose:
        :type verbose: bool
        :param duration:
        :type duration: float
        :param archetype:
        :type archetype: str
        :param criteria:
        :type criteria: List[str]
        :param tablet:
        :type tablet: Tablet
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the tablet_impact_v1_terminal_tablet_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)

        return self.tablet_impact_v1_terminal_tablet_post_with_http_info.raw_function(
            verbose,
            duration,
            archetype,
            criteria,
            tablet,
            **kwargs,
        )

    @validate_call
    def tablet_impact_v1_terminal_tablet_post_with_http_info(
        self,
        verbose: Optional[StrictBool] = None,
        duration: Optional[Union[StrictFloat, StrictInt]] = None,
        archetype: Optional[StrictStr] = None,
        criteria: Optional[List[StrictStr]] = None,
        tablet: Optional[Tablet] = None,
        **kwargs,
    ) -> ApiResponse:
        """Tablet Impact  # noqa: E501

        # ‚úî Terminal impacts ### Features  üëÑ Verbose  üîÉ Auto-complete  üî® Embedded  The impacts values are fixüîå Usage  * ‚è∫Ô∏è  Given  * üìã Archetype  ‚è¨ Allocation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.tablet_impact_v1_terminal_tablet_post_with_http_info(verbose, duration, archetype, criteria, tablet, async_req=True)
        >>> result = thread.get()

        :param verbose:
        :type verbose: bool
        :param duration:
        :type duration: float
        :param archetype:
        :type archetype: str
        :param criteria:
        :type criteria: List[str]
        :param tablet:
        :type tablet: Tablet
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'verbose',
            'duration',
            'archetype',
            'criteria',
            'tablet'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tablet_impact_v1_terminal_tablet_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats: Dict[str, str] = {}

        # process the path parameters
        _path_params: Dict[str, str] = {}

        # process the query parameters
        _query_params: List[Tuple[str, str]] = []
        if _params.get('verbose') is not None:  # noqa: E501
            _query_params.append(('verbose', _params['verbose']))

        if _params.get('duration') is not None:  # noqa: E501
            _query_params.append(('duration', _params['duration']))

        if _params.get('archetype') is not None:  # noqa: E501
            _query_params.append(('archetype', _params['archetype']))

        if _params.get('criteria') is not None:  # noqa: E501
            _query_params.append(('criteria', _params['criteria']))
            _collection_formats['criteria'] = 'multi'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        # process the body parameter
        _body_params = None
        if _params['tablet'] is not None:
            _body_params = _params['tablet']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings: List[str] = []  # noqa: E501

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/v1/terminal/tablet', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_call
    def television_get_all_archetype_name_v1_terminal_television_archetypes_get(
        self,
        **kwargs,
    ) -> object:
        """Television Get All Archetype Name  # noqa: E501

        # ‚úîÔ∏è Get all the available user terminal archetype for a given user terminal name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.television_get_all_archetype_name_v1_terminal_television_archetypes_get(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the television_get_all_archetype_name_v1_terminal_television_archetypes_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)

        return self.television_get_all_archetype_name_v1_terminal_television_archetypes_get_with_http_info.raw_function(
            **kwargs,
        )

    @validate_call
    def television_get_all_archetype_name_v1_terminal_television_archetypes_get_with_http_info(
        self,
        **kwargs,
    ) -> ApiResponse:
        """Television Get All Archetype Name  # noqa: E501

        # ‚úîÔ∏è Get all the available user terminal archetype for a given user terminal name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.television_get_all_archetype_name_v1_terminal_television_archetypes_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method television_get_all_archetype_name_v1_terminal_television_archetypes_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats: Dict[str, str] = {}

        # process the path parameters
        _path_params: Dict[str, str] = {}

        # process the query parameters
        _query_params: List[Tuple[str, str]] = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings: List[str] = []  # noqa: E501

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }

        return self.api_client.call_api(
            '/v1/terminal/television/archetypes', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_call
    def television_get_archetype_config_v1_terminal_television_archetype_config_get(
        self,
        archetype: StrictStr,
        **kwargs,
    ) -> object:
        """Television Get Archetype Config  # noqa: E501

        # ‚úîÔ∏è Get the configuration of a given archetype  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.television_get_archetype_config_v1_terminal_television_archetype_config_get(archetype, async_req=True)
        >>> result = thread.get()

        :param archetype: (required)
        :type archetype: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the television_get_archetype_config_v1_terminal_television_archetype_config_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)

        return self.television_get_archetype_config_v1_terminal_television_archetype_config_get_with_http_info.raw_function(
            archetype,
            **kwargs,
        )

    @validate_call
    def television_get_archetype_config_v1_terminal_television_archetype_config_get_with_http_info(
        self,
        archetype: StrictStr,
        **kwargs,
    ) -> ApiResponse:
        """Television Get Archetype Config  # noqa: E501

        # ‚úîÔ∏è Get the configuration of a given archetype  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.television_get_archetype_config_v1_terminal_television_archetype_config_get_with_http_info(archetype, async_req=True)
        >>> result = thread.get()

        :param archetype: (required)
        :type archetype: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'archetype'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method television_get_archetype_config_v1_terminal_television_archetype_config_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats: Dict[str, str] = {}

        # process the path parameters
        _path_params: Dict[str, str] = {}

        # process the query parameters
        _query_params: List[Tuple[str, str]] = []
        if _params.get('archetype') is not None:  # noqa: E501
            _query_params.append(('archetype', _params['archetype']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings: List[str] = []  # noqa: E501

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/v1/terminal/television/archetype_config', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_call
    def television_impact_v1_terminal_television_get(
        self,
        archetype: Optional[StrictStr] = None,
        verbose: Optional[StrictBool] = None,
        duration: Optional[Union[StrictFloat, StrictInt]] = None,
        criteria: Optional[List[StrictStr]] = None,
        **kwargs,
    ) -> object:
        """Television Impact  # noqa: E501

        # ‚úî Terminal impacts ### Features  üëÑ Verbose  üîÉ Auto-complete  üî® Embedded  The impacts values are fixüîå Usage  * ‚è∫Ô∏è  Given  * üìã Archetype  ‚è¨ Allocation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.television_impact_v1_terminal_television_get(archetype, verbose, duration, criteria, async_req=True)
        >>> result = thread.get()

        :param archetype:
        :type archetype: str
        :param verbose:
        :type verbose: bool
        :param duration:
        :type duration: float
        :param criteria:
        :type criteria: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the television_impact_v1_terminal_television_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)

        return self.television_impact_v1_terminal_television_get_with_http_info.raw_function(
            archetype,
            verbose,
            duration,
            criteria,
            **kwargs,
        )

    @validate_call
    def television_impact_v1_terminal_television_get_with_http_info(
        self,
        archetype: Optional[StrictStr] = None,
        verbose: Optional[StrictBool] = None,
        duration: Optional[Union[StrictFloat, StrictInt]] = None,
        criteria: Optional[List[StrictStr]] = None,
        **kwargs,
    ) -> ApiResponse:
        """Television Impact  # noqa: E501

        # ‚úî Terminal impacts ### Features  üëÑ Verbose  üîÉ Auto-complete  üî® Embedded  The impacts values are fixüîå Usage  * ‚è∫Ô∏è  Given  * üìã Archetype  ‚è¨ Allocation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.television_impact_v1_terminal_television_get_with_http_info(archetype, verbose, duration, criteria, async_req=True)
        >>> result = thread.get()

        :param archetype:
        :type archetype: str
        :param verbose:
        :type verbose: bool
        :param duration:
        :type duration: float
        :param criteria:
        :type criteria: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'archetype',
            'verbose',
            'duration',
            'criteria'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method television_impact_v1_terminal_television_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats: Dict[str, str] = {}

        # process the path parameters
        _path_params: Dict[str, str] = {}

        # process the query parameters
        _query_params: List[Tuple[str, str]] = []
        if _params.get('archetype') is not None:  # noqa: E501
            _query_params.append(('archetype', _params['archetype']))

        if _params.get('verbose') is not None:  # noqa: E501
            _query_params.append(('verbose', _params['verbose']))

        if _params.get('duration') is not None:  # noqa: E501
            _query_params.append(('duration', _params['duration']))

        if _params.get('criteria') is not None:  # noqa: E501
            _query_params.append(('criteria', _params['criteria']))
            _collection_formats['criteria'] = 'multi'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings: List[str] = []  # noqa: E501

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/v1/terminal/television', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_call
    def television_impact_v1_terminal_television_post(
        self,
        verbose: Optional[StrictBool] = None,
        duration: Optional[Union[StrictFloat, StrictInt]] = None,
        archetype: Optional[StrictStr] = None,
        criteria: Optional[List[StrictStr]] = None,
        television: Optional[Television] = None,
        **kwargs,
    ) -> object:
        """Television Impact  # noqa: E501

        # ‚úî Terminal impacts ### Features  üëÑ Verbose  üîÉ Auto-complete  üî® Embedded  The impacts values are fixüîå Usage  * ‚è∫Ô∏è  Given  * üìã Archetype  ‚è¨ Allocation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.television_impact_v1_terminal_television_post(verbose, duration, archetype, criteria, television, async_req=True)
        >>> result = thread.get()

        :param verbose:
        :type verbose: bool
        :param duration:
        :type duration: float
        :param archetype:
        :type archetype: str
        :param criteria:
        :type criteria: List[str]
        :param television:
        :type television: Television
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the television_impact_v1_terminal_television_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)

        return self.television_impact_v1_terminal_television_post_with_http_info.raw_function(
            verbose,
            duration,
            archetype,
            criteria,
            television,
            **kwargs,
        )

    @validate_call
    def television_impact_v1_terminal_television_post_with_http_info(
        self,
        verbose: Optional[StrictBool] = None,
        duration: Optional[Union[StrictFloat, StrictInt]] = None,
        archetype: Optional[StrictStr] = None,
        criteria: Optional[List[StrictStr]] = None,
        television: Optional[Television] = None,
        **kwargs,
    ) -> ApiResponse:
        """Television Impact  # noqa: E501

        # ‚úî Terminal impacts ### Features  üëÑ Verbose  üîÉ Auto-complete  üî® Embedded  The impacts values are fixüîå Usage  * ‚è∫Ô∏è  Given  * üìã Archetype  ‚è¨ Allocation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.television_impact_v1_terminal_television_post_with_http_info(verbose, duration, archetype, criteria, television, async_req=True)
        >>> result = thread.get()

        :param verbose:
        :type verbose: bool
        :param duration:
        :type duration: float
        :param archetype:
        :type archetype: str
        :param criteria:
        :type criteria: List[str]
        :param television:
        :type television: Television
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'verbose',
            'duration',
            'archetype',
            'criteria',
            'television'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method television_impact_v1_terminal_television_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats: Dict[str, str] = {}

        # process the path parameters
        _path_params: Dict[str, str] = {}

        # process the query parameters
        _query_params: List[Tuple[str, str]] = []
        if _params.get('verbose') is not None:  # noqa: E501
            _query_params.append(('verbose', _params['verbose']))

        if _params.get('duration') is not None:  # noqa: E501
            _query_params.append(('duration', _params['duration']))

        if _params.get('archetype') is not None:  # noqa: E501
            _query_params.append(('archetype', _params['archetype']))

        if _params.get('criteria') is not None:  # noqa: E501
            _query_params.append(('criteria', _params['criteria']))
            _collection_formats['criteria'] = 'multi'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        # process the body parameter
        _body_params = None
        if _params['television'] is not None:
            _body_params = _params['television']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings: List[str] = []  # noqa: E501

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/v1/terminal/television', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_call
    def terminal_get_all_categories_v1_terminal_all_get(
        self,
        **kwargs,
    ) -> object:
        """Terminal Get All Categories  # noqa: E501

        # ‚úîÔ∏è Get all the available user terminal router  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.terminal_get_all_categories_v1_terminal_all_get(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the terminal_get_all_categories_v1_terminal_all_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)

        return self.terminal_get_all_categories_v1_terminal_all_get_with_http_info.raw_function(
            **kwargs,
        )

    @validate_call
    def terminal_get_all_categories_v1_terminal_all_get_with_http_info(
        self,
        **kwargs,
    ) -> ApiResponse:
        """Terminal Get All Categories  # noqa: E501

        # ‚úîÔ∏è Get all the available user terminal router  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.terminal_get_all_categories_v1_terminal_all_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method terminal_get_all_categories_v1_terminal_all_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats: Dict[str, str] = {}

        # process the path parameters
        _path_params: Dict[str, str] = {}

        # process the query parameters
        _query_params: List[Tuple[str, str]] = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings: List[str] = []  # noqa: E501

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }

        return self.api_client.call_api(
            '/v1/terminal/all', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
