//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * CodeDetectionAPI - Technical Language Processing
 * An API to be used specifically for generating TLP Server Code and Models
 *
 * The version of the OpenAPI document: 1.0
 * Contact: developers@runtime.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    TLPInputPrior,
    TLPInputPriorFromJSON,
    TLPInputPriorFromJSONTyped,
    TLPInputPriorToJSON,
} from './';

/**
 * The class where a developer will specify the value of the raw string queued for technical language processing. This contains a required property, "value", accompanied by two optional properties, "prior" and "id". Prior enables a developer to provide metadata used to assist in processing and the ID is a way for a developer to uniquely identify an input upon returning from the /tlp endpoint.
 * 
 * NOTE: "prior" currently does not carry any weight in the processing pipeline, however this is subject to change.
 * @export
 * @interface TLPInput
 */
export interface TLPInput {
    /**
     * The raw text queued for technical language processing.
     * @type {string}
     * @memberof TLPInput
     */
    value: string;
    /**
     * 
     * @type {TLPInputPrior}
     * @memberof TLPInput
     */
    prior?: TLPInputPrior;
    /**
     * An optional ID provided by the developer used to uniquely identify this incoming string. 
     * @type {string}
     * @memberof TLPInput
     */
    id?: string;
}

export function TLPInputFromJSON(json: any): TLPInput {
    return TLPInputFromJSONTyped(json, false);
}

export function TLPInputFromJSONTyped(json: any, ignoreDiscriminator: boolean): TLPInput {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'value': json['value'],
        'prior': !exists(json, 'prior') ? undefined : TLPInputPriorFromJSON(json['prior']),
        'id': !exists(json, 'id') ? undefined : json['id'],
    };
}

export function TLPInputToJSON(value?: TLPInput | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'value': value.value,
        'prior': TLPInputPriorToJSON(value.prior),
        'id': value.id,
    };
}


