//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * CodeDetectionAPI - Technical Language Processing
 * An API to be used specifically for generating TLP Server Code and Models
 *
 * The version of the OpenAPI document: 1.0
 * Contact: developers@runtime.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    TLPLanguages,
    TLPLanguagesFromJSON,
    TLPLanguagesFromJSONTyped,
    TLPLanguagesToJSON,
} from './';

/**
 * An optional class that can be used by a developer to provide preliminary information about what they believe a specific string to be: code or text, and if code, optionally they can provide language predictions.
 * 
 * The first optional property is "naturalLanguage", which is a float between 0-1 that represents the likelihood a string is natural language (1.0) or technical language (0.0).
 * 
 * The second optional property is "langauges"... TODO: Please update this description...
 * @export
 * @interface TLPInputPrior
 */
export interface TLPInputPrior {
    /**
     * A float between 0-1 that represents the likelihood a string is natural language (1.0) or technical language (0.0).
     * @type {number}
     * @memberof TLPInputPrior
     */
    naturalLanguage?: number;
    /**
     * 
     * @type {TLPLanguages}
     * @memberof TLPInputPrior
     */
    languages?: TLPLanguages;
}

export function TLPInputPriorFromJSON(json: any): TLPInputPrior {
    return TLPInputPriorFromJSONTyped(json, false);
}

export function TLPInputPriorFromJSONTyped(json: any, ignoreDiscriminator: boolean): TLPInputPrior {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'naturalLanguage': !exists(json, 'naturalLanguage') ? undefined : json['naturalLanguage'],
        'languages': !exists(json, 'languages') ? undefined : TLPLanguagesFromJSON(json['languages']),
    };
}

export function TLPInputPriorToJSON(value?: TLPInputPrior | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'naturalLanguage': value.naturalLanguage,
        'languages': TLPLanguagesToJSON(value.languages),
    };
}


