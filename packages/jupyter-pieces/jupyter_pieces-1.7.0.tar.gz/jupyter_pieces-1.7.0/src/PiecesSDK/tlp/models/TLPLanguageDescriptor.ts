//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * CodeDetectionAPI - Technical Language Processing
 * An API to be used specifically for generating TLP Server Code and Models
 *
 * The version of the OpenAPI document: 1.0
 * Contact: developers@runtime.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    TLPLanguageFamilyEnum,
    TLPLanguageFamilyEnumFromJSON,
    TLPLanguageFamilyEnumFromJSONTyped,
    TLPLanguageFamilyEnumToJSON,
} from './';

/**
 * name here is the key used to represent this class within the LanguageMap model.
 * @export
 * @interface TLPLanguageDescriptor
 */
export interface TLPLanguageDescriptor {
    /**
     * 
     * @type {TLPLanguageFamilyEnum}
     * @memberof TLPLanguageDescriptor
     */
    family: TLPLanguageFamilyEnum;
    /**
     * 
     * @type {string}
     * @memberof TLPLanguageDescriptor
     */
    readable: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof TLPLanguageDescriptor
     */
    alternatives: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof TLPLanguageDescriptor
     */
    name: string;
}

export function TLPLanguageDescriptorFromJSON(json: any): TLPLanguageDescriptor {
    return TLPLanguageDescriptorFromJSONTyped(json, false);
}

export function TLPLanguageDescriptorFromJSONTyped(json: any, ignoreDiscriminator: boolean): TLPLanguageDescriptor {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'family': TLPLanguageFamilyEnumFromJSON(json['family']),
        'readable': json['readable'],
        'alternatives': json['alternatives'],
        'name': json['name'],
    };
}

export function TLPLanguageDescriptorToJSON(value?: TLPLanguageDescriptor | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'family': TLPLanguageFamilyEnumToJSON(value.family),
        'readable': value.readable,
        'alternatives': value.alternatives,
        'name': value.name,
    };
}


