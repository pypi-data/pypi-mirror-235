//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * CodeDetectionAPI - Technical Language Processing
 * An API to be used specifically for generating TLP Server Code and Models
 *
 * The version of the OpenAPI document: 1.0
 * Contact: developers@runtime.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    TLPLanguage,
    TLPLanguageFromJSON,
    TLPLanguageFromJSONTyped,
    TLPLanguageToJSON,
    TLPLanguages,
    TLPLanguagesFromJSON,
    TLPLanguagesFromJSONTyped,
    TLPLanguagesToJSON,
} from './';

/**
 * rankings here will be in the order of most likely prediction to least likely
 * 
 * distribution here will be in order to our most likely prediction to least likely.
 * 
 * result will be the top result. in our distribution.
 * @export
 * @interface TLPCodeClassification
 */
export interface TLPCodeClassification {
    /**
     * 
     * @type {TLPLanguage}
     * @memberof TLPCodeClassification
     */
    result: TLPLanguage;
    /**
     * 
     * @type {TLPLanguages}
     * @memberof TLPCodeClassification
     */
    rankings: TLPLanguages;
    /**
     * 
     * @type {TLPLanguages}
     * @memberof TLPCodeClassification
     */
    distribution: TLPLanguages;
    /**
     * The Tokenized input string. List of 32bit floats.
     * @type {Array<number>}
     * @memberof TLPCodeClassification
     */
    tokens: Array<number>;
    /**
     * This is the preprocessed string before tokenization.
     * @type {string}
     * @memberof TLPCodeClassification
     */
    normalized: string;
}

export function TLPCodeClassificationFromJSON(json: any): TLPCodeClassification {
    return TLPCodeClassificationFromJSONTyped(json, false);
}

export function TLPCodeClassificationFromJSONTyped(json: any, ignoreDiscriminator: boolean): TLPCodeClassification {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'result': TLPLanguageFromJSON(json['result']),
        'rankings': TLPLanguagesFromJSON(json['rankings']),
        'distribution': TLPLanguagesFromJSON(json['distribution']),
        'tokens': json['tokens'],
        'normalized': json['normalized'],
    };
}

export function TLPCodeClassificationToJSON(value?: TLPCodeClassification | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'result': TLPLanguageToJSON(value.result),
        'rankings': TLPLanguagesToJSON(value.rankings),
        'distribution': TLPLanguagesToJSON(value.distribution),
        'tokens': value.tokens,
        'normalized': value.normalized,
    };
}


