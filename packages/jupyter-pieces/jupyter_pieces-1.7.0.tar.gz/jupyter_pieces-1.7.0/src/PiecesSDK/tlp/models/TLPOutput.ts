//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * CodeDetectionAPI - Technical Language Processing
 * An API to be used specifically for generating TLP Server Code and Models
 *
 * The version of the OpenAPI document: 1.0
 * Contact: developers@runtime.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    TLPCodeClassification,
    TLPCodeClassificationFromJSON,
    TLPCodeClassificationFromJSONTyped,
    TLPCodeClassificationToJSON,
    TLPDescription,
    TLPDescriptionFromJSON,
    TLPDescriptionFromJSONTyped,
    TLPDescriptionToJSON,
    TLPLinks,
    TLPLinksFromJSON,
    TLPLinksFromJSONTyped,
    TLPLinksToJSON,
    TLPNaturalLanguage,
    TLPNaturalLanguageFromJSON,
    TLPNaturalLanguageFromJSONTyped,
    TLPNaturalLanguageToJSON,
    TLPSensitives,
    TLPSensitivesFromJSON,
    TLPSensitivesFromJSONTyped,
    TLPSensitivesToJSON,
    TLPTags,
    TLPTagsFromJSON,
    TLPTagsFromJSONTyped,
    TLPTagsToJSON,
} from './';

/**
 * id optional, and will be present if provided in the input.
 * @export
 * @interface TLPOutput
 */
export interface TLPOutput {
    /**
     * 
     * @type {string}
     * @memberof TLPOutput
     */
    id?: string;
    /**
     * 
     * @type {TLPNaturalLanguage}
     * @memberof TLPOutput
     */
    naturalLanguage: TLPNaturalLanguage;
    /**
     * 
     * @type {TLPCodeClassification}
     * @memberof TLPOutput
     */
    codeClassification: TLPCodeClassification;
    /**
     * 
     * @type {TLPTags}
     * @memberof TLPOutput
     */
    tags: TLPTags;
    /**
     * 
     * @type {TLPSensitives}
     * @memberof TLPOutput
     */
    sensitives: TLPSensitives;
    /**
     * 
     * @type {TLPLinks}
     * @memberof TLPOutput
     */
    links: TLPLinks;
    /**
     * 
     * @type {TLPDescription}
     * @memberof TLPOutput
     */
    description: TLPDescription;
}

export function TLPOutputFromJSON(json: any): TLPOutput {
    return TLPOutputFromJSONTyped(json, false);
}

export function TLPOutputFromJSONTyped(json: any, ignoreDiscriminator: boolean): TLPOutput {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'naturalLanguage': TLPNaturalLanguageFromJSON(json['naturalLanguage']),
        'codeClassification': TLPCodeClassificationFromJSON(json['codeClassification']),
        'tags': TLPTagsFromJSON(json['tags']),
        'sensitives': TLPSensitivesFromJSON(json['sensitives']),
        'links': TLPLinksFromJSON(json['links']),
        'description': TLPDescriptionFromJSON(json['description']),
    };
}

export function TLPOutputToJSON(value?: TLPOutput | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'naturalLanguage': TLPNaturalLanguageToJSON(value.naturalLanguage),
        'codeClassification': TLPCodeClassificationToJSON(value.codeClassification),
        'tags': TLPTagsToJSON(value.tags),
        'sensitives': TLPSensitivesToJSON(value.sensitives),
        'links': TLPLinksToJSON(value.links),
        'description': TLPDescriptionToJSON(value.description),
    };
}


