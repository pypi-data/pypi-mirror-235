//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * CodeDetectionAPI - Technical Language Processing
 * An API to be used specifically for generating TLP Server Code and Models
 *
 * The version of the OpenAPI document: 1.0
 * Contact: developers@runtime.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    TLPInputs,
    TLPInputsFromJSON,
    TLPInputsToJSON,
    TLPOutputs,
    TLPOutputsFromJSON,
    TLPOutputsToJSON,
} from '../models';

export interface TlpRequest {
    tLPInputs?: TLPInputs;
}

/**
 * 
 */
export class TLPApi extends runtime.BaseAPI {

    /**
     * This is the main Runtime Technical Language Processing (TLP) endpoint that accepts arbitrary text as its input and runs the text through a series of technical language processing pipelines to generate information and metadata about the input.
     * /tlp [POST]
     */
    async tlpRaw(requestParameters: TlpRequest): Promise<runtime.ApiResponse<TLPOutputs>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apikey"] = this.configuration.apiKey("apikey"); // apikey authentication
        }

        const response = await this.request({
            path: `/tlp`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TLPInputsToJSON(requestParameters.tLPInputs),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TLPOutputsFromJSON(jsonValue));
    }

    /**
     * This is the main Runtime Technical Language Processing (TLP) endpoint that accepts arbitrary text as its input and runs the text through a series of technical language processing pipelines to generate information and metadata about the input.
     * /tlp [POST]
     */
    async tlp(requestParameters: TlpRequest): Promise<TLPOutputs> {
        const response = await this.tlpRaw(requestParameters);
        return await response.value();
    }

}
