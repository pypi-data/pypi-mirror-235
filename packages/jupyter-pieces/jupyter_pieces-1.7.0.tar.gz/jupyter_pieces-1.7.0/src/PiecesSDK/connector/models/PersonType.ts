//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * This is an open API that holds specific endpoints as a base for Pieces Context Systems
 * The point of this API is to allow us to organize and Auto Generate Code Specific for Connected Applications - this will allow for stateful context abstraction & less code within the Core Connector
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EmbeddedModelSchema,
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    PersonBasicType,
    PersonBasicTypeFromJSON,
    PersonBasicTypeFromJSONTyped,
    PersonBasicTypeToJSON,
    UserProfile,
    UserProfileFromJSON,
    UserProfileFromJSONTyped,
    UserProfileToJSON,
} from './';

/**
 * basic or platform is absolutely required here.
 * basic: if provided is just information that has been either extracted from the piece or other wise added here.
 * platform: is a real Pieces User.(this user will also exist within the user's users collection. && if not then we will just use the data we have.)
 * @export
 * @interface PersonType
 */
export interface PersonType {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof PersonType
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {PersonBasicType}
     * @memberof PersonType
     */
    basic?: PersonBasicType;
    /**
     * 
     * @type {UserProfile}
     * @memberof PersonType
     */
    platform?: UserProfile;
}

export function PersonTypeFromJSON(json: any): PersonType {
    return PersonTypeFromJSONTyped(json, false);
}

export function PersonTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): PersonType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'schema': !exists(json, 'schema') ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'basic': !exists(json, 'basic') ? undefined : PersonBasicTypeFromJSON(json['basic']),
        'platform': !exists(json, 'platform') ? undefined : UserProfileFromJSON(json['platform']),
    };
}

export function PersonTypeToJSON(value?: PersonType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'schema': EmbeddedModelSchemaToJSON(value.schema),
        'basic': PersonBasicTypeToJSON(value.basic),
        'platform': UserProfileToJSON(value.platform),
    };
}


