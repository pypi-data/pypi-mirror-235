//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * This is an open API that holds specific endpoints as a base for Pieces Context Systems
 * The point of this API is to allow us to organize and Auto Generate Code Specific for Connected Applications - this will allow for stateful context abstraction & less code within the Core Connector
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AnchorTypeEnum,
    AnchorTypeEnumFromJSON,
    AnchorTypeEnumFromJSONTyped,
    AnchorTypeEnumToJSON,
    EmbeddedModelSchema,
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    FlattenedAnchorPoints,
    FlattenedAnchorPointsFromJSON,
    FlattenedAnchorPointsFromJSONTyped,
    FlattenedAnchorPointsToJSON,
    FlattenedAnnotations,
    FlattenedAnnotationsFromJSON,
    FlattenedAnnotationsFromJSONTyped,
    FlattenedAnnotationsToJSON,
    FlattenedAssets,
    FlattenedAssetsFromJSON,
    FlattenedAssetsFromJSONTyped,
    FlattenedAssetsToJSON,
    GroupedTimestamp,
    GroupedTimestampFromJSON,
    GroupedTimestampFromJSONTyped,
    GroupedTimestampToJSON,
} from './';

/**
 * 
 * @export
 * @interface Anchor
 */
export interface Anchor {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof Anchor
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {string}
     * @memberof Anchor
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Anchor
     */
    name?: string;
    /**
     * 
     * @type {AnchorTypeEnum}
     * @memberof Anchor
     */
    type: AnchorTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof Anchor
     */
    watch?: boolean;
    /**
     * 
     * @type {FlattenedAnchorPoints}
     * @memberof Anchor
     */
    points: FlattenedAnchorPoints;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof Anchor
     */
    created: GroupedTimestamp;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof Anchor
     */
    updated: GroupedTimestamp;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof Anchor
     */
    deleted?: GroupedTimestamp;
    /**
     * 
     * @type {FlattenedAssets}
     * @memberof Anchor
     */
    assets?: FlattenedAssets;
    /**
     * 
     * @type {FlattenedAnnotations}
     * @memberof Anchor
     */
    annotations?: FlattenedAnnotations;
}

export function AnchorFromJSON(json: any): Anchor {
    return AnchorFromJSONTyped(json, false);
}

export function AnchorFromJSONTyped(json: any, ignoreDiscriminator: boolean): Anchor {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'schema': !exists(json, 'schema') ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'id': json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'type': AnchorTypeEnumFromJSON(json['type']),
        'watch': !exists(json, 'watch') ? undefined : json['watch'],
        'points': FlattenedAnchorPointsFromJSON(json['points']),
        'created': GroupedTimestampFromJSON(json['created']),
        'updated': GroupedTimestampFromJSON(json['updated']),
        'deleted': !exists(json, 'deleted') ? undefined : GroupedTimestampFromJSON(json['deleted']),
        'assets': !exists(json, 'assets') ? undefined : FlattenedAssetsFromJSON(json['assets']),
        'annotations': !exists(json, 'annotations') ? undefined : FlattenedAnnotationsFromJSON(json['annotations']),
    };
}

export function AnchorToJSON(value?: Anchor | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'schema': EmbeddedModelSchemaToJSON(value.schema),
        'id': value.id,
        'name': value.name,
        'type': AnchorTypeEnumToJSON(value.type),
        'watch': value.watch,
        'points': FlattenedAnchorPointsToJSON(value.points),
        'created': GroupedTimestampToJSON(value.created),
        'updated': GroupedTimestampToJSON(value.updated),
        'deleted': GroupedTimestampToJSON(value.deleted),
        'assets': FlattenedAssetsToJSON(value.assets),
        'annotations': FlattenedAnnotationsToJSON(value.annotations),
    };
}


