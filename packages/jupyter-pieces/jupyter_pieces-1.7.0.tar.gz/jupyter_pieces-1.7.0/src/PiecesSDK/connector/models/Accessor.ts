//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * This is an open API that holds specific endpoints as a base for Pieces Context Systems
 * The point of this API is to allow us to organize and Auto Generate Code Specific for Connected Applications - this will allow for stateful context abstraction & less code within the Core Connector
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EmbeddedModelSchema,
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    FlattenedUserProfile,
    FlattenedUserProfileFromJSON,
    FlattenedUserProfileFromJSONTyped,
    FlattenedUserProfileToJSON,
} from './';

/**
 * This is used to determine who has accessed a share. and how many times.
 * 
 * The user here is the user that accessed this Piece.(optional) if undefined then this user was not logged in yet.
 * @export
 * @interface Accessor
 */
export interface Accessor {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof Accessor
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {string}
     * @memberof Accessor
     */
    id: string;
    /**
     * this is an os id.
     * @type {string}
     * @memberof Accessor
     */
    os: string;
    /**
     * 
     * @type {string}
     * @memberof Accessor
     */
    share: string;
    /**
     * how many times this user accessed this piece.
     * @type {number}
     * @memberof Accessor
     */
    count: number;
    /**
     * 
     * @type {FlattenedUserProfile}
     * @memberof Accessor
     */
    user?: FlattenedUserProfile;
}

export function AccessorFromJSON(json: any): Accessor {
    return AccessorFromJSONTyped(json, false);
}

export function AccessorFromJSONTyped(json: any, ignoreDiscriminator: boolean): Accessor {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'schema': !exists(json, 'schema') ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'id': json['id'],
        'os': json['os'],
        'share': json['share'],
        'count': json['count'],
        'user': !exists(json, 'user') ? undefined : FlattenedUserProfileFromJSON(json['user']),
    };
}

export function AccessorToJSON(value?: Accessor | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'schema': EmbeddedModelSchemaToJSON(value.schema),
        'id': value.id,
        'os': value.os,
        'share': value.share,
        'count': value.count,
        'user': FlattenedUserProfileToJSON(value.user),
    };
}


