//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    QGPTQuestionAnswer,
    QGPTQuestionAnswerFromJSON,
    QGPTQuestionAnswerFromJSONTyped,
    QGPTQuestionAnswerToJSON,
    RelevantQGPTSeeds,
    RelevantQGPTSeedsFromJSON,
    RelevantQGPTSeedsFromJSONTyped,
    RelevantQGPTSeedsToJSON,
} from './';

/**
 * Query is your followup question.
 * Relevant is the relevant snippets.
 * Answer is the previous answer.(that we are asking a follow up for.
 * 
 * Query and Answer are both optional here because, you may pass over relevant snippets over ahead of hand if you already have them to answer your questions.
 * @export
 * @interface QGPTFollowupInput
 */
export interface QGPTFollowupInput {
    /**
     * 
     * @type {string}
     * @memberof QGPTFollowupInput
     */
    query?: string;
    /**
     * 
     * @type {QGPTQuestionAnswer}
     * @memberof QGPTFollowupInput
     */
    answer?: QGPTQuestionAnswer;
    /**
     * 
     * @type {RelevantQGPTSeeds}
     * @memberof QGPTFollowupInput
     */
    relevant: RelevantQGPTSeeds;
}

export function QGPTFollowupInputFromJSON(json: any): QGPTFollowupInput {
    return QGPTFollowupInputFromJSONTyped(json, false);
}

export function QGPTFollowupInputFromJSONTyped(json: any, ignoreDiscriminator: boolean): QGPTFollowupInput {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'query': !exists(json, 'query') ? undefined : json['query'],
        'answer': !exists(json, 'answer') ? undefined : QGPTQuestionAnswerFromJSON(json['answer']),
        'relevant': RelevantQGPTSeedsFromJSON(json['relevant']),
    };
}

export function QGPTFollowupInputToJSON(value?: QGPTFollowupInput | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'query': value.query,
        'answer': QGPTQuestionAnswerToJSON(value.answer),
        'relevant': RelevantQGPTSeedsToJSON(value.relevant),
    };
}


