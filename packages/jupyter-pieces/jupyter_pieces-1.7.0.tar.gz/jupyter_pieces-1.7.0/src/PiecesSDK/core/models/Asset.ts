//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Activities,
    ActivitiesFromJSON,
    ActivitiesFromJSONTyped,
    ActivitiesToJSON,
    Anchors,
    AnchorsFromJSON,
    AnchorsFromJSONTyped,
    AnchorsToJSON,
    Annotations,
    AnnotationsFromJSON,
    AnnotationsFromJSONTyped,
    AnnotationsToJSON,
    AssetFormats,
    AssetFormatsFromJSON,
    AssetFormatsFromJSONTyped,
    AssetFormatsToJSON,
    EmbeddedModelSchema,
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    GroupedTimestamp,
    GroupedTimestampFromJSON,
    GroupedTimestampFromJSONTyped,
    GroupedTimestampToJSON,
    Hints,
    HintsFromJSON,
    HintsFromJSONTyped,
    HintsToJSON,
    MechanismEnum,
    MechanismEnumFromJSON,
    MechanismEnumFromJSONTyped,
    MechanismEnumToJSON,
    Persons,
    PersonsFromJSON,
    PersonsFromJSONTyped,
    PersonsToJSON,
    Preview,
    PreviewFromJSON,
    PreviewFromJSONTyped,
    PreviewToJSON,
    ReferencedFormat,
    ReferencedFormatFromJSON,
    ReferencedFormatFromJSONTyped,
    ReferencedFormatToJSON,
    Score,
    ScoreFromJSON,
    ScoreFromJSONTyped,
    ScoreToJSON,
    Sensitives,
    SensitivesFromJSON,
    SensitivesFromJSONTyped,
    SensitivesToJSON,
    Shares,
    SharesFromJSON,
    SharesFromJSONTyped,
    SharesToJSON,
    Tags,
    TagsFromJSON,
    TagsFromJSONTyped,
    TagsToJSON,
    Websites,
    WebsitesFromJSON,
    WebsitesFromJSONTyped,
    WebsitesToJSON,
} from './';

/**
 * An Asset Model representing data extracted from an Application connecting a group of data containing one or more Formats.
 * 
 * Below formats, preview, and original CAN to be pollinated (DAG Unsafe) because it is a root node and it's child leaf nodes will prevent cycles agressively.
 * @export
 * @interface Asset
 */
export interface Asset {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof Asset
     */
    schema?: EmbeddedModelSchema;
    /**
     * The globally available UID representing the asset in the Database, both locally and in the cloud.
     * @type {string}
     * @memberof Asset
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    creator: string;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof Asset
     */
    created: GroupedTimestamp;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof Asset
     */
    updated: GroupedTimestamp;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof Asset
     */
    synced?: GroupedTimestamp;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof Asset
     */
    deleted?: GroupedTimestamp;
    /**
     * 
     * @type {AssetFormats}
     * @memberof Asset
     */
    formats: AssetFormats;
    /**
     * 
     * @type {Preview}
     * @memberof Asset
     */
    preview: Preview;
    /**
     * 
     * @type {ReferencedFormat}
     * @memberof Asset
     */
    original: ReferencedFormat;
    /**
     * 
     * @type {Shares}
     * @memberof Asset
     */
    shares?: Shares;
    /**
     * 
     * @type {MechanismEnum}
     * @memberof Asset
     */
    mechanism: MechanismEnum;
    /**
     * 
     * @type {Websites}
     * @memberof Asset
     */
    websites?: Websites;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof Asset
     */
    interacted?: GroupedTimestamp;
    /**
     * 
     * @type {Tags}
     * @memberof Asset
     */
    tags?: Tags;
    /**
     * 
     * @type {Sensitives}
     * @memberof Asset
     */
    sensitives?: Sensitives;
    /**
     * 
     * @type {Persons}
     * @memberof Asset
     */
    persons?: Persons;
    /**
     * This is an optional boolean that will flag that this asset came from a currated collection.
     * @type {boolean}
     * @memberof Asset
     */
    curated?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Asset
     */
    discovered?: boolean;
    /**
     * 
     * @type {Activities}
     * @memberof Asset
     */
    activities?: Activities;
    /**
     * 
     * @type {Score}
     * @memberof Asset
     */
    score?: Score;
    /**
     * 
     * @type {boolean}
     * @memberof Asset
     */
    favorited?: boolean;
    /**
     * This will determine if this is a asset that the user did not explicitly save.
     * @type {boolean}
     * @memberof Asset
     */
    pseudo?: boolean;
    /**
     * 
     * @type {Annotations}
     * @memberof Asset
     */
    annotations?: Annotations;
    /**
     * 
     * @type {Hints}
     * @memberof Asset
     */
    hints?: Hints;
    /**
     * 
     * @type {Anchors}
     * @memberof Asset
     */
    anchors?: Anchors;
}

export function AssetFromJSON(json: any): Asset {
    return AssetFromJSONTyped(json, false);
}

export function AssetFromJSONTyped(json: any, ignoreDiscriminator: boolean): Asset {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'schema': !exists(json, 'schema') ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'id': json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'creator': json['creator'],
        'created': GroupedTimestampFromJSON(json['created']),
        'updated': GroupedTimestampFromJSON(json['updated']),
        'synced': !exists(json, 'synced') ? undefined : GroupedTimestampFromJSON(json['synced']),
        'deleted': !exists(json, 'deleted') ? undefined : GroupedTimestampFromJSON(json['deleted']),
        'formats': AssetFormatsFromJSON(json['formats']),
        'preview': PreviewFromJSON(json['preview']),
        'original': ReferencedFormatFromJSON(json['original']),
        'shares': !exists(json, 'shares') ? undefined : SharesFromJSON(json['shares']),
        'mechanism': MechanismEnumFromJSON(json['mechanism']),
        'websites': !exists(json, 'websites') ? undefined : WebsitesFromJSON(json['websites']),
        'interacted': !exists(json, 'interacted') ? undefined : GroupedTimestampFromJSON(json['interacted']),
        'tags': !exists(json, 'tags') ? undefined : TagsFromJSON(json['tags']),
        'sensitives': !exists(json, 'sensitives') ? undefined : SensitivesFromJSON(json['sensitives']),
        'persons': !exists(json, 'persons') ? undefined : PersonsFromJSON(json['persons']),
        'curated': !exists(json, 'curated') ? undefined : json['curated'],
        'discovered': !exists(json, 'discovered') ? undefined : json['discovered'],
        'activities': !exists(json, 'activities') ? undefined : ActivitiesFromJSON(json['activities']),
        'score': !exists(json, 'score') ? undefined : ScoreFromJSON(json['score']),
        'favorited': !exists(json, 'favorited') ? undefined : json['favorited'],
        'pseudo': !exists(json, 'pseudo') ? undefined : json['pseudo'],
        'annotations': !exists(json, 'annotations') ? undefined : AnnotationsFromJSON(json['annotations']),
        'hints': !exists(json, 'hints') ? undefined : HintsFromJSON(json['hints']),
        'anchors': !exists(json, 'anchors') ? undefined : AnchorsFromJSON(json['anchors']),
    };
}

export function AssetToJSON(value?: Asset | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'schema': EmbeddedModelSchemaToJSON(value.schema),
        'id': value.id,
        'name': value.name,
        'creator': value.creator,
        'created': GroupedTimestampToJSON(value.created),
        'updated': GroupedTimestampToJSON(value.updated),
        'synced': GroupedTimestampToJSON(value.synced),
        'deleted': GroupedTimestampToJSON(value.deleted),
        'formats': AssetFormatsToJSON(value.formats),
        'preview': PreviewToJSON(value.preview),
        'original': ReferencedFormatToJSON(value.original),
        'shares': SharesToJSON(value.shares),
        'mechanism': MechanismEnumToJSON(value.mechanism),
        'websites': WebsitesToJSON(value.websites),
        'interacted': GroupedTimestampToJSON(value.interacted),
        'tags': TagsToJSON(value.tags),
        'sensitives': SensitivesToJSON(value.sensitives),
        'persons': PersonsToJSON(value.persons),
        'curated': value.curated,
        'discovered': value.discovered,
        'activities': ActivitiesToJSON(value.activities),
        'score': ScoreToJSON(value.score),
        'favorited': value.favorited,
        'pseudo': value.pseudo,
        'annotations': AnnotationsToJSON(value.annotations),
        'hints': HintsToJSON(value.hints),
        'anchors': AnchorsToJSON(value.anchors),
    };
}


