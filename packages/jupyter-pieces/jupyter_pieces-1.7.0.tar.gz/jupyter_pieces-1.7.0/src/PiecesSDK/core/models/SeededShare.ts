//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AccessEnum,
    AccessEnumFromJSON,
    AccessEnumFromJSONTyped,
    AccessEnumToJSON,
    Asset,
    AssetFromJSON,
    AssetFromJSONTyped,
    AssetToJSON,
    Assets,
    AssetsFromJSON,
    AssetsFromJSONTyped,
    AssetsToJSON,
    EmbeddedModelSchema,
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    SeededUser,
    SeededUserFromJSON,
    SeededUserFromJSONTyped,
    SeededUserToJSON,
} from './';

/**
 *  required to pass in an asset or assets.
 * @export
 * @interface SeededShare
 */
export interface SeededShare {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof SeededShare
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {Asset}
     * @memberof SeededShare
     */
    asset?: Asset;
    /**
     * if private please specificy some users you want to share this with.
     * @type {Array<SeededUser>}
     * @memberof SeededShare
     */
    users?: Array<SeededUser>;
    /**
     * 
     * @type {AccessEnum}
     * @memberof SeededShare
     */
    access: AccessEnum;
    /**
     * 
     * @type {Assets}
     * @memberof SeededShare
     */
    assets?: Assets;
    /**
     * optional name, if it is available. and must be unique.
     * @type {string}
     * @memberof SeededShare
     */
    name?: string;
}

export function SeededShareFromJSON(json: any): SeededShare {
    return SeededShareFromJSONTyped(json, false);
}

export function SeededShareFromJSONTyped(json: any, ignoreDiscriminator: boolean): SeededShare {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'schema': !exists(json, 'schema') ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'asset': !exists(json, 'asset') ? undefined : AssetFromJSON(json['asset']),
        'users': !exists(json, 'users') ? undefined : ((json['users'] as Array<any>).map(SeededUserFromJSON)),
        'access': AccessEnumFromJSON(json['access']),
        'assets': !exists(json, 'assets') ? undefined : AssetsFromJSON(json['assets']),
        'name': !exists(json, 'name') ? undefined : json['name'],
    };
}

export function SeededShareToJSON(value?: SeededShare | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'schema': EmbeddedModelSchemaToJSON(value.schema),
        'asset': AssetToJSON(value.asset),
        'users': value.users === undefined ? undefined : ((value.users as Array<any>).map(SeededUserToJSON)),
        'access': AccessEnumToJSON(value.access),
        'assets': AssetsToJSON(value.assets),
        'name': value.name,
    };
}


