//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EmbeddedModelSchema,
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    ReferencedFormat,
    ReferencedFormatFromJSON,
    ReferencedFormatFromJSONTyped,
    ReferencedFormatToJSON,
} from './';

/**
 * This is a preview Model that will hold references to at minimum the base preview. which can be potentiall a base image, or also base text/code and then the oveylay is another format(image/text/code) that is 'overlayed' ontop of the base format.
 * @export
 * @interface Preview
 */
export interface Preview {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof Preview
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {ReferencedFormat}
     * @memberof Preview
     */
    base: ReferencedFormat;
    /**
     * 
     * @type {ReferencedFormat}
     * @memberof Preview
     */
    overlay?: ReferencedFormat;
}

export function PreviewFromJSON(json: any): Preview {
    return PreviewFromJSONTyped(json, false);
}

export function PreviewFromJSONTyped(json: any, ignoreDiscriminator: boolean): Preview {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'schema': !exists(json, 'schema') ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'base': ReferencedFormatFromJSON(json['base']),
        'overlay': !exists(json, 'overlay') ? undefined : ReferencedFormatFromJSON(json['overlay']),
    };
}

export function PreviewToJSON(value?: Preview | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'schema': EmbeddedModelSchemaToJSON(value.schema),
        'base': ReferencedFormatToJSON(value.base),
        'overlay': ReferencedFormatToJSON(value.overlay),
    };
}


