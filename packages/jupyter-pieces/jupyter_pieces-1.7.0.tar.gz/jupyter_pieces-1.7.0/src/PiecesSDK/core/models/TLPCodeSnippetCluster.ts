//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EmbeddedModelSchema,
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    TLPCodeSnippetClusterMember,
    TLPCodeSnippetClusterMemberFromJSON,
    TLPCodeSnippetClusterMemberFromJSONTyped,
    TLPCodeSnippetClusterMemberToJSON,
} from './';

/**
 * This is the model that gets returned from the SnippetClusteringReturnable. The text here is the representative (seed) of the cluster.
 * @export
 * @interface TLPCodeSnippetCluster
 */
export interface TLPCodeSnippetCluster {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof TLPCodeSnippetCluster
     */
    schema?: EmbeddedModelSchema;
    /**
     * The text here is the representative (seed) of the cluster.
     * @type {string}
     * @memberof TLPCodeSnippetCluster
     */
    text: string;
    /**
     * This was the size of the original cluster.
     * @type {number}
     * @memberof TLPCodeSnippetCluster
     */
    size: number;
    /**
     * This is the original index of the snippet, or where it was within the input array.
     * @type {number}
     * @memberof TLPCodeSnippetCluster
     */
    index: number;
    /**
     * This is all of the other snippets within the cluster that were NOT chosen to represent(seed), but are included in the cluster itself.
     * @type {Array<TLPCodeSnippetClusterMember>}
     * @memberof TLPCodeSnippetCluster
     */
    related?: Array<TLPCodeSnippetClusterMember>;
}

export function TLPCodeSnippetClusterFromJSON(json: any): TLPCodeSnippetCluster {
    return TLPCodeSnippetClusterFromJSONTyped(json, false);
}

export function TLPCodeSnippetClusterFromJSONTyped(json: any, ignoreDiscriminator: boolean): TLPCodeSnippetCluster {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'schema': !exists(json, 'schema') ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'text': json['text'],
        'size': json['size'],
        'index': json['index'],
        'related': !exists(json, 'related') ? undefined : ((json['related'] as Array<any>).map(TLPCodeSnippetClusterMemberFromJSON)),
    };
}

export function TLPCodeSnippetClusterToJSON(value?: TLPCodeSnippetCluster | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'schema': EmbeddedModelSchemaToJSON(value.schema),
        'text': value.text,
        'size': value.size,
        'index': value.index,
        'related': value.related === undefined ? undefined : ((value.related as Array<any>).map(TLPCodeSnippetClusterMemberToJSON)),
    };
}


