//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    QGPTQuestionInput,
    QGPTQuestionInputFromJSON,
    QGPTQuestionInputFromJSONTyped,
    QGPTQuestionInputToJSON,
    QGPTRelevanceInput,
    QGPTRelevanceInputFromJSON,
    QGPTRelevanceInputFromJSONTyped,
    QGPTRelevanceInputToJSON,
} from './';

/**
 * This is the input for the /qgpt/stream endpoint.
 * @export
 * @interface QGPTStreamInput
 */
export interface QGPTStreamInput {
    /**
     * 
     * @type {QGPTRelevanceInput}
     * @memberof QGPTStreamInput
     */
    relevance?: QGPTRelevanceInput;
    /**
     * 
     * @type {QGPTQuestionInput}
     * @memberof QGPTStreamInput
     */
    question?: QGPTQuestionInput;
    /**
     * This is an optional Id you can use to identify the result from your request.
     * @type {string}
     * @memberof QGPTStreamInput
     */
    request?: string;
    /**
     * 
     * @type {boolean}
     * @memberof QGPTStreamInput
     */
    stop?: boolean;
}

export function QGPTStreamInputFromJSON(json: any): QGPTStreamInput {
    return QGPTStreamInputFromJSONTyped(json, false);
}

export function QGPTStreamInputFromJSONTyped(json: any, ignoreDiscriminator: boolean): QGPTStreamInput {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'relevance': !exists(json, 'relevance') ? undefined : QGPTRelevanceInputFromJSON(json['relevance']),
        'question': !exists(json, 'question') ? undefined : QGPTQuestionInputFromJSON(json['question']),
        'request': !exists(json, 'request') ? undefined : json['request'],
        'stop': !exists(json, 'stop') ? undefined : json['stop'],
    };
}

export function QGPTStreamInputToJSON(value?: QGPTStreamInput | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'relevance': QGPTRelevanceInputToJSON(value.relevance),
        'question': QGPTQuestionInputToJSON(value.question),
        'request': value.request,
        'stop': value.stop,
    };
}


