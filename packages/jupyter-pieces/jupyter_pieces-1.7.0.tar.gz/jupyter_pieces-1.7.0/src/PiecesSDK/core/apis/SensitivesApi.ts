//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    SeededSensitive,
    SeededSensitiveFromJSON,
    SeededSensitiveToJSON,
    Sensitive,
    SensitiveFromJSON,
    SensitiveToJSON,
    Sensitives,
    SensitivesFromJSON,
    SensitivesToJSON,
} from '../models';

export interface SensitivesCreateNewSensitiveRequest {
    seededSensitive?: SeededSensitive;
}

export interface SensitivesDeleteSensitiveRequest {
    sensitive: string;
}

/**
 * 
 */
export class SensitivesApi extends runtime.BaseAPI {

    /**
     * This will create a new sensitive model.
     * /sensitives/create [POST]
     */
    async sensitivesCreateNewSensitiveRaw(requestParameters: SensitivesCreateNewSensitiveRequest): Promise<runtime.ApiResponse<Sensitive>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sensitives/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SeededSensitiveToJSON(requestParameters.seededSensitive),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SensitiveFromJSON(jsonValue));
    }

    /**
     * This will create a new sensitive model.
     * /sensitives/create [POST]
     */
    async sensitivesCreateNewSensitive(requestParameters: SensitivesCreateNewSensitiveRequest): Promise<Sensitive> {
        const response = await this.sensitivesCreateNewSensitiveRaw(requestParameters);
        return await response.value();
    }

    /**
     * This will delete a sensitive based on the sensative uuid.
     * /sensitives/{sensitive}/delete [POST]
     */
    async sensitivesDeleteSensitiveRaw(requestParameters: SensitivesDeleteSensitiveRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.sensitive === null || requestParameters.sensitive === undefined) {
            throw new runtime.RequiredError('sensitive','Required parameter requestParameters.sensitive was null or undefined when calling sensitivesDeleteSensitive.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sensitives/{sensitive}/delete`.replace(`{${"sensitive"}}`, encodeURIComponent(String(requestParameters.sensitive))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will delete a sensitive based on the sensative uuid.
     * /sensitives/{sensitive}/delete [POST]
     */
    async sensitivesDeleteSensitive(requestParameters: SensitivesDeleteSensitiveRequest): Promise<void> {
        await this.sensitivesDeleteSensitiveRaw(requestParameters);
    }

    /**
     * This will get a snapshot of all of the sensitives.
     * /sensitives [GET]
     */
    async sensitivesSnapshotRaw(): Promise<runtime.ApiResponse<Sensitives>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sensitives`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SensitivesFromJSON(jsonValue));
    }

    /**
     * This will get a snapshot of all of the sensitives.
     * /sensitives [GET]
     */
    async sensitivesSnapshot(): Promise<Sensitives> {
        const response = await this.sensitivesSnapshotRaw();
        return await response.value();
    }

}
