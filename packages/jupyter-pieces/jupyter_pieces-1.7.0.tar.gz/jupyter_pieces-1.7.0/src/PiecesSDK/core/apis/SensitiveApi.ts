//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Sensitive,
    SensitiveFromJSON,
    SensitiveToJSON,
} from '../models';

export interface SensitiveSnapshotRequest {
    sensitive: string;
}

export interface UpdateSensitiveRequest {
    sensitive?: Sensitive;
}

/**
 * 
 */
export class SensitiveApi extends runtime.BaseAPI {

    /**
     * This will get a specific sensitive via the sensative uuid.
     * /sensitive/{sensitive} [GET]
     */
    async sensitiveSnapshotRaw(requestParameters: SensitiveSnapshotRequest): Promise<runtime.ApiResponse<Sensitive>> {
        if (requestParameters.sensitive === null || requestParameters.sensitive === undefined) {
            throw new runtime.RequiredError('sensitive','Required parameter requestParameters.sensitive was null or undefined when calling sensitiveSnapshot.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sensitive/{sensitive}`.replace(`{${"sensitive"}}`, encodeURIComponent(String(requestParameters.sensitive))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SensitiveFromJSON(jsonValue));
    }

    /**
     * This will get a specific sensitive via the sensative uuid.
     * /sensitive/{sensitive} [GET]
     */
    async sensitiveSnapshot(requestParameters: SensitiveSnapshotRequest): Promise<Sensitive> {
        const response = await this.sensitiveSnapshotRaw(requestParameters);
        return await response.value();
    }

    /**
     * This will update a specific sensitive
     * /sensitive/update [POST]
     */
    async updateSensitiveRaw(requestParameters: UpdateSensitiveRequest): Promise<runtime.ApiResponse<Sensitive>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sensitive/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SensitiveToJSON(requestParameters.sensitive),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SensitiveFromJSON(jsonValue));
    }

    /**
     * This will update a specific sensitive
     * /sensitive/update [POST]
     */
    async updateSensitive(requestParameters: UpdateSensitiveRequest): Promise<Sensitive> {
        const response = await this.updateSensitiveRaw(requestParameters);
        return await response.value();
    }

}
