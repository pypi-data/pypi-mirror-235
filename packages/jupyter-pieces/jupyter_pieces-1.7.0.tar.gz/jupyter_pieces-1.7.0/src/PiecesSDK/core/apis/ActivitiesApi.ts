//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Activities,
    ActivitiesFromJSON,
    ActivitiesToJSON,
    Activity,
    ActivityFromJSON,
    ActivityToJSON,
    SeededActivity,
    SeededActivityFromJSON,
    SeededActivityToJSON,
} from '../models';

export interface ActivitiesCreateNewActivityRequest {
    transferables?: boolean;
    seededActivity?: SeededActivity;
}

export interface ActivitiesDeleteSpecificActivityRequest {
    activity: string;
}

export interface ActivitiesSnapshotRequest {
    transferables?: boolean;
    pseudo?: boolean;
}

/**
 * 
 */
export class ActivitiesApi extends runtime.BaseAPI {

    /**
     * This will create a new Activity.
     * /activities/create [POST]
     */
    async activitiesCreateNewActivityRaw(requestParameters: ActivitiesCreateNewActivityRequest): Promise<runtime.ApiResponse<Activity>> {
        const queryParameters: any = {};

        if (requestParameters.transferables !== undefined) {
            queryParameters['transferables'] = requestParameters.transferables;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/activities/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SeededActivityToJSON(requestParameters.seededActivity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ActivityFromJSON(jsonValue));
    }

    /**
     * This will create a new Activity.
     * /activities/create [POST]
     */
    async activitiesCreateNewActivity(requestParameters: ActivitiesCreateNewActivityRequest): Promise<Activity> {
        const response = await this.activitiesCreateNewActivityRaw(requestParameters);
        return await response.value();
    }

    /**
     * This will delete a specific activity.  important note: if we delete an activity: that is going to be a generic or a specific/ we will also delete its counter part i.e the specific. and vise versa, this ensures that the references are always cleaned.
     * /activities/{activity}/delete [POST]
     */
    async activitiesDeleteSpecificActivityRaw(requestParameters: ActivitiesDeleteSpecificActivityRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.activity === null || requestParameters.activity === undefined) {
            throw new runtime.RequiredError('activity','Required parameter requestParameters.activity was null or undefined when calling activitiesDeleteSpecificActivity.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/activities/{activity}/delete`.replace(`{${"activity"}}`, encodeURIComponent(String(requestParameters.activity))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will delete a specific activity.  important note: if we delete an activity: that is going to be a generic or a specific/ we will also delete its counter part i.e the specific. and vise versa, this ensures that the references are always cleaned.
     * /activities/{activity}/delete [POST]
     */
    async activitiesDeleteSpecificActivity(requestParameters: ActivitiesDeleteSpecificActivityRequest): Promise<void> {
        await this.activitiesDeleteSpecificActivityRaw(requestParameters);
    }

    /**
     * This will get a snapshot of all of the activities
     * /activities [GET]
     */
    async activitiesSnapshotRaw(requestParameters: ActivitiesSnapshotRequest): Promise<runtime.ApiResponse<Activities>> {
        const queryParameters: any = {};

        if (requestParameters.transferables !== undefined) {
            queryParameters['transferables'] = requestParameters.transferables;
        }

        if (requestParameters.pseudo !== undefined) {
            queryParameters['pseudo'] = requestParameters.pseudo;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/activities`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ActivitiesFromJSON(jsonValue));
    }

    /**
     * This will get a snapshot of all of the activities
     * /activities [GET]
     */
    async activitiesSnapshot(requestParameters: ActivitiesSnapshotRequest): Promise<Activities> {
        const response = await this.activitiesSnapshotRaw(requestParameters);
        return await response.value();
    }

}
