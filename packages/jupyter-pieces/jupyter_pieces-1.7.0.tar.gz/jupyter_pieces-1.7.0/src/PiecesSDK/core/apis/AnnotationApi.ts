//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Annotation,
    AnnotationFromJSON,
    AnnotationToJSON,
} from '../models';

export interface AnnotationSpecificAnnotationSnapshotRequest {
    annotation: string;
}

export interface AnnotationUpdateRequest {
    annotation?: Annotation;
}

/**
 * 
 */
export class AnnotationApi extends runtime.BaseAPI {

    /**
     * This will get a snapshot of a specific annotation.
     * /annotation/{annotation} [GET]
     */
    async annotationSpecificAnnotationSnapshotRaw(requestParameters: AnnotationSpecificAnnotationSnapshotRequest): Promise<runtime.ApiResponse<Annotation>> {
        if (requestParameters.annotation === null || requestParameters.annotation === undefined) {
            throw new runtime.RequiredError('annotation','Required parameter requestParameters.annotation was null or undefined when calling annotationSpecificAnnotationSnapshot.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/annotation/{annotation}`.replace(`{${"annotation"}}`, encodeURIComponent(String(requestParameters.annotation))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AnnotationFromJSON(jsonValue));
    }

    /**
     * This will get a snapshot of a specific annotation.
     * /annotation/{annotation} [GET]
     */
    async annotationSpecificAnnotationSnapshot(requestParameters: AnnotationSpecificAnnotationSnapshotRequest): Promise<Annotation> {
        const response = await this.annotationSpecificAnnotationSnapshotRaw(requestParameters);
        return await response.value();
    }

    /**
     * This will update a specific annotation.
     * /annotation/update [POST]
     */
    async annotationUpdateRaw(requestParameters: AnnotationUpdateRequest): Promise<runtime.ApiResponse<Annotation>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/annotation/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AnnotationToJSON(requestParameters.annotation),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AnnotationFromJSON(jsonValue));
    }

    /**
     * This will update a specific annotation.
     * /annotation/update [POST]
     */
    async annotationUpdate(requestParameters: AnnotationUpdateRequest): Promise<Annotation> {
        const response = await this.annotationUpdateRaw(requestParameters);
        return await response.value();
    }

}
