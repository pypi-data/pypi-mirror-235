//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    SeededWebsite,
    SeededWebsiteFromJSON,
    SeededWebsiteToJSON,
    Website,
    WebsiteFromJSON,
    WebsiteToJSON,
    Websites,
    WebsitesFromJSON,
    WebsitesToJSON,
} from '../models';

export interface WebsitesCreateNewWebsiteRequest {
    transferables?: boolean;
    seededWebsite?: SeededWebsite;
}

export interface WebsitesDeleteSpecificWebsiteRequest {
    website: string;
}

export interface WebsitesSnapshotRequest {
    transferables?: boolean;
}

/**
 * 
 */
export class WebsitesApi extends runtime.BaseAPI {

    /**
     * This will create a website and attach it to a specific asset.
     * /websites/create [POST]
     */
    async websitesCreateNewWebsiteRaw(requestParameters: WebsitesCreateNewWebsiteRequest): Promise<runtime.ApiResponse<Website>> {
        const queryParameters: any = {};

        if (requestParameters.transferables !== undefined) {
            queryParameters['transferables'] = requestParameters.transferables;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/websites/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SeededWebsiteToJSON(requestParameters.seededWebsite),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => WebsiteFromJSON(jsonValue));
    }

    /**
     * This will create a website and attach it to a specific asset.
     * /websites/create [POST]
     */
    async websitesCreateNewWebsite(requestParameters: WebsitesCreateNewWebsiteRequest): Promise<Website> {
        const response = await this.websitesCreateNewWebsiteRaw(requestParameters);
        return await response.value();
    }

    /**
     * This will delete a specific website!
     * /websites/{website}/delete [POST]
     */
    async websitesDeleteSpecificWebsiteRaw(requestParameters: WebsitesDeleteSpecificWebsiteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.website === null || requestParameters.website === undefined) {
            throw new runtime.RequiredError('website','Required parameter requestParameters.website was null or undefined when calling websitesDeleteSpecificWebsite.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/websites/{website}/delete`.replace(`{${"website"}}`, encodeURIComponent(String(requestParameters.website))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will delete a specific website!
     * /websites/{website}/delete [POST]
     */
    async websitesDeleteSpecificWebsite(requestParameters: WebsitesDeleteSpecificWebsiteRequest): Promise<void> {
        await this.websitesDeleteSpecificWebsiteRaw(requestParameters);
    }

    /**
     * This will get a snapshot of all your websites.
     * /websites [GET]
     */
    async websitesSnapshotRaw(requestParameters: WebsitesSnapshotRequest): Promise<runtime.ApiResponse<Websites>> {
        const queryParameters: any = {};

        if (requestParameters.transferables !== undefined) {
            queryParameters['transferables'] = requestParameters.transferables;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/websites`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => WebsitesFromJSON(jsonValue));
    }

    /**
     * This will get a snapshot of all your websites.
     * /websites [GET]
     */
    async websitesSnapshot(requestParameters: WebsitesSnapshotRequest): Promise<Websites> {
        const response = await this.websitesSnapshotRaw(requestParameters);
        return await response.value();
    }

}
