//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Activity,
    ActivityFromJSON,
    ActivityToJSON,
    FlattenedActivities,
    FlattenedActivitiesFromJSON,
    FlattenedActivitiesToJSON,
} from '../models';

export interface ActivitiesSpecificActivitySnapshotRequest {
    activity: string;
    transferables?: boolean;
}

export interface ActivityIdentifiersSnapshotRequest {
    pseudo?: boolean;
    activityFilterEnum?: ActivityIdentifiersSnapshotActivityFilterEnumEnum;
}

export interface ActivityUpdateRequest {
    transferables?: boolean;
    activity?: Activity;
}

/**
 * 
 */
export class ActivityApi extends runtime.BaseAPI {

    /**
     * This will attempt to get a specific activity.
     * /activity/{activity} [GET]
     */
    async activitiesSpecificActivitySnapshotRaw(requestParameters: ActivitiesSpecificActivitySnapshotRequest): Promise<runtime.ApiResponse<Activity>> {
        if (requestParameters.activity === null || requestParameters.activity === undefined) {
            throw new runtime.RequiredError('activity','Required parameter requestParameters.activity was null or undefined when calling activitiesSpecificActivitySnapshot.');
        }

        const queryParameters: any = {};

        if (requestParameters.transferables !== undefined) {
            queryParameters['transferables'] = requestParameters.transferables;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/activity/{activity}`.replace(`{${"activity"}}`, encodeURIComponent(String(requestParameters.activity))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ActivityFromJSON(jsonValue));
    }

    /**
     * This will attempt to get a specific activity.
     * /activity/{activity} [GET]
     */
    async activitiesSpecificActivitySnapshot(requestParameters: ActivitiesSpecificActivitySnapshotRequest): Promise<Activity> {
        const response = await this.activitiesSpecificActivitySnapshotRaw(requestParameters);
        return await response.value();
    }

    /**
     * This is going to return all the identifiers of the activity event in order of most recent -> oldest.
     * /activity/identifiers [GET]
     */
    async activityIdentifiersSnapshotRaw(requestParameters: ActivityIdentifiersSnapshotRequest): Promise<runtime.ApiResponse<FlattenedActivities>> {
        const queryParameters: any = {};

        if (requestParameters.pseudo !== undefined) {
            queryParameters['pseudo'] = requestParameters.pseudo;
        }

        if (requestParameters.activityFilterEnum !== undefined) {
            queryParameters['activity_filter_enum'] = requestParameters.activityFilterEnum;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/activity/identifiers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FlattenedActivitiesFromJSON(jsonValue));
    }

    /**
     * This is going to return all the identifiers of the activity event in order of most recent -> oldest.
     * /activity/identifiers [GET]
     */
    async activityIdentifiersSnapshot(requestParameters: ActivityIdentifiersSnapshotRequest): Promise<FlattenedActivities> {
        const response = await this.activityIdentifiersSnapshotRaw(requestParameters);
        return await response.value();
    }

    /**
     * this will update a specific activity.
     * /activity/update [POST]
     */
    async activityUpdateRaw(requestParameters: ActivityUpdateRequest): Promise<runtime.ApiResponse<Activity>> {
        const queryParameters: any = {};

        if (requestParameters.transferables !== undefined) {
            queryParameters['transferables'] = requestParameters.transferables;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/activity/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ActivityToJSON(requestParameters.activity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ActivityFromJSON(jsonValue));
    }

    /**
     * this will update a specific activity.
     * /activity/update [POST]
     */
    async activityUpdate(requestParameters: ActivityUpdateRequest): Promise<Activity> {
        const response = await this.activityUpdateRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum ActivityIdentifiersSnapshotActivityFilterEnumEnum {
    Created = 'CREATED',
    Updated = 'UPDATED',
    Deleted = 'DELETED',
    Referenced = 'REFERENCED'
}
