//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AnchorPoint,
    AnchorPointFromJSON,
    AnchorPointToJSON,
} from '../models';

export interface AnchorPointSpecificAnchorPointSnapshotRequest {
    anchorPoint: string;
    transferables?: boolean;
}

export interface AnchorPointUpdateRequest {
    transferables?: boolean;
    anchorPoint?: AnchorPoint;
}

/**
 * 
 */
export class AnchorPointApi extends runtime.BaseAPI {

    /**
     * This will get a snapshot of a single anchorPoint.
     * /anchor_point/{anchor_point} [GET]
     */
    async anchorPointSpecificAnchorPointSnapshotRaw(requestParameters: AnchorPointSpecificAnchorPointSnapshotRequest): Promise<runtime.ApiResponse<AnchorPoint>> {
        if (requestParameters.anchorPoint === null || requestParameters.anchorPoint === undefined) {
            throw new runtime.RequiredError('anchorPoint','Required parameter requestParameters.anchorPoint was null or undefined when calling anchorPointSpecificAnchorPointSnapshot.');
        }

        const queryParameters: any = {};

        if (requestParameters.transferables !== undefined) {
            queryParameters['transferables'] = requestParameters.transferables;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/anchor_point/{anchor_point}`.replace(`{${"anchor_point"}}`, encodeURIComponent(String(requestParameters.anchorPoint))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AnchorPointFromJSON(jsonValue));
    }

    /**
     * This will get a snapshot of a single anchorPoint.
     * /anchor_point/{anchor_point} [GET]
     */
    async anchorPointSpecificAnchorPointSnapshot(requestParameters: AnchorPointSpecificAnchorPointSnapshotRequest): Promise<AnchorPoint> {
        const response = await this.anchorPointSpecificAnchorPointSnapshotRaw(requestParameters);
        return await response.value();
    }

    /**
     * This will update a specific anchorPoint.
     * /anchor_point/update [POST]
     */
    async anchorPointUpdateRaw(requestParameters: AnchorPointUpdateRequest): Promise<runtime.ApiResponse<AnchorPoint>> {
        const queryParameters: any = {};

        if (requestParameters.transferables !== undefined) {
            queryParameters['transferables'] = requestParameters.transferables;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/anchor_point/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AnchorPointToJSON(requestParameters.anchorPoint),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AnchorPointFromJSON(jsonValue));
    }

    /**
     * This will update a specific anchorPoint.
     * /anchor_point/update [POST]
     */
    async anchorPointUpdate(requestParameters: AnchorPointUpdateRequest): Promise<AnchorPoint> {
        const response = await this.anchorPointUpdateRaw(requestParameters);
        return await response.value();
    }

}
