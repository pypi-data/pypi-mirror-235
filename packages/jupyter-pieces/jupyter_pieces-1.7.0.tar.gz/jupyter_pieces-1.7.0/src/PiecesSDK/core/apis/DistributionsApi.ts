//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Distribution,
    DistributionFromJSON,
    DistributionToJSON,
    Distributions,
    DistributionsFromJSON,
    DistributionsToJSON,
    SeededDistribution,
    SeededDistributionFromJSON,
    SeededDistributionToJSON,
} from '../models';

export interface DistributionsCreateNewDistributionRequest {
    seededDistribution?: SeededDistribution;
}

export interface DistributionsDeleteSpecificDistributionRequest {
    distribution: string;
}

/**
 * 
 */
export class DistributionsApi extends runtime.BaseAPI {

    /**
     * This will create a new distribution.
     * /distributions/create [POST]
     */
    async distributionsCreateNewDistributionRaw(requestParameters: DistributionsCreateNewDistributionRequest): Promise<runtime.ApiResponse<Distribution>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/distributions/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SeededDistributionToJSON(requestParameters.seededDistribution),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DistributionFromJSON(jsonValue));
    }

    /**
     * This will create a new distribution.
     * /distributions/create [POST]
     */
    async distributionsCreateNewDistribution(requestParameters: DistributionsCreateNewDistributionRequest): Promise<Distribution> {
        const response = await this.distributionsCreateNewDistributionRaw(requestParameters);
        return await response.value();
    }

    /**
     * This will delete a specific distribution.
     * /distributions/{distribution}/delete [POST]
     */
    async distributionsDeleteSpecificDistributionRaw(requestParameters: DistributionsDeleteSpecificDistributionRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.distribution === null || requestParameters.distribution === undefined) {
            throw new runtime.RequiredError('distribution','Required parameter requestParameters.distribution was null or undefined when calling distributionsDeleteSpecificDistribution.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/distributions/{distribution}/delete`.replace(`{${"distribution"}}`, encodeURIComponent(String(requestParameters.distribution))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will delete a specific distribution.
     * /distributions/{distribution}/delete [POST]
     */
    async distributionsDeleteSpecificDistribution(requestParameters: DistributionsDeleteSpecificDistributionRequest): Promise<void> {
        await this.distributionsDeleteSpecificDistributionRaw(requestParameters);
    }

    /**
     * This will get a specific snapshot of all our distributions.
     * /distributions [GET]
     */
    async distributionsSnapshotRaw(): Promise<runtime.ApiResponse<Distributions>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/distributions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DistributionsFromJSON(jsonValue));
    }

    /**
     * This will get a specific snapshot of all our distributions.
     * /distributions [GET]
     */
    async distributionsSnapshot(): Promise<Distributions> {
        const response = await this.distributionsSnapshotRaw();
        return await response.value();
    }

}
