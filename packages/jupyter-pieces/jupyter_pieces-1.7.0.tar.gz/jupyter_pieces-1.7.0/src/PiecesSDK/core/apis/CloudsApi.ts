//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Cloud,
    CloudFromJSON,
    CloudToJSON,
    Clouds,
    CloudsFromJSON,
    CloudsToJSON,
    UserProfile,
    UserProfileFromJSON,
    UserProfileToJSON,
} from '../models';

export interface CloudsConnectNewCloudRequest {
    userProfile?: UserProfile;
}

export interface CloudsDisconnectCloudRequest {
    cloud?: Cloud;
}

export interface CloudsReconnectCloudRequest {
    cloud?: Cloud;
}

/**
 * 
 */
export class CloudsApi extends runtime.BaseAPI {

    /**
     * This will attempt to connect to a specific users cloud.(Required that the current user is logged in.)
     * /clouds/connect [POST]
     */
    async cloudsConnectNewCloudRaw(requestParameters: CloudsConnectNewCloudRequest): Promise<runtime.ApiResponse<Cloud>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/clouds/connect`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserProfileToJSON(requestParameters.userProfile),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CloudFromJSON(jsonValue));
    }

    /**
     * This will attempt to connect to a specific users cloud.(Required that the current user is logged in.)
     * /clouds/connect [POST]
     */
    async cloudsConnectNewCloud(requestParameters: CloudsConnectNewCloudRequest): Promise<Cloud> {
        const response = await this.cloudsConnectNewCloudRaw(requestParameters);
        return await response.value();
    }

    /**
     * This will attempt to disconnect to a specific users cloud.
     * /clouds/disconnect [POST]
     */
    async cloudsDisconnectCloudRaw(requestParameters: CloudsDisconnectCloudRequest): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/clouds/disconnect`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CloudToJSON(requestParameters.cloud),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * This will attempt to disconnect to a specific users cloud.
     * /clouds/disconnect [POST]
     */
    async cloudsDisconnectCloud(requestParameters: CloudsDisconnectCloudRequest): Promise<string> {
        const response = await this.cloudsDisconnectCloudRaw(requestParameters);
        return await response.value();
    }

    /**
     * This will attempt to reconnect to a users cloud. This will ensure that we are connected to a users cloud and will ensure that all the data associated with a user\'s cloud is up-to-date.
     * /clouds/reconnect [POST]
     */
    async cloudsReconnectCloudRaw(requestParameters: CloudsReconnectCloudRequest): Promise<runtime.ApiResponse<Cloud>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/clouds/reconnect`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CloudToJSON(requestParameters.cloud),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CloudFromJSON(jsonValue));
    }

    /**
     * This will attempt to reconnect to a users cloud. This will ensure that we are connected to a users cloud and will ensure that all the data associated with a user\'s cloud is up-to-date.
     * /clouds/reconnect [POST]
     */
    async cloudsReconnectCloud(requestParameters: CloudsReconnectCloudRequest): Promise<Cloud> {
        const response = await this.cloudsReconnectCloudRaw(requestParameters);
        return await response.value();
    }

    /**
     * This is going to get a snapshot of all of the connected clouds.
     * /clouds [GET]
     */
    async cloudsSnapshotRaw(): Promise<runtime.ApiResponse<Clouds>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/clouds`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CloudsFromJSON(jsonValue));
    }

    /**
     * This is going to get a snapshot of all of the connected clouds.
     * /clouds [GET]
     */
    async cloudsSnapshot(): Promise<Clouds> {
        const response = await this.cloudsSnapshotRaw();
        return await response.value();
    }

}
