//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Cloud,
    CloudFromJSON,
    CloudToJSON,
    VersionSyncResponse,
    VersionSyncResponseFromJSON,
    VersionSyncResponseToJSON,
} from '../models';

export interface CloudSnapshotRequest {
    cloud: string;
}

export interface CloudUpdateRequest {
    cloud?: Cloud;
}

export interface CloudVersionSyncRequest {
    body?: string;
}

/**
 * 
 */
export class CloudApi extends runtime.BaseAPI {

    /**
     * This will get a snapshot of a specific cloud.
     * /cloud/{cloud} [GET]
     */
    async cloudSnapshotRaw(requestParameters: CloudSnapshotRequest): Promise<runtime.ApiResponse<Cloud>> {
        if (requestParameters.cloud === null || requestParameters.cloud === undefined) {
            throw new runtime.RequiredError('cloud','Required parameter requestParameters.cloud was null or undefined when calling cloudSnapshot.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cloud/{cloud}`.replace(`{${"cloud"}}`, encodeURIComponent(String(requestParameters.cloud))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CloudFromJSON(jsonValue));
    }

    /**
     * This will get a snapshot of a specific cloud.
     * /cloud/{cloud} [GET]
     */
    async cloudSnapshot(requestParameters: CloudSnapshotRequest): Promise<Cloud> {
        const response = await this.cloudSnapshotRaw(requestParameters);
        return await response.value();
    }

    /**
     * This will update a specific cloud.
     * /cloud/update [POST]
     */
    async cloudUpdateRaw(requestParameters: CloudUpdateRequest): Promise<runtime.ApiResponse<Cloud>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/cloud/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CloudToJSON(requestParameters.cloud),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CloudFromJSON(jsonValue));
    }

    /**
     * This will update a specific cloud.
     * /cloud/update [POST]
     */
    async cloudUpdate(requestParameters: CloudUpdateRequest): Promise<Cloud> {
        const response = await this.cloudUpdateRaw(requestParameters);
        return await response.value();
    }

    /**
     * This allows for sending local semver and retrieving information on whether it is compatible with cloud server version or needs an update. It also receives cloud server\'s semver
     * Version sync
     */
    async cloudVersionSyncRaw(requestParameters: CloudVersionSyncRequest): Promise<runtime.ApiResponse<VersionSyncResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/cloud/version-sync`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionSyncResponseFromJSON(jsonValue));
    }

    /**
     * This allows for sending local semver and retrieving information on whether it is compatible with cloud server version or needs an update. It also receives cloud server\'s semver
     * Version sync
     */
    async cloudVersionSync(requestParameters: CloudVersionSyncRequest): Promise<VersionSyncResponse> {
        const response = await this.cloudVersionSyncRaw(requestParameters);
        return await response.value();
    }

}
