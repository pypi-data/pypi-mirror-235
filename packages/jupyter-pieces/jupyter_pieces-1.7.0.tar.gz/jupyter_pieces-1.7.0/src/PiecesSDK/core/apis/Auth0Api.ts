//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Auth0User,
    Auth0UserFromJSON,
    Auth0UserToJSON,
    EmbeddedModelSchema,
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaToJSON,
    OAuthToken,
    OAuthTokenFromJSON,
    OAuthTokenToJSON,
    ResultedPKCE,
    ResultedPKCEFromJSON,
    ResultedPKCEToJSON,
} from '../models';

export interface Auth0LogoutRequest {
    clientId?: string;
    returnTo?: string;
}

export interface AuthorizeAuth0Request {
    audience: string;
    scope: Array<AuthorizeAuth0ScopeEnum>;
    responseType: AuthorizeAuth0ResponseTypeEnum;
    clientId: string;
    codeChallengeMethod: AuthorizeAuth0CodeChallengeMethodEnum;
    codeChallenge: string;
    responseMode: AuthorizeAuth0ResponseModeEnum;
    state?: string;
    redirectUri?: string;
    connection?: string;
    prompt?: string;
}

export interface ExchangeForAuth0TokenRequest {
    grantType: ExchangeForAuth0TokenGrantTypeEnum;
    clientId: string;
    code: string;
    redirectUri: string;
    codeVerifier: string;
    schema?: EmbeddedModelSchema;
    audience?: string;
}

/**
 * 
 */
export class Auth0Api extends runtime.BaseAPI {

    /**
     * https://auth0.com/docs/api/authentication#logout
     * https://auth.pieces.services/v2/logout [GET]
     */
    async auth0LogoutRaw(requestParameters: Auth0LogoutRequest): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        if (requestParameters.clientId !== undefined) {
            queryParameters['client_id'] = requestParameters.clientId;
        }

        if (requestParameters.returnTo !== undefined) {
            queryParameters['returnTo'] = requestParameters.returnTo;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/logout`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * https://auth0.com/docs/api/authentication#logout
     * https://auth.pieces.services/v2/logout [GET]
     */
    async auth0Logout(requestParameters: Auth0LogoutRequest): Promise<string> {
        const response = await this.auth0LogoutRaw(requestParameters);
        return await response.value();
    }

    /**
     * An endpoint that is used locally authenticate via a PKCE Flow.  Example https://auth.pieces.services /authorize?audience=https%3A%2F%2Fpieces.us.auth0.com%2Fapi%2Fv2%2F&scope=email+profile+offline_access+openid&response_type=code&client_id=9sW4Pa1LEjX67l6VO14u0207NLYeXnu1&redirect_uri=http%3A%2F%2Flocalhost%3A3000%2Fpkce%2Fresponse%2Fcode&code_challenge_method=S256&code_challenge=yxRssZxdfBpMigRmDxAety1QU72Bd5WnDUbtlsCZOnk&response_mode=form_post&state=4bd0b9a389b4b229602346c33913b4c3c199628a90011ab3a901302ab62b3832
     * https://auth.pieces.services/authorize [GET]
     */
    async authorizeAuth0Raw(requestParameters: AuthorizeAuth0Request): Promise<runtime.ApiResponse<ResultedPKCE>> {
        if (requestParameters.audience === null || requestParameters.audience === undefined) {
            throw new runtime.RequiredError('audience','Required parameter requestParameters.audience was null or undefined when calling authorizeAuth0.');
        }

        if (requestParameters.scope === null || requestParameters.scope === undefined) {
            throw new runtime.RequiredError('scope','Required parameter requestParameters.scope was null or undefined when calling authorizeAuth0.');
        }

        if (requestParameters.responseType === null || requestParameters.responseType === undefined) {
            throw new runtime.RequiredError('responseType','Required parameter requestParameters.responseType was null or undefined when calling authorizeAuth0.');
        }

        if (requestParameters.clientId === null || requestParameters.clientId === undefined) {
            throw new runtime.RequiredError('clientId','Required parameter requestParameters.clientId was null or undefined when calling authorizeAuth0.');
        }

        if (requestParameters.codeChallengeMethod === null || requestParameters.codeChallengeMethod === undefined) {
            throw new runtime.RequiredError('codeChallengeMethod','Required parameter requestParameters.codeChallengeMethod was null or undefined when calling authorizeAuth0.');
        }

        if (requestParameters.codeChallenge === null || requestParameters.codeChallenge === undefined) {
            throw new runtime.RequiredError('codeChallenge','Required parameter requestParameters.codeChallenge was null or undefined when calling authorizeAuth0.');
        }

        if (requestParameters.responseMode === null || requestParameters.responseMode === undefined) {
            throw new runtime.RequiredError('responseMode','Required parameter requestParameters.responseMode was null or undefined when calling authorizeAuth0.');
        }

        const queryParameters: any = {};

        if (requestParameters.audience !== undefined) {
            queryParameters['audience'] = requestParameters.audience;
        }

        if (requestParameters.scope) {
            queryParameters['scope'] = requestParameters.scope.join(runtime.COLLECTION_FORMATS["ssv"]);
        }

        if (requestParameters.responseType !== undefined) {
            queryParameters['response_type'] = requestParameters.responseType;
        }

        if (requestParameters.clientId !== undefined) {
            queryParameters['client_id'] = requestParameters.clientId;
        }

        if (requestParameters.state !== undefined) {
            queryParameters['state'] = requestParameters.state;
        }

        if (requestParameters.redirectUri !== undefined) {
            queryParameters['redirect_uri'] = requestParameters.redirectUri;
        }

        if (requestParameters.codeChallengeMethod !== undefined) {
            queryParameters['code_challenge_method'] = requestParameters.codeChallengeMethod;
        }

        if (requestParameters.codeChallenge !== undefined) {
            queryParameters['code_challenge'] = requestParameters.codeChallenge;
        }

        if (requestParameters.connection !== undefined) {
            queryParameters['connection'] = requestParameters.connection;
        }

        if (requestParameters.prompt !== undefined) {
            queryParameters['prompt'] = requestParameters.prompt;
        }

        if (requestParameters.responseMode !== undefined) {
            queryParameters['response_mode'] = requestParameters.responseMode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/authorize`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ResultedPKCEFromJSON(jsonValue));
    }

    /**
     * An endpoint that is used locally authenticate via a PKCE Flow.  Example https://auth.pieces.services /authorize?audience=https%3A%2F%2Fpieces.us.auth0.com%2Fapi%2Fv2%2F&scope=email+profile+offline_access+openid&response_type=code&client_id=9sW4Pa1LEjX67l6VO14u0207NLYeXnu1&redirect_uri=http%3A%2F%2Flocalhost%3A3000%2Fpkce%2Fresponse%2Fcode&code_challenge_method=S256&code_challenge=yxRssZxdfBpMigRmDxAety1QU72Bd5WnDUbtlsCZOnk&response_mode=form_post&state=4bd0b9a389b4b229602346c33913b4c3c199628a90011ab3a901302ab62b3832
     * https://auth.pieces.services/authorize [GET]
     */
    async authorizeAuth0(requestParameters: AuthorizeAuth0Request): Promise<ResultedPKCE> {
        const response = await this.authorizeAuth0Raw(requestParameters);
        return await response.value();
    }

    /**
     * An endpoint to generate a OAuth Token for an authentication flow. 
     * https://auth.pieces.services/oauth/token [POST]
     */
    async exchangeForAuth0TokenRaw(requestParameters: ExchangeForAuth0TokenRequest): Promise<runtime.ApiResponse<OAuthToken>> {
        if (requestParameters.grantType === null || requestParameters.grantType === undefined) {
            throw new runtime.RequiredError('grantType','Required parameter requestParameters.grantType was null or undefined when calling exchangeForAuth0Token.');
        }

        if (requestParameters.clientId === null || requestParameters.clientId === undefined) {
            throw new runtime.RequiredError('clientId','Required parameter requestParameters.clientId was null or undefined when calling exchangeForAuth0Token.');
        }

        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling exchangeForAuth0Token.');
        }

        if (requestParameters.redirectUri === null || requestParameters.redirectUri === undefined) {
            throw new runtime.RequiredError('redirectUri','Required parameter requestParameters.redirectUri was null or undefined when calling exchangeForAuth0Token.');
        }

        if (requestParameters.codeVerifier === null || requestParameters.codeVerifier === undefined) {
            throw new runtime.RequiredError('codeVerifier','Required parameter requestParameters.codeVerifier was null or undefined when calling exchangeForAuth0Token.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.schema !== undefined) {
            formParams.append('schema', new Blob([JSON.stringify(EmbeddedModelSchemaToJSON(requestParameters.schema))], { type: "application/json", }));
                    }

        if (requestParameters.grantType !== undefined) {
            formParams.append('grant_type', requestParameters.grantType as any);
        }

        if (requestParameters.clientId !== undefined) {
            formParams.append('client_id', requestParameters.clientId as any);
        }

        if (requestParameters.code !== undefined) {
            formParams.append('code', requestParameters.code as any);
        }

        if (requestParameters.redirectUri !== undefined) {
            formParams.append('redirect_uri', requestParameters.redirectUri as any);
        }

        if (requestParameters.codeVerifier !== undefined) {
            formParams.append('code_verifier', requestParameters.codeVerifier as any);
        }

        if (requestParameters.audience !== undefined) {
            formParams.append('audience', requestParameters.audience as any);
        }

        const response = await this.request({
            path: `/oauth/token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OAuthTokenFromJSON(jsonValue));
    }

    /**
     * An endpoint to generate a OAuth Token for an authentication flow. 
     * https://auth.pieces.services/oauth/token [POST]
     */
    async exchangeForAuth0Token(requestParameters: ExchangeForAuth0TokenRequest): Promise<OAuthToken> {
        const response = await this.exchangeForAuth0TokenRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get the users info from the Auth0 API
     * https://auth.pieces.services/userinfo [GET]
     */
    async getAuth0UserInfoRaw(): Promise<runtime.ApiResponse<Auth0User>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("auth0", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("auth0", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("auth0", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/userinfo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => Auth0UserFromJSON(jsonValue));
    }

    /**
     * Get the users info from the Auth0 API
     * https://auth.pieces.services/userinfo [GET]
     */
    async getAuth0UserInfo(): Promise<Auth0User> {
        const response = await this.getAuth0UserInfoRaw();
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum AuthorizeAuth0ScopeEnum {
    Openid = 'openid',
    Email = 'email',
    Profile = 'profile',
    OfflineAccess = 'offline_access'
}
/**
    * @export
    * @enum {string}
    */
export enum AuthorizeAuth0ResponseTypeEnum {
    Code = 'code'
}
/**
    * @export
    * @enum {string}
    */
export enum AuthorizeAuth0CodeChallengeMethodEnum {
    S256 = 'S256'
}
/**
    * @export
    * @enum {string}
    */
export enum AuthorizeAuth0ResponseModeEnum {
    FormPost = 'form_post',
    Fragment = 'fragment',
    Query = 'query',
    WebMessage = 'web_message'
}
/**
    * @export
    * @enum {string}
    */
export enum ExchangeForAuth0TokenGrantTypeEnum {
    RefreshToken = 'refresh_token',
    AuthorizationCode = 'authorization_code'
}
