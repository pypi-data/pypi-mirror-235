//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ExportedDatabase,
    ExportedDatabaseFromJSON,
    ExportedDatabaseToJSON,
} from '../models';

export interface DatabaseImportRequest {
    exportedDatabase?: ExportedDatabase;
}

/**
 * 
 */
export class DatabaseApi extends runtime.BaseAPI {

    /**
     * This is going to export your current database.
     * Your GET endpoint
     */
    async databaseExportRaw(): Promise<runtime.ApiResponse<ExportedDatabase>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/database/export`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ExportedDatabaseFromJSON(jsonValue));
    }

    /**
     * This is going to export your current database.
     * Your GET endpoint
     */
    async databaseExport(): Promise<ExportedDatabase> {
        const response = await this.databaseExportRaw();
        return await response.value();
    }

    /**
     * This is going to take in a database, and merge it with the current database. This will revert your database back to it original form if this request fails.
     * /database/import [POST]
     */
    async databaseImportRaw(requestParameters: DatabaseImportRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/database/import`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExportedDatabaseToJSON(requestParameters.exportedDatabase),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This is going to take in a database, and merge it with the current database. This will revert your database back to it original form if this request fails.
     * /database/import [POST]
     */
    async databaseImport(requestParameters: DatabaseImportRequest): Promise<void> {
        await this.databaseImportRaw(requestParameters);
    }

}
