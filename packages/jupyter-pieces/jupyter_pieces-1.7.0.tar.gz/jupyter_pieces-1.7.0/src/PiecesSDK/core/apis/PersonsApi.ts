//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Person,
    PersonFromJSON,
    PersonToJSON,
    Persons,
    PersonsFromJSON,
    PersonsToJSON,
    SeededPerson,
    SeededPersonFromJSON,
    SeededPersonToJSON,
} from '../models';

export interface PersonsCreateNewPersonRequest {
    transferables?: boolean;
    seededPerson?: SeededPerson;
}

export interface PersonsDeletePersonRequest {
    person: string;
}

export interface PersonsSnapshotRequest {
    transferables?: boolean;
}

export interface RemovePersonReferenceFromAssetRequest {
    person: string;
    asset: string;
}

/**
 * 
 */
export class PersonsApi extends runtime.BaseAPI {

    /**
     * This will create a new person.
     * /persons/create [POST]
     */
    async personsCreateNewPersonRaw(requestParameters: PersonsCreateNewPersonRequest): Promise<runtime.ApiResponse<Person>> {
        const queryParameters: any = {};

        if (requestParameters.transferables !== undefined) {
            queryParameters['transferables'] = requestParameters.transferables;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/persons/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SeededPersonToJSON(requestParameters.seededPerson),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PersonFromJSON(jsonValue));
    }

    /**
     * This will create a new person.
     * /persons/create [POST]
     */
    async personsCreateNewPerson(requestParameters: PersonsCreateNewPersonRequest): Promise<Person> {
        const response = await this.personsCreateNewPersonRaw(requestParameters);
        return await response.value();
    }

    /**
     * This will delete a specific person.
     * /persons/{person}/delete [POST]
     */
    async personsDeletePersonRaw(requestParameters: PersonsDeletePersonRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.person === null || requestParameters.person === undefined) {
            throw new runtime.RequiredError('person','Required parameter requestParameters.person was null or undefined when calling personsDeletePerson.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/persons/{person}/delete`.replace(`{${"person"}}`, encodeURIComponent(String(requestParameters.person))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will delete a specific person.
     * /persons/{person}/delete [POST]
     */
    async personsDeletePerson(requestParameters: PersonsDeletePersonRequest): Promise<void> {
        await this.personsDeletePersonRaw(requestParameters);
    }

    /**
     * This will get a snapshot of all of your people
     * /persons [GET]
     */
    async personsSnapshotRaw(requestParameters: PersonsSnapshotRequest): Promise<runtime.ApiResponse<Persons>> {
        const queryParameters: any = {};

        if (requestParameters.transferables !== undefined) {
            queryParameters['transferables'] = requestParameters.transferables;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/persons`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PersonsFromJSON(jsonValue));
    }

    /**
     * This will get a snapshot of all of your people
     * /persons [GET]
     */
    async personsSnapshot(requestParameters: PersonsSnapshotRequest): Promise<Persons> {
        const response = await this.personsSnapshotRaw(requestParameters);
        return await response.value();
    }

    /**
     * This will update both the asset and the person reference, that will remove a person from an asset(only the references).  This will NOT remove the person. This will NOT remove the asset. This will only update the references so that they are disconnected from one another.
     * /persons/{person}/assets/delete/{asset} [POST]
     */
    async removePersonReferenceFromAssetRaw(requestParameters: RemovePersonReferenceFromAssetRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.person === null || requestParameters.person === undefined) {
            throw new runtime.RequiredError('person','Required parameter requestParameters.person was null or undefined when calling removePersonReferenceFromAsset.');
        }

        if (requestParameters.asset === null || requestParameters.asset === undefined) {
            throw new runtime.RequiredError('asset','Required parameter requestParameters.asset was null or undefined when calling removePersonReferenceFromAsset.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/persons/{person}/assets/delete/{asset}`.replace(`{${"person"}}`, encodeURIComponent(String(requestParameters.person))).replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters.asset))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will update both the asset and the person reference, that will remove a person from an asset(only the references).  This will NOT remove the person. This will NOT remove the asset. This will only update the references so that they are disconnected from one another.
     * /persons/{person}/assets/delete/{asset} [POST]
     */
    async removePersonReferenceFromAsset(requestParameters: RemovePersonReferenceFromAssetRequest): Promise<void> {
        await this.removePersonReferenceFromAssetRaw(requestParameters);
    }

}
