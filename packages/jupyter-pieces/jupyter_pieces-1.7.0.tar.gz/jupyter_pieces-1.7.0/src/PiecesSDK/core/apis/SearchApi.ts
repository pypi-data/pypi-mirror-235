//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    SearchedAssets,
    SearchedAssetsFromJSON,
    SearchedAssetsToJSON,
    SeededAssetTags,
    SeededAssetTagsFromJSON,
    SeededAssetTagsToJSON,
} from '../models';

export interface FullTextSearchRequest {
    query?: string;
    pseudo?: boolean;
}

export interface NeuralCodeSearchRequest {
    query?: string;
    pseudo?: boolean;
}

export interface TagBasedSearchRequest {
    pseudo?: boolean;
    seededAssetTags?: SeededAssetTags;
}

/**
 * 
 */
export class SearchApi extends runtime.BaseAPI {

    /**
     * This will run FTS for exact search, and will NOT run fuzzy matching. This will only search the content within the 
     * /search/full_text [GET]
     */
    async fullTextSearchRaw(requestParameters: FullTextSearchRequest): Promise<runtime.ApiResponse<SearchedAssets>> {
        const queryParameters: any = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.pseudo !== undefined) {
            queryParameters['pseudo'] = requestParameters.pseudo;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/search/full_text`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchedAssetsFromJSON(jsonValue));
    }

    /**
     * This will run FTS for exact search, and will NOT run fuzzy matching. This will only search the content within the 
     * /search/full_text [GET]
     */
    async fullTextSearch(requestParameters: FullTextSearchRequest): Promise<SearchedAssets> {
        const response = await this.fullTextSearchRaw(requestParameters);
        return await response.value();
    }

    /**
     * This will run ncs on your assets. This will simply return FlattenedAssets, but will just be the assetuuids that match.
     * /search/neural_code [GET]
     */
    async neuralCodeSearchRaw(requestParameters: NeuralCodeSearchRequest): Promise<runtime.ApiResponse<SearchedAssets>> {
        const queryParameters: any = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.pseudo !== undefined) {
            queryParameters['pseudo'] = requestParameters.pseudo;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/search/neural_code`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchedAssetsFromJSON(jsonValue));
    }

    /**
     * This will run ncs on your assets. This will simply return FlattenedAssets, but will just be the assetuuids that match.
     * /search/neural_code [GET]
     */
    async neuralCodeSearch(requestParameters: NeuralCodeSearchRequest): Promise<SearchedAssets> {
        const response = await this.neuralCodeSearchRaw(requestParameters);
        return await response.value();
    }

    /**
     * This will run our tag based search, and return the assets that best match your passed in tags. This will simply return FlattenedAssets, but will just be the assetuuids that match.
     * /search/tag_based [POST]
     */
    async tagBasedSearchRaw(requestParameters: TagBasedSearchRequest): Promise<runtime.ApiResponse<SearchedAssets>> {
        const queryParameters: any = {};

        if (requestParameters.pseudo !== undefined) {
            queryParameters['pseudo'] = requestParameters.pseudo;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/search/tag_based`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SeededAssetTagsToJSON(requestParameters.seededAssetTags),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchedAssetsFromJSON(jsonValue));
    }

    /**
     * This will run our tag based search, and return the assets that best match your passed in tags. This will simply return FlattenedAssets, but will just be the assetuuids that match.
     * /search/tag_based [POST]
     */
    async tagBasedSearch(requestParameters: TagBasedSearchRequest): Promise<SearchedAssets> {
        const response = await this.tagBasedSearchRaw(requestParameters);
        return await response.value();
    }

}
