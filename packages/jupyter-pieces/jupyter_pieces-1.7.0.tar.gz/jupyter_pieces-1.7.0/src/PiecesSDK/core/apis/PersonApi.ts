//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Person,
    PersonFromJSON,
    PersonToJSON,
} from '../models';

export interface PersonSnapshotRequest {
    person: string;
    transferables?: boolean;
}

export interface UpdatePersonRequest {
    transferables?: boolean;
    person?: Person;
}

/**
 * 
 */
export class PersonApi extends runtime.BaseAPI {

    /**
     * This will get a snapshot of a specific person
     * /person/{person} [GET]
     */
    async personSnapshotRaw(requestParameters: PersonSnapshotRequest): Promise<runtime.ApiResponse<Person>> {
        if (requestParameters.person === null || requestParameters.person === undefined) {
            throw new runtime.RequiredError('person','Required parameter requestParameters.person was null or undefined when calling personSnapshot.');
        }

        const queryParameters: any = {};

        if (requestParameters.transferables !== undefined) {
            queryParameters['transferables'] = requestParameters.transferables;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/person/{person}`.replace(`{${"person"}}`, encodeURIComponent(String(requestParameters.person))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PersonFromJSON(jsonValue));
    }

    /**
     * This will get a snapshot of a specific person
     * /person/{person} [GET]
     */
    async personSnapshot(requestParameters: PersonSnapshotRequest): Promise<Person> {
        const response = await this.personSnapshotRaw(requestParameters);
        return await response.value();
    }

    /**
     * This will update a specific person
     * /person/update [POST]
     */
    async updatePersonRaw(requestParameters: UpdatePersonRequest): Promise<runtime.ApiResponse<Person>> {
        const queryParameters: any = {};

        if (requestParameters.transferables !== undefined) {
            queryParameters['transferables'] = requestParameters.transferables;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/person/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PersonToJSON(requestParameters.person),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PersonFromJSON(jsonValue));
    }

    /**
     * This will update a specific person
     * /person/update [POST]
     */
    async updatePerson(requestParameters: UpdatePersonRequest): Promise<Person> {
        const response = await this.updatePersonRaw(requestParameters);
        return await response.value();
    }

}
