//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Hint,
    HintFromJSON,
    HintToJSON,
} from '../models';

export interface HintSpecificHintSnapshotRequest {
    hint: string;
}

export interface HintUpdateRequest {
    hint?: Hint;
}

/**
 * 
 */
export class HintApi extends runtime.BaseAPI {

    /**
     * This will get a snapshot of a specific hint.
     * /hint/{hint} [POST]
     */
    async hintSpecificHintSnapshotRaw(requestParameters: HintSpecificHintSnapshotRequest): Promise<runtime.ApiResponse<Hint>> {
        if (requestParameters.hint === null || requestParameters.hint === undefined) {
            throw new runtime.RequiredError('hint','Required parameter requestParameters.hint was null or undefined when calling hintSpecificHintSnapshot.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/hint/{hint}`.replace(`{${"hint"}}`, encodeURIComponent(String(requestParameters.hint))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => HintFromJSON(jsonValue));
    }

    /**
     * This will get a snapshot of a specific hint.
     * /hint/{hint} [POST]
     */
    async hintSpecificHintSnapshot(requestParameters: HintSpecificHintSnapshotRequest): Promise<Hint> {
        const response = await this.hintSpecificHintSnapshotRaw(requestParameters);
        return await response.value();
    }

    /**
     * This will update a specific hint.
     * /hint/update [POST]
     */
    async hintUpdateRaw(requestParameters: HintUpdateRequest): Promise<runtime.ApiResponse<Hint>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/hint/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HintToJSON(requestParameters.hint),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => HintFromJSON(jsonValue));
    }

    /**
     * This will update a specific hint.
     * /hint/update [POST]
     */
    async hintUpdate(requestParameters: HintUpdateRequest): Promise<Hint> {
        const response = await this.hintUpdateRaw(requestParameters);
        return await response.value();
    }

}
