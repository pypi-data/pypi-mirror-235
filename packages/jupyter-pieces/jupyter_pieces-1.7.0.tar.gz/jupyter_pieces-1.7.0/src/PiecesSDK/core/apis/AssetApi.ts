//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Asset,
    AssetFromJSON,
    AssetToJSON,
    AssetFormats,
    AssetFormatsFromJSON,
    AssetFormatsToJSON,
    AssetReclassification,
    AssetReclassificationFromJSON,
    AssetReclassificationToJSON,
    ExportedAsset,
    ExportedAssetFromJSON,
    ExportedAssetToJSON,
    SeededAccessor,
    SeededAccessorFromJSON,
    SeededAccessorToJSON,
} from '../models';

export interface AssetFormatsRequest {
    asset: string;
    transferables?: boolean;
}

export interface AssetReclassifyRequest {
    transferables?: boolean;
    assetReclassification?: AssetReclassification;
}

export interface AssetSnapshotRequest {
    asset: string;
    transferables?: boolean;
}

export interface AssetSnapshotPostRequest {
    asset: string;
    transferables?: boolean;
    seededAccessor?: SeededAccessor;
}

export interface AssetSpecificAssetExportRequest {
    asset: string;
    exportType: AssetSpecificAssetExportExportTypeEnum;
}

export interface AssetUpdateRequest {
    transferables?: boolean;
    asset?: Asset;
}

/**
 * 
 */
export class AssetApi extends runtime.BaseAPI {

    /**
     * Get the formats for a given asset.
     * /asset/{asset}/formats [GET] Scoped To Asset
     */
    async assetFormatsRaw(requestParameters: AssetFormatsRequest): Promise<runtime.ApiResponse<AssetFormats>> {
        if (requestParameters.asset === null || requestParameters.asset === undefined) {
            throw new runtime.RequiredError('asset','Required parameter requestParameters.asset was null or undefined when calling assetFormats.');
        }

        const queryParameters: any = {};

        if (requestParameters.transferables !== undefined) {
            queryParameters['transferables'] = requestParameters.transferables;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/asset/{asset}/formats`.replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters.asset))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetFormatsFromJSON(jsonValue));
    }

    /**
     * Get the formats for a given asset.
     * /asset/{asset}/formats [GET] Scoped To Asset
     */
    async assetFormats(requestParameters: AssetFormatsRequest): Promise<AssetFormats> {
        const response = await this.assetFormatsRaw(requestParameters);
        return await response.value();
    }

    /**
     * This will update the classification of this asset to the proper classification.
     * /asset/reclassify [POST]
     */
    async assetReclassifyRaw(requestParameters: AssetReclassifyRequest): Promise<runtime.ApiResponse<Asset>> {
        const queryParameters: any = {};

        if (requestParameters.transferables !== undefined) {
            queryParameters['transferables'] = requestParameters.transferables;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/asset/reclassify`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AssetReclassificationToJSON(requestParameters.assetReclassification),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetFromJSON(jsonValue));
    }

    /**
     * This will update the classification of this asset to the proper classification.
     * /asset/reclassify [POST]
     */
    async assetReclassify(requestParameters: AssetReclassifyRequest): Promise<Asset> {
        const response = await this.assetReclassifyRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get the snapshot of a specific asset.
     * /asset/{asset} [GET] Scoped To Asset
     */
    async assetSnapshotRaw(requestParameters: AssetSnapshotRequest): Promise<runtime.ApiResponse<Asset>> {
        if (requestParameters.asset === null || requestParameters.asset === undefined) {
            throw new runtime.RequiredError('asset','Required parameter requestParameters.asset was null or undefined when calling assetSnapshot.');
        }

        const queryParameters: any = {};

        if (requestParameters.transferables !== undefined) {
            queryParameters['transferables'] = requestParameters.transferables;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/asset/{asset}`.replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters.asset))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetFromJSON(jsonValue));
    }

    /**
     * Get the snapshot of a specific asset.
     * /asset/{asset} [GET] Scoped To Asset
     */
    async assetSnapshot(requestParameters: AssetSnapshotRequest): Promise<Asset> {
        const response = await this.assetSnapshotRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get the snapshot of a specific asset. by passing over as well the user who is getting the snapshot.
     * /asset/{asset} [POST] Scoped to an Asset
     */
    async assetSnapshotPostRaw(requestParameters: AssetSnapshotPostRequest): Promise<runtime.ApiResponse<Asset>> {
        if (requestParameters.asset === null || requestParameters.asset === undefined) {
            throw new runtime.RequiredError('asset','Required parameter requestParameters.asset was null or undefined when calling assetSnapshotPost.');
        }

        const queryParameters: any = {};

        if (requestParameters.transferables !== undefined) {
            queryParameters['transferables'] = requestParameters.transferables;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/asset/{asset}`.replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters.asset))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SeededAccessorToJSON(requestParameters.seededAccessor),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetFromJSON(jsonValue));
    }

    /**
     * Get the snapshot of a specific asset. by passing over as well the user who is getting the snapshot.
     * /asset/{asset} [POST] Scoped to an Asset
     */
    async assetSnapshotPost(requestParameters: AssetSnapshotPostRequest): Promise<Asset> {
        const response = await this.assetSnapshotPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * This will return a export version of your asset.
     * [GET] /asset/{asset}/export
     */
    async assetSpecificAssetExportRaw(requestParameters: AssetSpecificAssetExportRequest): Promise<runtime.ApiResponse<ExportedAsset>> {
        if (requestParameters.asset === null || requestParameters.asset === undefined) {
            throw new runtime.RequiredError('asset','Required parameter requestParameters.asset was null or undefined when calling assetSpecificAssetExport.');
        }

        if (requestParameters.exportType === null || requestParameters.exportType === undefined) {
            throw new runtime.RequiredError('exportType','Required parameter requestParameters.exportType was null or undefined when calling assetSpecificAssetExport.');
        }

        const queryParameters: any = {};

        if (requestParameters.exportType !== undefined) {
            queryParameters['export_type'] = requestParameters.exportType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/asset/{asset}/export`.replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters.asset))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ExportedAssetFromJSON(jsonValue));
    }

    /**
     * This will return a export version of your asset.
     * [GET] /asset/{asset}/export
     */
    async assetSpecificAssetExport(requestParameters: AssetSpecificAssetExportRequest): Promise<ExportedAsset> {
        const response = await this.assetSpecificAssetExportRaw(requestParameters);
        return await response.value();
    }

    /**
     * This endpoint will accept an Asset that the user wants to update, and will return the a full Asset that was updated!
     * /asset/update [POST] Scoped to Asset
     */
    async assetUpdateRaw(requestParameters: AssetUpdateRequest): Promise<runtime.ApiResponse<Asset>> {
        const queryParameters: any = {};

        if (requestParameters.transferables !== undefined) {
            queryParameters['transferables'] = requestParameters.transferables;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/asset/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AssetToJSON(requestParameters.asset),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetFromJSON(jsonValue));
    }

    /**
     * This endpoint will accept an Asset that the user wants to update, and will return the a full Asset that was updated!
     * /asset/update [POST] Scoped to Asset
     */
    async assetUpdate(requestParameters: AssetUpdateRequest): Promise<Asset> {
        const response = await this.assetUpdateRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum AssetSpecificAssetExportExportTypeEnum {
    Html = 'HTML',
    Md = 'MD'
}
