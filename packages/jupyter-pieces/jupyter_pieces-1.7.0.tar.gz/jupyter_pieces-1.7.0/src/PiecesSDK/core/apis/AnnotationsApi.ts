//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Annotation,
    AnnotationFromJSON,
    AnnotationToJSON,
    Annotations,
    AnnotationsFromJSON,
    AnnotationsToJSON,
    SeededAnnotation,
    SeededAnnotationFromJSON,
    SeededAnnotationToJSON,
} from '../models';

export interface AnnotationsCreateNewAnnotationRequest {
    seededAnnotation?: SeededAnnotation;
}

export interface AnnotationsDeleteSpecificAnnotationRequest {
    annotation: string;
}

export interface AnnotationsSnapshotRequest {
    annotationTypeFilter?: AnnotationsSnapshotAnnotationTypeFilterEnum;
}

/**
 * 
 */
export class AnnotationsApi extends runtime.BaseAPI {

    /**
     * This will create an annotation.
     * /annotations/create [POST]
     */
    async annotationsCreateNewAnnotationRaw(requestParameters: AnnotationsCreateNewAnnotationRequest): Promise<runtime.ApiResponse<Annotation>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/annotations/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SeededAnnotationToJSON(requestParameters.seededAnnotation),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AnnotationFromJSON(jsonValue));
    }

    /**
     * This will create an annotation.
     * /annotations/create [POST]
     */
    async annotationsCreateNewAnnotation(requestParameters: AnnotationsCreateNewAnnotationRequest): Promise<Annotation> {
        const response = await this.annotationsCreateNewAnnotationRaw(requestParameters);
        return await response.value();
    }

    /**
     * this will delete a specific annotation
     * /annotations/{annotation}/delete [POST]
     */
    async annotationsDeleteSpecificAnnotationRaw(requestParameters: AnnotationsDeleteSpecificAnnotationRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.annotation === null || requestParameters.annotation === undefined) {
            throw new runtime.RequiredError('annotation','Required parameter requestParameters.annotation was null or undefined when calling annotationsDeleteSpecificAnnotation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/annotations/{annotation}/delete`.replace(`{${"annotation"}}`, encodeURIComponent(String(requestParameters.annotation))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * this will delete a specific annotation
     * /annotations/{annotation}/delete [POST]
     */
    async annotationsDeleteSpecificAnnotation(requestParameters: AnnotationsDeleteSpecificAnnotationRequest): Promise<void> {
        await this.annotationsDeleteSpecificAnnotationRaw(requestParameters);
    }

    /**
     * This will get a snapshot of all the annotations.  This will take an optional filter as a query param.
     * /annotations [GET]
     */
    async annotationsSnapshotRaw(requestParameters: AnnotationsSnapshotRequest): Promise<runtime.ApiResponse<Annotations>> {
        const queryParameters: any = {};

        if (requestParameters.annotationTypeFilter !== undefined) {
            queryParameters['annotation_type_filter'] = requestParameters.annotationTypeFilter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/annotations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AnnotationsFromJSON(jsonValue));
    }

    /**
     * This will get a snapshot of all the annotations.  This will take an optional filter as a query param.
     * /annotations [GET]
     */
    async annotationsSnapshot(requestParameters: AnnotationsSnapshotRequest): Promise<Annotations> {
        const response = await this.annotationsSnapshotRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum AnnotationsSnapshotAnnotationTypeFilterEnum {
    Description = 'DESCRIPTION',
    Comment = 'COMMENT',
    Commentation = 'COMMENTATION',
    Documentation = 'DOCUMENTATION',
    Summarization = 'SUMMARIZATION',
    Summary = 'SUMMARY',
    Explanation = 'EXPLANATION',
    GitCommit = 'GIT_COMMIT'
}
