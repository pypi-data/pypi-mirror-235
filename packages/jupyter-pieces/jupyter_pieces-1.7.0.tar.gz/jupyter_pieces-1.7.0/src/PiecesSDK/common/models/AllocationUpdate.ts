//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Runtime Common Library
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AllocationCloudUpdate,
    AllocationCloudUpdateFromJSON,
    AllocationCloudUpdateFromJSONTyped,
    AllocationCloudUpdateToJSON,
    AllocationUrlsUpdate,
    AllocationUrlsUpdateFromJSON,
    AllocationUrlsUpdateFromJSONTyped,
    AllocationUrlsUpdateToJSON,
    EmbeddedModelSchema,
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
} from './';

/**
 * Model for allocation update endpoint.
 * 
 * cloud and urls are both optional, however you can pass either, both or neither.
 * @export
 * @interface AllocationUpdate
 */
export interface AllocationUpdate {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof AllocationUpdate
     */
    schema?: EmbeddedModelSchema;
    /**
     * This is the project that this is attached to.(this will be on the allocation Cloud.)
     * @type {string}
     * @memberof AllocationUpdate
     */
    project: string;
    /**
     * 
     * @type {AllocationCloudUpdate}
     * @memberof AllocationUpdate
     */
    cloud?: AllocationCloudUpdate;
    /**
     * 
     * @type {AllocationUrlsUpdate}
     * @memberof AllocationUpdate
     */
    urls?: AllocationUrlsUpdate;
    /**
     * This is the region where this cloud is positioned.
     * @type {string}
     * @memberof AllocationUpdate
     */
    region?: string;
}

export function AllocationUpdateFromJSON(json: any): AllocationUpdate {
    return AllocationUpdateFromJSONTyped(json, false);
}

export function AllocationUpdateFromJSONTyped(json: any, ignoreDiscriminator: boolean): AllocationUpdate {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'schema': !exists(json, 'schema') ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'project': json['project'],
        'cloud': !exists(json, 'cloud') ? undefined : AllocationCloudUpdateFromJSON(json['cloud']),
        'urls': !exists(json, 'urls') ? undefined : AllocationUrlsUpdateFromJSON(json['urls']),
        'region': !exists(json, 'region') ? undefined : json['region'],
    };
}

export function AllocationUpdateToJSON(value?: AllocationUpdate | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'schema': EmbeddedModelSchemaToJSON(value.schema),
        'project': value.project,
        'cloud': AllocationCloudUpdateToJSON(value.cloud),
        'urls': AllocationUrlsUpdateToJSON(value.urls),
        'region': value.region,
    };
}


