//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Runtime Common Library
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    StripeNotificationEventData,
    StripeNotificationEventDataFromJSON,
    StripeNotificationEventDataFromJSONTyped,
    StripeNotificationEventDataToJSON,
    StripeNotificationEventRequest,
    StripeNotificationEventRequestFromJSON,
    StripeNotificationEventRequestFromJSONTyped,
    StripeNotificationEventRequestToJSON,
} from './';

/**
 * Events are our way of letting you know when something interesting happens in
 * your account. When an interesting event occurs, we create a new `Event`
 * object. For example, when a charge succeeds, we create a `charge.succeeded`
 * event; and when an invoice payment attempt fails, we create an
 * `invoice.payment_failed` event. Note that many API requests may cause multiple
 * events to be created. For example, if you create a new subscription for a
 * customer, you will receive both a `customer.subscription.created` event and a
 * `charge.succeeded` event.
 * 
 * Events occur when the state of another API resource changes. The state of that
 * resource at the time of the change is embedded in the event's data field. For
 * example, a `charge.succeeded` event will contain a charge, and an
 * `invoice.payment_failed` event will contain an invoice.
 * 
 * As with other API resources, you can use endpoints to retrieve an
 * [individual event](https://stripe.com/docs/api#retrieve_event) or a [list of events](https://stripe.com/docs/api#list_events)
 * from the API. We also have a separate
 * [webhooks](http://en.wikipedia.org/wiki/Webhook) system for sending the
 * `Event` objects directly to an endpoint on your server. Webhooks are managed
 * in your
 * [account settings](https://dashboard.stripe.com/account/webhooks),
 * and our [Using Webhooks](https://stripe.com/docs/webhooks) guide will help you get set up.
 * 
 * When using [Connect](https://stripe.com/docs/connect), you can also receive notifications of
 * events that occur in connected accounts. For these events, there will be an
 * additional `account` attribute in the received `Event` object.
 * 
 * **NOTE:** Right now, access to events through the [Retrieve Event API](https://stripe.com/docs/api#retrieve_event) is
 * guaranteed only for 30 days.
 * @export
 * @interface StripeEvent
 */
export interface StripeEvent {
    /**
     * The connected account that originated the event.
     * @type {string}
     * @memberof StripeEvent
     */
    account?: string;
    /**
     * The Stripe API version used to render `data`. *Note: This property is populated only for events on or after October 31, 2014*.
     * @type {string}
     * @memberof StripeEvent
     */
    apiVersion?: string | null;
    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     * @type {number}
     * @memberof StripeEvent
     */
    created: number;
    /**
     * 
     * @type {StripeNotificationEventData}
     * @memberof StripeEvent
     */
    data: StripeNotificationEventData;
    /**
     * Unique identifier for the object.
     * @type {string}
     * @memberof StripeEvent
     */
    id: string;
    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     * @type {boolean}
     * @memberof StripeEvent
     */
    livemode: boolean;
    /**
     * String representing the object's type. Objects of the same type share the same value.
     * @type {string}
     * @memberof StripeEvent
     */
    object: StripeEventObjectEnum;
    /**
     * Number of webhooks that have yet to be successfully delivered (i.e., to return a 20x response) to the URLs you've specified.
     * @type {number}
     * @memberof StripeEvent
     */
    pendingWebhooks: number;
    /**
     * 
     * @type {StripeNotificationEventRequest}
     * @memberof StripeEvent
     */
    request?: StripeNotificationEventRequest;
    /**
     * Description of the event (e.g., `invoice.created` or `charge.refunded`).
     * @type {string}
     * @memberof StripeEvent
     */
    type: string;
}

/**
* @export
* @enum {string}
*/
export enum StripeEventObjectEnum {
    Event = 'event'
}

export function StripeEventFromJSON(json: any): StripeEvent {
    return StripeEventFromJSONTyped(json, false);
}

export function StripeEventFromJSONTyped(json: any, ignoreDiscriminator: boolean): StripeEvent {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'account': !exists(json, 'account') ? undefined : json['account'],
        'apiVersion': !exists(json, 'api_version') ? undefined : json['api_version'],
        'created': json['created'],
        'data': StripeNotificationEventDataFromJSON(json['data']),
        'id': json['id'],
        'livemode': json['livemode'],
        'object': json['object'],
        'pendingWebhooks': json['pending_webhooks'],
        'request': !exists(json, 'request') ? undefined : StripeNotificationEventRequestFromJSON(json['request']),
        'type': json['type'],
    };
}

export function StripeEventToJSON(value?: StripeEvent | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'account': value.account,
        'api_version': value.apiVersion,
        'created': value.created,
        'data': StripeNotificationEventDataToJSON(value.data),
        'id': value.id,
        'livemode': value.livemode,
        'object': value.object,
        'pending_webhooks': value.pendingWebhooks,
        'request': StripeNotificationEventRequestToJSON(value.request),
        'type': value.type,
    };
}


