//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Runtime Common Library
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    RuntimeStripeAnyMetadata,
    RuntimeStripeAnyMetadataFromJSON,
    RuntimeStripeAnyMetadataFromJSONTyped,
    RuntimeStripeAnyMetadataToJSON,
    StripeAddress,
    StripeAddressFromJSON,
    StripeAddressFromJSONTyped,
    StripeAddressToJSON,
    StripeAutomaticTax,
    StripeAutomaticTaxFromJSON,
    StripeAutomaticTaxFromJSONTyped,
    StripeAutomaticTaxToJSON,
    StripeInvoiceSettingCustomerSetting,
    StripeInvoiceSettingCustomerSettingFromJSON,
    StripeInvoiceSettingCustomerSettingFromJSONTyped,
    StripeInvoiceSettingCustomerSettingToJSON,
    StripeShipping,
    StripeShippingFromJSON,
    StripeShippingFromJSONTyped,
    StripeShippingToJSON,
    SubscriptionItemList,
    SubscriptionItemListFromJSON,
    SubscriptionItemListFromJSONTyped,
    SubscriptionItemListToJSON,
} from './';

/**
 * 
 * @export
 * @interface StripeAnyEventData
 */
export interface StripeAnyEventData {
    /**
     * Whether the product is currently available for purchase.
     * @type {boolean}
     * @memberof StripeAnyEventData
     */
    active?: boolean;
    /**
     * A list of up to 8 URLs of images for this product, meant to be displayable to the customer.
     * @type {Array<string>}
     * @memberof StripeAnyEventData
     */
    images?: Array<string>;
    /**
     * 
     * @type {RuntimeStripeAnyMetadata}
     * @memberof StripeAnyEventData
     */
    metadata?: RuntimeStripeAnyMetadata;
    /**
     * Whether this product is shipped (i.e., physical goods).
     * @type {boolean}
     * @memberof StripeAnyEventData
     */
    shippable?: boolean | null;
    /**
     * Extra information about a product which will appear on your customer's credit card statement. In the case that multiple products are billed at once, the first statement descriptor will be used.
     * @type {string}
     * @memberof StripeAnyEventData
     */
    statementDescriptor?: string | null;
    /**
     * A label that represents units of this product in Stripe and on customersâ€™ receipts and invoices. When set, this will be included in associated invoice line item descriptions.
     * @type {string}
     * @memberof StripeAnyEventData
     */
    unitLabel?: string | null;
    /**
     * Time at which the object was last updated. Measured in seconds since the Unix epoch.
     * @type {number}
     * @memberof StripeAnyEventData
     */
    updated?: number;
    /**
     * A URL of a publicly-accessible webpage for this product.
     * @type {string}
     * @memberof StripeAnyEventData
     */
    url?: string | null;
    /**
     * 
     * @type {StripeAddress}
     * @memberof StripeAnyEventData
     */
    address?: StripeAddress | null;
    /**
     * Current balance, if any, being stored on the customer. If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that will be added to their next invoice. The balance does not refer to any unpaid invoices; it solely takes into account amounts that have yet to be successfully applied to any invoice. This balance is only taken into account as invoices are finalized.
     * @type {number}
     * @memberof StripeAnyEventData
     */
    balance?: number;
    /**
     * Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) the customer can be charged in for recurring billing purposes.
     * @type {string}
     * @memberof StripeAnyEventData
     */
    currency?: string | null;
    /**
     * When the customer's latest invoice is billed by charging automatically, `delinquent` is `true` if the invoice's latest charge failed. When the customer's latest invoice is billed by sending an invoice, `delinquent` is `true` if the invoice isn't paid by its due date.
     * 
     * If an invoice is marked uncollectible by [dunning](https://stripe.com/docs/billing/automatic-collection), `delinquent` doesn't get reset to `false`.
     * @type {boolean}
     * @memberof StripeAnyEventData
     */
    delinquent?: boolean | null;
    /**
     * An arbitrary string attached to the object. Often useful for displaying to users.
     * @type {string}
     * @memberof StripeAnyEventData
     */
    description?: string | null;
    /**
     * The customer's email address.
     * @type {string}
     * @memberof StripeAnyEventData
     */
    email?: string | null;
    /**
     * The prefix for the customer used to generate unique invoice numbers.
     * @type {string}
     * @memberof StripeAnyEventData
     */
    invoicePrefix?: string | null;
    /**
     * 
     * @type {StripeInvoiceSettingCustomerSetting}
     * @memberof StripeAnyEventData
     */
    invoiceSettings?: StripeInvoiceSettingCustomerSetting;
    /**
     * The customer's full name or business name.
     * @type {string}
     * @memberof StripeAnyEventData
     */
    name?: string | null;
    /**
     * The suffix of the customer's next invoice number, e.g., 0001.
     * @type {number}
     * @memberof StripeAnyEventData
     */
    nextInvoiceSequence?: number;
    /**
     * The customer's phone number.
     * @type {string}
     * @memberof StripeAnyEventData
     */
    phone?: string | null;
    /**
     * The customer's preferred locales (languages), ordered by preference.
     * @type {Array<string>}
     * @memberof StripeAnyEventData
     */
    preferredLocales?: Array<string> | null;
    /**
     * 
     * @type {StripeShipping}
     * @memberof StripeAnyEventData
     */
    shipping?: StripeShipping;
    /**
     * Describes the customer's tax exemption status. One of `none`, `exempt`, or `reverse`. When set to `reverse`, invoice and receipt PDFs include the text **"Reverse charge"**.
     * @type {string}
     * @memberof StripeAnyEventData
     */
    taxExempt?: StripeAnyEventDataTaxExemptEnum;
    /**
     * A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account.
     * @type {number}
     * @memberof StripeAnyEventData
     */
    applicationFeePercent?: number | null;
    /**
     * 
     * @type {StripeAutomaticTax}
     * @memberof StripeAnyEventData
     */
    automaticTax?: StripeAutomaticTax;
    /**
     * Determines the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices.
     * @type {number}
     * @memberof StripeAnyEventData
     */
    billingCycleAnchor?: number;
    /**
     * A date in the future at which the subscription will automatically get canceled
     * @type {number}
     * @memberof StripeAnyEventData
     */
    cancelAt?: number | null;
    /**
     * If the subscription has been canceled with the `at_period_end` flag set to `true`, `cancel_at_period_end` on the subscription will be true. You can use this attribute to determine whether a subscription that has a status of active is scheduled to be canceled at the end of the current period.
     * @type {boolean}
     * @memberof StripeAnyEventData
     */
    cancelAtPeriodEnd?: boolean;
    /**
     * If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with `cancel_at_period_end`, `canceled_at` will reflect the time of the most recent update request, not the end of the subscription period when the subscription is automatically moved to a canceled state.
     * @type {number}
     * @memberof StripeAnyEventData
     */
    canceledAt?: number | null;
    /**
     * Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions.
     * @type {string}
     * @memberof StripeAnyEventData
     */
    collectionMethod?: StripeAnyEventDataCollectionMethodEnum;
    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     * @type {number}
     * @memberof StripeAnyEventData
     */
    created?: number;
    /**
     * End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created.
     * @type {number}
     * @memberof StripeAnyEventData
     */
    currentPeriodEnd?: number;
    /**
     * Start of the current period that the subscription has been invoiced for.
     * @type {number}
     * @memberof StripeAnyEventData
     */
    currentPeriodStart?: number;
    /**
     * ID of the customer who owns the subscription.
     * @type {string}
     * @memberof StripeAnyEventData
     */
    customer?: string;
    /**
     * Number of days a customer has to pay invoices generated by this subscription. This value will be `null` for subscriptions where `collection_method=charge_automatically`.
     * @type {number}
     * @memberof StripeAnyEventData
     */
    daysUntilDue?: number | null;
    /**
     * ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source).
     * @type {string}
     * @memberof StripeAnyEventData
     */
    defaultPaymentMethod?: string | null;
    /**
     * ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If `default_payment_method` is also set, `default_payment_method` will take precedence. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source).
     * @type {string}
     * @memberof StripeAnyEventData
     */
    defaultSource?: string | null;
    /**
     * If the subscription has ended, the date the subscription ended.
     * @type {number}
     * @memberof StripeAnyEventData
     */
    endedAt?: number | null;
    /**
     * Unique identifier for the object.
     * @type {string}
     * @memberof StripeAnyEventData
     */
    id?: string;
    /**
     * 
     * @type {SubscriptionItemList}
     * @memberof StripeAnyEventData
     */
    items?: SubscriptionItemList;
    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     * @type {boolean}
     * @memberof StripeAnyEventData
     */
    livemode?: boolean;
    /**
     * Specifies the approximate timestamp on which any pending invoice items will be billed according to the schedule provided at `pending_invoice_item_interval`.
     * @type {number}
     * @memberof StripeAnyEventData
     */
    nextPendingInvoiceItemInvoice?: number | null;
    /**
     * String representing the object's type. Objects of the same type share the same value.
     * @type {string}
     * @memberof StripeAnyEventData
     */
    object?: StripeAnyEventDataObjectEnum;
    /**
     * You can use this [SetupIntent](https://stripe.com/docs/api/setup_intents) to collect user authentication when creating a subscription without immediate payment or updating a subscription's payment method, allowing you to optimize for off-session payments. Learn more in the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication#scenario-2).
     * @type {string}
     * @memberof StripeAnyEventData
     */
    pendingSetupIntent?: string | null;
    /**
     * If specified, [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates) that will be applied to the subscription once the `latest_invoice` has been paid.
     * @type {string}
     * @memberof StripeAnyEventData
     */
    pendingUpdate?: string | null;
    /**
     * The schedule attached to the subscription
     * @type {string}
     * @memberof StripeAnyEventData
     */
    schedule?: string | null;
    /**
     * Date when the subscription was first created. The date might differ from the `created` date due to backdating.
     * @type {number}
     * @memberof StripeAnyEventData
     */
    startDate?: number;
    /**
     * Possible values are `incomplete`, `incomplete_expired`, `trialing`, `active`, `past_due`, `canceled`, or `unpaid`.
     * For `collection_method=charge_automatically` a subscription moves into `incomplete` if the initial payment attempt fails. A subscription in this state can only have metadata and default_source updated. Once the first invoice is paid, the subscription moves into an `active` state. If the first invoice is not paid within 23 hours, the subscription transitions to `incomplete_expired`. This is a terminal state, the open invoice will be voided and no further invoices will be generated.
     * A subscription that is currently in a trial period is `trialing` and moves to `active` when the trial period is over.
     * If subscription `collection_method=charge_automatically` it becomes `past_due` when payment to renew it fails and `canceled` or `unpaid` (depending on your subscriptions settings) when Stripe has exhausted all payment retry attempts.
     * If subscription `collection_method=send_invoice` it becomes `past_due` when its invoice is not paid by the due date, and `canceled` or `unpaid` if it is still not paid by an additional deadline after that. Note that when a subscription has a status of `unpaid`, no subsequent invoices will be attempted (invoices will be created, but then immediately automatically closed). After receiving updated payment information from a customer, you may choose to reopen and pay their closed invoices.
     * @type {string}
     * @memberof StripeAnyEventData
     */
    status?: StripeAnyEventDataStatusEnum;
    /**
     * If the subscription has a trial, the end of that trial.
     * @type {number}
     * @memberof StripeAnyEventData
     */
    trialEnd?: number | null;
    /**
     * If the subscription has a trial, the beginning of that trial.
     * @type {number}
     * @memberof StripeAnyEventData
     */
    trialStart?: number | null;
}

/**
* @export
* @enum {string}
*/
export enum StripeAnyEventDataTaxExemptEnum {
    Exempt = 'exempt',
    None = 'none',
    Reverse = 'reverse'
}/**
* @export
* @enum {string}
*/
export enum StripeAnyEventDataCollectionMethodEnum {
    ChargeAutomatically = 'charge_automatically',
    SendInvoice = 'send_invoice'
}/**
* @export
* @enum {string}
*/
export enum StripeAnyEventDataObjectEnum {
    Subscription = 'subscription'
}/**
* @export
* @enum {string}
*/
export enum StripeAnyEventDataStatusEnum {
    Active = 'active',
    Canceled = 'canceled',
    Incomplete = 'incomplete',
    IncompleteExpired = 'incomplete_expired',
    PastDue = 'past_due',
    Trialing = 'trialing',
    Unpaid = 'unpaid'
}

export function StripeAnyEventDataFromJSON(json: any): StripeAnyEventData {
    return StripeAnyEventDataFromJSONTyped(json, false);
}

export function StripeAnyEventDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): StripeAnyEventData {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'active': !exists(json, 'active') ? undefined : json['active'],
        'images': !exists(json, 'images') ? undefined : json['images'],
        'metadata': !exists(json, 'metadata') ? undefined : RuntimeStripeAnyMetadataFromJSON(json['metadata']),
        'shippable': !exists(json, 'shippable') ? undefined : json['shippable'],
        'statementDescriptor': !exists(json, 'statement_descriptor') ? undefined : json['statement_descriptor'],
        'unitLabel': !exists(json, 'unit_label') ? undefined : json['unit_label'],
        'updated': !exists(json, 'updated') ? undefined : json['updated'],
        'url': !exists(json, 'url') ? undefined : json['url'],
        'address': !exists(json, 'address') ? undefined : StripeAddressFromJSON(json['address']),
        'balance': !exists(json, 'balance') ? undefined : json['balance'],
        'currency': !exists(json, 'currency') ? undefined : json['currency'],
        'delinquent': !exists(json, 'delinquent') ? undefined : json['delinquent'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'invoicePrefix': !exists(json, 'invoice_prefix') ? undefined : json['invoice_prefix'],
        'invoiceSettings': !exists(json, 'invoice_settings') ? undefined : StripeInvoiceSettingCustomerSettingFromJSON(json['invoice_settings']),
        'name': !exists(json, 'name') ? undefined : json['name'],
        'nextInvoiceSequence': !exists(json, 'next_invoice_sequence') ? undefined : json['next_invoice_sequence'],
        'phone': !exists(json, 'phone') ? undefined : json['phone'],
        'preferredLocales': !exists(json, 'preferred_locales') ? undefined : json['preferred_locales'],
        'shipping': !exists(json, 'shipping') ? undefined : StripeShippingFromJSON(json['shipping']),
        'taxExempt': !exists(json, 'tax_exempt') ? undefined : json['tax_exempt'],
        'applicationFeePercent': !exists(json, 'application_fee_percent') ? undefined : json['application_fee_percent'],
        'automaticTax': !exists(json, 'automatic_tax') ? undefined : StripeAutomaticTaxFromJSON(json['automatic_tax']),
        'billingCycleAnchor': !exists(json, 'billing_cycle_anchor') ? undefined : json['billing_cycle_anchor'],
        'cancelAt': !exists(json, 'cancel_at') ? undefined : json['cancel_at'],
        'cancelAtPeriodEnd': !exists(json, 'cancel_at_period_end') ? undefined : json['cancel_at_period_end'],
        'canceledAt': !exists(json, 'canceled_at') ? undefined : json['canceled_at'],
        'collectionMethod': !exists(json, 'collection_method') ? undefined : json['collection_method'],
        'created': !exists(json, 'created') ? undefined : json['created'],
        'currentPeriodEnd': !exists(json, 'current_period_end') ? undefined : json['current_period_end'],
        'currentPeriodStart': !exists(json, 'current_period_start') ? undefined : json['current_period_start'],
        'customer': !exists(json, 'customer') ? undefined : json['customer'],
        'daysUntilDue': !exists(json, 'days_until_due') ? undefined : json['days_until_due'],
        'defaultPaymentMethod': !exists(json, 'default_payment_method') ? undefined : json['default_payment_method'],
        'defaultSource': !exists(json, 'default_source') ? undefined : json['default_source'],
        'endedAt': !exists(json, 'ended_at') ? undefined : json['ended_at'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'items': !exists(json, 'items') ? undefined : SubscriptionItemListFromJSON(json['items']),
        'livemode': !exists(json, 'livemode') ? undefined : json['livemode'],
        'nextPendingInvoiceItemInvoice': !exists(json, 'next_pending_invoice_item_invoice') ? undefined : json['next_pending_invoice_item_invoice'],
        'object': !exists(json, 'object') ? undefined : json['object'],
        'pendingSetupIntent': !exists(json, 'pending_setup_intent') ? undefined : json['pending_setup_intent'],
        'pendingUpdate': !exists(json, 'pending_update') ? undefined : json['pending_update'],
        'schedule': !exists(json, 'schedule') ? undefined : json['schedule'],
        'startDate': !exists(json, 'start_date') ? undefined : json['start_date'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'trialEnd': !exists(json, 'trial_end') ? undefined : json['trial_end'],
        'trialStart': !exists(json, 'trial_start') ? undefined : json['trial_start'],
    };
}

export function StripeAnyEventDataToJSON(value?: StripeAnyEventData | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'active': value.active,
        'images': value.images,
        'metadata': RuntimeStripeAnyMetadataToJSON(value.metadata),
        'shippable': value.shippable,
        'statement_descriptor': value.statementDescriptor,
        'unit_label': value.unitLabel,
        'updated': value.updated,
        'url': value.url,
        'address': StripeAddressToJSON(value.address),
        'balance': value.balance,
        'currency': value.currency,
        'delinquent': value.delinquent,
        'description': value.description,
        'email': value.email,
        'invoice_prefix': value.invoicePrefix,
        'invoice_settings': StripeInvoiceSettingCustomerSettingToJSON(value.invoiceSettings),
        'name': value.name,
        'next_invoice_sequence': value.nextInvoiceSequence,
        'phone': value.phone,
        'preferred_locales': value.preferredLocales,
        'shipping': StripeShippingToJSON(value.shipping),
        'tax_exempt': value.taxExempt,
        'application_fee_percent': value.applicationFeePercent,
        'automatic_tax': StripeAutomaticTaxToJSON(value.automaticTax),
        'billing_cycle_anchor': value.billingCycleAnchor,
        'cancel_at': value.cancelAt,
        'cancel_at_period_end': value.cancelAtPeriodEnd,
        'canceled_at': value.canceledAt,
        'collection_method': value.collectionMethod,
        'created': value.created,
        'current_period_end': value.currentPeriodEnd,
        'current_period_start': value.currentPeriodStart,
        'customer': value.customer,
        'days_until_due': value.daysUntilDue,
        'default_payment_method': value.defaultPaymentMethod,
        'default_source': value.defaultSource,
        'ended_at': value.endedAt,
        'id': value.id,
        'items': SubscriptionItemListToJSON(value.items),
        'livemode': value.livemode,
        'next_pending_invoice_item_invoice': value.nextPendingInvoiceItemInvoice,
        'object': value.object,
        'pending_setup_intent': value.pendingSetupIntent,
        'pending_update': value.pendingUpdate,
        'schedule': value.schedule,
        'start_date': value.startDate,
        'status': value.status,
        'trial_end': value.trialEnd,
        'trial_start': value.trialStart,
    };
}


