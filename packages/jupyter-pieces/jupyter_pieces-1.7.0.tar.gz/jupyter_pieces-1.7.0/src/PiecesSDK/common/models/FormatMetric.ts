//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Runtime Common Library
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ClassificationGenericEnum,
    ClassificationGenericEnumFromJSON,
    ClassificationGenericEnumFromJSONTyped,
    ClassificationGenericEnumToJSON,
    ClassificationSpecificEnum,
    ClassificationSpecificEnumFromJSON,
    ClassificationSpecificEnumFromJSONTyped,
    ClassificationSpecificEnumToJSON,
    EmbeddedModelSchema,
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
} from './';

/**
 * FormatMetric
 * 
 * This is a model that will represent the about of specific formats. ie Generic: 'CODE' specific: 'DART' identifiers: ['FormatUID1, 'FormatUID2']
 * @export
 * @interface FormatMetric
 */
export interface FormatMetric {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof FormatMetric
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {ClassificationGenericEnum}
     * @memberof FormatMetric
     */
    generic: ClassificationGenericEnum;
    /**
     * 
     * @type {ClassificationSpecificEnum}
     * @memberof FormatMetric
     */
    specific: ClassificationSpecificEnum;
    /**
     * this is a list of format ids
     * @type {Array<string>}
     * @memberof FormatMetric
     */
    identifiers: Array<string>;
}

export function FormatMetricFromJSON(json: any): FormatMetric {
    return FormatMetricFromJSONTyped(json, false);
}

export function FormatMetricFromJSONTyped(json: any, ignoreDiscriminator: boolean): FormatMetric {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'schema': !exists(json, 'schema') ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'generic': ClassificationGenericEnumFromJSON(json['generic']),
        'specific': ClassificationSpecificEnumFromJSON(json['specific']),
        'identifiers': json['identifiers'],
    };
}

export function FormatMetricToJSON(value?: FormatMetric | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'schema': EmbeddedModelSchemaToJSON(value.schema),
        'generic': ClassificationGenericEnumToJSON(value.generic),
        'specific': ClassificationSpecificEnumToJSON(value.specific),
        'identifiers': value.identifiers,
    };
}


