//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Runtime Common Library
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    StripePriceTier,
    StripePriceTierFromJSON,
    StripePriceTierFromJSONTyped,
    StripePriceTierToJSON,
} from './';

/**
 * Prices define the unit cost, currency, and (optional) billing cycle for both recurring and one-time purchases of products.
 * [Products](https://stripe.com/docs/api#products) help you track inventory or provisioning, and prices help you track payment terms. Different physical goods or levels of service should be represented by products, and pricing options should be represented by prices. This approach lets you change prices without having to change your provisioning scheme.
 * For example, you might have a single "gold" product that has prices for $10/month, $100/year, and â‚¬9 once.
 * Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription), [create an invoice](https://stripe.com/docs/billing/invoices/create), and more about [products and prices](https://stripe.com/docs/billing/prices-guide).
 * @export
 * @interface StripePrice
 */
export interface StripePrice {
    /**
     * Whether the price can be used for new purchases.
     * @type {boolean}
     * @memberof StripePrice
     */
    active: boolean;
    /**
     * Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `unit_amount` or `unit_amount_decimal`) will be charged per unit in `quantity` (for prices with `usage_type=licensed`), or per unit of total usage (for prices with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes.
     * @type {string}
     * @memberof StripePrice
     */
    billingScheme: StripePriceBillingSchemeEnum;
    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     * @type {number}
     * @memberof StripePrice
     */
    created: number;
    /**
     * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
     * @type {string}
     * @memberof StripePrice
     */
    currency: string;
    /**
     * Unique identifier for the object.
     * @type {string}
     * @memberof StripePrice
     */
    id: string;
    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     * @type {boolean}
     * @memberof StripePrice
     */
    livemode: boolean;
    /**
     * A lookup key used to retrieve prices dynamically from a static string.
     * @type {string}
     * @memberof StripePrice
     */
    lookupKey?: string | null;
    /**
     * A brief description of the price, hidden from customers.
     * @type {string}
     * @memberof StripePrice
     */
    nickname?: string | null;
    /**
     * String representing the object's type. Objects of the same type share the same value.
     * @type {string}
     * @memberof StripePrice
     */
    object: StripePriceObjectEnum;
    /**
     * The ID of the product this price is associated with.
     * @type {string}
     * @memberof StripePrice
     */
    product: string;
    /**
     * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed.
     * @type {string}
     * @memberof StripePrice
     */
    taxBehavior?: StripePriceTaxBehaviorEnum;
    /**
     * Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`.
     * @type {Array<StripePriceTier>}
     * @memberof StripePrice
     */
    tiers?: Array<StripePriceTier>;
    /**
     * Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price. In `graduated` tiering, pricing can change as the quantity grows.
     * @type {string}
     * @memberof StripePrice
     */
    tiersMode?: StripePriceTiersModeEnum;
    /**
     * One of `one_time` or `recurring` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase.
     * @type {string}
     * @memberof StripePrice
     */
    type: StripePriceTypeEnum;
    /**
     * The unit amount in %s to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`.
     * @type {number}
     * @memberof StripePrice
     */
    unitAmount?: number | null;
    /**
     * The unit amount in %s to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`.
     * @type {string}
     * @memberof StripePrice
     */
    unitAmountDecimal?: string | null;
}

/**
* @export
* @enum {string}
*/
export enum StripePriceBillingSchemeEnum {
    PerUnit = 'per_unit',
    Tiered = 'tiered'
}/**
* @export
* @enum {string}
*/
export enum StripePriceObjectEnum {
    Price = 'price'
}/**
* @export
* @enum {string}
*/
export enum StripePriceTaxBehaviorEnum {
    Exclusive = 'exclusive',
    Inclusive = 'inclusive',
    Unspecified = 'unspecified'
}/**
* @export
* @enum {string}
*/
export enum StripePriceTiersModeEnum {
    Graduated = 'graduated',
    Volume = 'volume'
}/**
* @export
* @enum {string}
*/
export enum StripePriceTypeEnum {
    OneTime = 'one_time',
    Recurring = 'recurring'
}

export function StripePriceFromJSON(json: any): StripePrice {
    return StripePriceFromJSONTyped(json, false);
}

export function StripePriceFromJSONTyped(json: any, ignoreDiscriminator: boolean): StripePrice {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'active': json['active'],
        'billingScheme': json['billing_scheme'],
        'created': json['created'],
        'currency': json['currency'],
        'id': json['id'],
        'livemode': json['livemode'],
        'lookupKey': !exists(json, 'lookup_key') ? undefined : json['lookup_key'],
        'nickname': !exists(json, 'nickname') ? undefined : json['nickname'],
        'object': json['object'],
        'product': json['product'],
        'taxBehavior': !exists(json, 'tax_behavior') ? undefined : json['tax_behavior'],
        'tiers': !exists(json, 'tiers') ? undefined : ((json['tiers'] as Array<any>).map(StripePriceTierFromJSON)),
        'tiersMode': !exists(json, 'tiers_mode') ? undefined : json['tiers_mode'],
        'type': json['type'],
        'unitAmount': !exists(json, 'unit_amount') ? undefined : json['unit_amount'],
        'unitAmountDecimal': !exists(json, 'unit_amount_decimal') ? undefined : json['unit_amount_decimal'],
    };
}

export function StripePriceToJSON(value?: StripePrice | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'active': value.active,
        'billing_scheme': value.billingScheme,
        'created': value.created,
        'currency': value.currency,
        'id': value.id,
        'livemode': value.livemode,
        'lookup_key': value.lookupKey,
        'nickname': value.nickname,
        'object': value.object,
        'product': value.product,
        'tax_behavior': value.taxBehavior,
        'tiers': value.tiers === undefined ? undefined : ((value.tiers as Array<any>).map(StripePriceTierToJSON)),
        'tiers_mode': value.tiersMode,
        'type': value.type,
        'unit_amount': value.unitAmount,
        'unit_amount_decimal': value.unitAmountDecimal,
    };
}


