//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Runtime Common Library
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Classification,
    ClassificationFromJSON,
    ClassificationFromJSONTyped,
    ClassificationToJSON,
} from './';

/**
 * Metadata of a format reclassification event
 * @export
 * @interface AnalyticsTrackedAssetEventFormatReclassificationMetadata
 */
export interface AnalyticsTrackedAssetEventFormatReclassificationMetadata {
    /**
     * 
     * @type {Classification}
     * @memberof AnalyticsTrackedAssetEventFormatReclassificationMetadata
     */
    previous?: Classification;
    /**
     * 
     * @type {Classification}
     * @memberof AnalyticsTrackedAssetEventFormatReclassificationMetadata
     */
    current?: Classification;
}

export function AnalyticsTrackedAssetEventFormatReclassificationMetadataFromJSON(json: any): AnalyticsTrackedAssetEventFormatReclassificationMetadata {
    return AnalyticsTrackedAssetEventFormatReclassificationMetadataFromJSONTyped(json, false);
}

export function AnalyticsTrackedAssetEventFormatReclassificationMetadataFromJSONTyped(json: any, ignoreDiscriminator: boolean): AnalyticsTrackedAssetEventFormatReclassificationMetadata {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'previous': !exists(json, 'previous') ? undefined : ClassificationFromJSON(json['previous']),
        'current': !exists(json, 'current') ? undefined : ClassificationFromJSON(json['current']),
    };
}

export function AnalyticsTrackedAssetEventFormatReclassificationMetadataToJSON(value?: AnalyticsTrackedAssetEventFormatReclassificationMetadata | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'previous': ClassificationToJSON(value.previous),
        'current': ClassificationToJSON(value.current),
    };
}


