//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Runtime Common Library
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    RuntimeStripeAnyMetadata,
    RuntimeStripeAnyMetadataFromJSON,
    RuntimeStripeAnyMetadataFromJSONTyped,
    RuntimeStripeAnyMetadataToJSON,
    StripeAddress,
    StripeAddressFromJSON,
    StripeAddressFromJSONTyped,
    StripeAddressToJSON,
    StripeInvoiceSettingCustomerSetting,
    StripeInvoiceSettingCustomerSettingFromJSON,
    StripeInvoiceSettingCustomerSettingFromJSONTyped,
    StripeInvoiceSettingCustomerSettingToJSON,
    StripeShipping,
    StripeShippingFromJSON,
    StripeShippingFromJSONTyped,
    StripeShippingToJSON,
} from './';

/**
 * `Customer` objects allow you to perform recurring charges, and to track
 * multiple charges, that are associated with the same customer. The API allows
 * you to create, delete, and update your customers. You can retrieve individual
 * customers as well as a list of all your customers.
 * 
 * Related guide: [Save a card during payment](https://stripe.com/docs/payments/save-during-payment).
 * @export
 * @interface StripeCustomer
 */
export interface StripeCustomer {
    /**
     * 
     * @type {StripeAddress}
     * @memberof StripeCustomer
     */
    address?: StripeAddress | null;
    /**
     * Current balance, if any, being stored on the customer. If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that will be added to their next invoice. The balance does not refer to any unpaid invoices; it solely takes into account amounts that have yet to be successfully applied to any invoice. This balance is only taken into account as invoices are finalized.
     * @type {number}
     * @memberof StripeCustomer
     */
    balance?: number;
    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     * @type {number}
     * @memberof StripeCustomer
     */
    created: number;
    /**
     * Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) the customer can be charged in for recurring billing purposes.
     * @type {string}
     * @memberof StripeCustomer
     */
    currency?: string | null;
    /**
     * ID of the default payment source for the customer.
     * If you are using payment methods created via the PaymentMethods API, see the [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) field instead.
     * @type {string}
     * @memberof StripeCustomer
     */
    defaultSource?: string | null;
    /**
     * When the customer's latest invoice is billed by charging automatically, `delinquent` is `true` if the invoice's latest charge failed. When the customer's latest invoice is billed by sending an invoice, `delinquent` is `true` if the invoice isn't paid by its due date.
     * 
     * If an invoice is marked uncollectible by [dunning](https://stripe.com/docs/billing/automatic-collection), `delinquent` doesn't get reset to `false`.
     * @type {boolean}
     * @memberof StripeCustomer
     */
    delinquent?: boolean | null;
    /**
     * An arbitrary string attached to the object. Often useful for displaying to users.
     * @type {string}
     * @memberof StripeCustomer
     */
    description?: string | null;
    /**
     * The customer's email address.
     * @type {string}
     * @memberof StripeCustomer
     */
    email?: string | null;
    /**
     * Unique identifier for the object.
     * @type {string}
     * @memberof StripeCustomer
     */
    id: string;
    /**
     * The prefix for the customer used to generate unique invoice numbers.
     * @type {string}
     * @memberof StripeCustomer
     */
    invoicePrefix?: string | null;
    /**
     * 
     * @type {StripeInvoiceSettingCustomerSetting}
     * @memberof StripeCustomer
     */
    invoiceSettings?: StripeInvoiceSettingCustomerSetting;
    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     * @type {boolean}
     * @memberof StripeCustomer
     */
    livemode: boolean;
    /**
     * The customer's full name or business name.
     * @type {string}
     * @memberof StripeCustomer
     */
    name?: string | null;
    /**
     * The suffix of the customer's next invoice number, e.g., 0001.
     * @type {number}
     * @memberof StripeCustomer
     */
    nextInvoiceSequence?: number;
    /**
     * String representing the object's type. Objects of the same type share the same value.
     * @type {string}
     * @memberof StripeCustomer
     */
    object: StripeCustomerObjectEnum;
    /**
     * The customer's phone number.
     * @type {string}
     * @memberof StripeCustomer
     */
    phone?: string | null;
    /**
     * The customer's preferred locales (languages), ordered by preference.
     * @type {Array<string>}
     * @memberof StripeCustomer
     */
    preferredLocales?: Array<string> | null;
    /**
     * 
     * @type {StripeShipping}
     * @memberof StripeCustomer
     */
    shipping?: StripeShipping;
    /**
     * Describes the customer's tax exemption status. One of `none`, `exempt`, or `reverse`. When set to `reverse`, invoice and receipt PDFs include the text **"Reverse charge"**.
     * @type {string}
     * @memberof StripeCustomer
     */
    taxExempt?: StripeCustomerTaxExemptEnum;
    /**
     * 
     * @type {RuntimeStripeAnyMetadata}
     * @memberof StripeCustomer
     */
    metadata?: RuntimeStripeAnyMetadata;
}

/**
* @export
* @enum {string}
*/
export enum StripeCustomerObjectEnum {
    Customer = 'customer'
}/**
* @export
* @enum {string}
*/
export enum StripeCustomerTaxExemptEnum {
    Exempt = 'exempt',
    None = 'none',
    Reverse = 'reverse'
}

export function StripeCustomerFromJSON(json: any): StripeCustomer {
    return StripeCustomerFromJSONTyped(json, false);
}

export function StripeCustomerFromJSONTyped(json: any, ignoreDiscriminator: boolean): StripeCustomer {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'address': !exists(json, 'address') ? undefined : StripeAddressFromJSON(json['address']),
        'balance': !exists(json, 'balance') ? undefined : json['balance'],
        'created': json['created'],
        'currency': !exists(json, 'currency') ? undefined : json['currency'],
        'defaultSource': !exists(json, 'default_source') ? undefined : json['default_source'],
        'delinquent': !exists(json, 'delinquent') ? undefined : json['delinquent'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'id': json['id'],
        'invoicePrefix': !exists(json, 'invoice_prefix') ? undefined : json['invoice_prefix'],
        'invoiceSettings': !exists(json, 'invoice_settings') ? undefined : StripeInvoiceSettingCustomerSettingFromJSON(json['invoice_settings']),
        'livemode': json['livemode'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'nextInvoiceSequence': !exists(json, 'next_invoice_sequence') ? undefined : json['next_invoice_sequence'],
        'object': json['object'],
        'phone': !exists(json, 'phone') ? undefined : json['phone'],
        'preferredLocales': !exists(json, 'preferred_locales') ? undefined : json['preferred_locales'],
        'shipping': !exists(json, 'shipping') ? undefined : StripeShippingFromJSON(json['shipping']),
        'taxExempt': !exists(json, 'tax_exempt') ? undefined : json['tax_exempt'],
        'metadata': !exists(json, 'metadata') ? undefined : RuntimeStripeAnyMetadataFromJSON(json['metadata']),
    };
}

export function StripeCustomerToJSON(value?: StripeCustomer | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'address': StripeAddressToJSON(value.address),
        'balance': value.balance,
        'created': value.created,
        'currency': value.currency,
        'default_source': value.defaultSource,
        'delinquent': value.delinquent,
        'description': value.description,
        'email': value.email,
        'id': value.id,
        'invoice_prefix': value.invoicePrefix,
        'invoice_settings': StripeInvoiceSettingCustomerSettingToJSON(value.invoiceSettings),
        'livemode': value.livemode,
        'name': value.name,
        'next_invoice_sequence': value.nextInvoiceSequence,
        'object': value.object,
        'phone': value.phone,
        'preferred_locales': value.preferredLocales,
        'shipping': StripeShippingToJSON(value.shipping),
        'tax_exempt': value.taxExempt,
        'metadata': RuntimeStripeAnyMetadataToJSON(value.metadata),
    };
}


