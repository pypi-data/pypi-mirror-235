//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Runtime Common Library
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Aesthetics,
    AestheticsFromJSON,
    AestheticsFromJSONTyped,
    AestheticsToJSON,
    AllocationCloud,
    AllocationCloudFromJSON,
    AllocationCloudFromJSONTyped,
    AllocationCloudToJSON,
    Auth0UserMetadata,
    Auth0UserMetadataFromJSON,
    Auth0UserMetadataFromJSONTyped,
    Auth0UserMetadataToJSON,
    EmbeddedModelSchema,
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    ExternalProviders,
    ExternalProvidersFromJSON,
    ExternalProvidersFromJSONTyped,
    ExternalProvidersToJSON,
    GroupedTimestamp,
    GroupedTimestampFromJSON,
    GroupedTimestampFromJSONTyped,
    GroupedTimestampToJSON,
} from './';

/**
 * This is the model for a user logged into Pieces.
 * @export
 * @interface UserProfile
 */
export interface UserProfile {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof UserProfile
     */
    schema?: EmbeddedModelSchema;
    /**
     * mapped from picture.URL pointing to the user's profile picture. 
     * @type {string}
     * @memberof UserProfile
     */
    picture?: string;
    /**
     * 
     * @type {string}
     * @memberof UserProfile
     */
    email?: string;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof UserProfile
     */
    created?: GroupedTimestamp;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof UserProfile
     */
    updated?: GroupedTimestamp;
    /**
     * 	(unique) User's username.
     * 	
     * @type {string}
     * @memberof UserProfile
     */
    username?: string;
    /**
     * 
     * @type {string}
     * @memberof UserProfile
     */
    id: string;
    /**
     * This is the name of the User.
     * @type {string}
     * @memberof UserProfile
     */
    name?: string;
    /**
     * 
     * @type {Aesthetics}
     * @memberof UserProfile
     */
    aesthetics: Aesthetics;
    /**
     * 
     * @type {string}
     * @memberof UserProfile
     */
    vanityname?: string;
    /**
     * 
     * @type {AllocationCloud}
     * @memberof UserProfile
     */
    allocation?: AllocationCloud;
    /**
     * 
     * @type {ExternalProviders}
     * @memberof UserProfile
     */
    providers?: ExternalProviders;
    /**
     * 
     * @type {Auth0UserMetadata}
     * @memberof UserProfile
     */
    auth0?: Auth0UserMetadata;
}

export function UserProfileFromJSON(json: any): UserProfile {
    return UserProfileFromJSONTyped(json, false);
}

export function UserProfileFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserProfile {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'schema': !exists(json, 'schema') ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'picture': !exists(json, 'picture') ? undefined : json['picture'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'created': !exists(json, 'created') ? undefined : GroupedTimestampFromJSON(json['created']),
        'updated': !exists(json, 'updated') ? undefined : GroupedTimestampFromJSON(json['updated']),
        'username': !exists(json, 'username') ? undefined : json['username'],
        'id': json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'aesthetics': AestheticsFromJSON(json['aesthetics']),
        'vanityname': !exists(json, 'vanityname') ? undefined : json['vanityname'],
        'allocation': !exists(json, 'allocation') ? undefined : AllocationCloudFromJSON(json['allocation']),
        'providers': !exists(json, 'providers') ? undefined : ExternalProvidersFromJSON(json['providers']),
        'auth0': !exists(json, 'auth0') ? undefined : Auth0UserMetadataFromJSON(json['auth0']),
    };
}

export function UserProfileToJSON(value?: UserProfile | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'schema': EmbeddedModelSchemaToJSON(value.schema),
        'picture': value.picture,
        'email': value.email,
        'created': GroupedTimestampToJSON(value.created),
        'updated': GroupedTimestampToJSON(value.updated),
        'username': value.username,
        'id': value.id,
        'name': value.name,
        'aesthetics': AestheticsToJSON(value.aesthetics),
        'vanityname': value.vanityname,
        'allocation': AllocationCloudToJSON(value.allocation),
        'providers': ExternalProvidersToJSON(value.providers),
        'auth0': Auth0UserMetadataToJSON(value.auth0),
    };
}


