//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Runtime Common Library
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * A message type used to describe a single precondition failure.
 * @export
 * @interface GoogleRpcPreconditionFailureViolation
 */
export interface GoogleRpcPreconditionFailureViolation {
    /**
     * A description of how the precondition failed. Developers can use this description to understand how to fix the failure. For example: "Terms of service not accepted".
     * @type {string}
     * @memberof GoogleRpcPreconditionFailureViolation
     */
    description?: string;
    /**
     * The subject, relative to the type, that failed. For example, "google.com/cloud" relative to the "TOS" type would indicate which terms of service is being referenced.
     * @type {string}
     * @memberof GoogleRpcPreconditionFailureViolation
     */
    subject?: string;
    /**
     * The type of PreconditionFailure. We recommend using a service-specific enum type to define the supported precondition violation subjects. For example, "TOS" for "Terms of Service violation".
     * @type {string}
     * @memberof GoogleRpcPreconditionFailureViolation
     */
    type?: string;
}

export function GoogleRpcPreconditionFailureViolationFromJSON(json: any): GoogleRpcPreconditionFailureViolation {
    return GoogleRpcPreconditionFailureViolationFromJSONTyped(json, false);
}

export function GoogleRpcPreconditionFailureViolationFromJSONTyped(json: any, ignoreDiscriminator: boolean): GoogleRpcPreconditionFailureViolation {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'description': !exists(json, 'description') ? undefined : json['description'],
        'subject': !exists(json, 'subject') ? undefined : json['subject'],
        'type': !exists(json, 'type') ? undefined : json['type'],
    };
}

export function GoogleRpcPreconditionFailureViolationToJSON(value?: GoogleRpcPreconditionFailureViolation | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'description': value.description,
        'subject': value.subject,
        'type': value.type,
    };
}


