//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Runtime Common Library
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Auth0Identity,
    Auth0IdentityFromJSON,
    Auth0IdentityFromJSONTyped,
    Auth0IdentityToJSON,
    Auth0Redirects,
    Auth0RedirectsFromJSON,
    Auth0RedirectsFromJSONTyped,
    Auth0RedirectsToJSON,
    Auth0User,
    Auth0UserFromJSON,
    Auth0UserFromJSONTyped,
    Auth0UserToJSON,
    Auth0UserMetadata,
    Auth0UserMetadataFromJSON,
    Auth0UserMetadataFromJSONTyped,
    Auth0UserMetadataToJSON,
    OAuthGroup,
    OAuthGroupFromJSON,
    OAuthGroupFromJSONTyped,
    OAuthGroupToJSON,
} from './';

/**
 * An object representing all of the properties that are available within a Auth0 PKCE Flow
 * @export
 * @interface Auth0
 */
export interface Auth0 {
    /**
     * 
     * @type {Auth0Identity}
     * @memberof Auth0
     */
    identity?: Auth0Identity;
    /**
     * 
     * @type {Auth0User}
     * @memberof Auth0
     */
    user?: Auth0User;
    /**
     * 
     * @type {Auth0UserMetadata}
     * @memberof Auth0
     */
    metadata?: Auth0UserMetadata;
    /**
     * The domain of your Auth 0 Service
     * @type {string}
     * @memberof Auth0
     */
    domain: string;
    /**
     * The Client ID for your Auth0 Service
     * @type {string}
     * @memberof Auth0
     */
    client: string;
    /**
     * The Server Audience of your Auth0 Service
     * @type {string}
     * @memberof Auth0
     */
    audience: string;
    /**
     * 
     * @type {Auth0Redirects}
     * @memberof Auth0
     */
    redirects: Auth0Redirects;
    /**
     * 
     * @type {OAuthGroup}
     * @memberof Auth0
     */
    oAuth: OAuthGroup;
    /**
     * An optional namespace parameter to add an additional namespace
     * @type {string}
     * @memberof Auth0
     */
    namespace?: string;
}

export function Auth0FromJSON(json: any): Auth0 {
    return Auth0FromJSONTyped(json, false);
}

export function Auth0FromJSONTyped(json: any, ignoreDiscriminator: boolean): Auth0 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'identity': !exists(json, 'identity') ? undefined : Auth0IdentityFromJSON(json['identity']),
        'user': !exists(json, 'user') ? undefined : Auth0UserFromJSON(json['user']),
        'metadata': !exists(json, 'metadata') ? undefined : Auth0UserMetadataFromJSON(json['metadata']),
        'domain': json['domain'],
        'client': json['client'],
        'audience': json['audience'],
        'redirects': Auth0RedirectsFromJSON(json['redirects']),
        'oAuth': OAuthGroupFromJSON(json['oAuth']),
        'namespace': !exists(json, 'namespace') ? undefined : json['namespace'],
    };
}

export function Auth0ToJSON(value?: Auth0 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'identity': Auth0IdentityToJSON(value.identity),
        'user': Auth0UserToJSON(value.user),
        'metadata': Auth0UserMetadataToJSON(value.metadata),
        'domain': value.domain,
        'client': value.client,
        'audience': value.audience,
        'redirects': Auth0RedirectsToJSON(value.redirects),
        'oAuth': OAuthGroupToJSON(value.oAuth),
        'namespace': value.namespace,
    };
}


