//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Runtime Common Library
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    GoogleRpcPreconditionFailureViolation,
    GoogleRpcPreconditionFailureViolationFromJSON,
    GoogleRpcPreconditionFailureViolationFromJSONTyped,
    GoogleRpcPreconditionFailureViolationToJSON,
} from './';

/**
 * Describes what preconditions have failed. For example, if an RPC failed because it required the Terms of Service to be acknowledged, it could list the terms of service violation in the PreconditionFailure message.
 * @export
 * @interface GoogleRpcPreconditionFailure
 */
export interface GoogleRpcPreconditionFailure {
    /**
     * Describes all precondition violations.
     * @type {Array<GoogleRpcPreconditionFailureViolation>}
     * @memberof GoogleRpcPreconditionFailure
     */
    violations?: Array<GoogleRpcPreconditionFailureViolation>;
}

export function GoogleRpcPreconditionFailureFromJSON(json: any): GoogleRpcPreconditionFailure {
    return GoogleRpcPreconditionFailureFromJSONTyped(json, false);
}

export function GoogleRpcPreconditionFailureFromJSONTyped(json: any, ignoreDiscriminator: boolean): GoogleRpcPreconditionFailure {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'violations': !exists(json, 'violations') ? undefined : ((json['violations'] as Array<any>).map(GoogleRpcPreconditionFailureViolationFromJSON)),
    };
}

export function GoogleRpcPreconditionFailureToJSON(value?: GoogleRpcPreconditionFailure | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'violations': value.violations === undefined ? undefined : ((value.violations as Array<any>).map(GoogleRpcPreconditionFailureViolationToJSON)),
    };
}


