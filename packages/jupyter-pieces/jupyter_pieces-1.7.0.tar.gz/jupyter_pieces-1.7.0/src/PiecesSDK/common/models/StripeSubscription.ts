//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Runtime Common Library
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    StripeAutomaticTax,
    StripeAutomaticTaxFromJSON,
    StripeAutomaticTaxFromJSONTyped,
    StripeAutomaticTaxToJSON,
    SubscriptionItemList,
    SubscriptionItemListFromJSON,
    SubscriptionItemListFromJSONTyped,
    SubscriptionItemListToJSON,
} from './';

/**
 * Subscriptions allow you to charge a customer on a recurring basis.
 * Related guide: [Creating Subscriptions](https://stripe.com/docs/billing/subscriptions/creating).
 * @export
 * @interface StripeSubscription
 */
export interface StripeSubscription {
    /**
     * A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account.
     * @type {number}
     * @memberof StripeSubscription
     */
    applicationFeePercent?: number | null;
    /**
     * 
     * @type {StripeAutomaticTax}
     * @memberof StripeSubscription
     */
    automaticTax: StripeAutomaticTax;
    /**
     * Determines the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices.
     * @type {number}
     * @memberof StripeSubscription
     */
    billingCycleAnchor: number;
    /**
     * A date in the future at which the subscription will automatically get canceled
     * @type {number}
     * @memberof StripeSubscription
     */
    cancelAt?: number | null;
    /**
     * If the subscription has been canceled with the `at_period_end` flag set to `true`, `cancel_at_period_end` on the subscription will be true. You can use this attribute to determine whether a subscription that has a status of active is scheduled to be canceled at the end of the current period.
     * @type {boolean}
     * @memberof StripeSubscription
     */
    cancelAtPeriodEnd: boolean;
    /**
     * If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with `cancel_at_period_end`, `canceled_at` will reflect the time of the most recent update request, not the end of the subscription period when the subscription is automatically moved to a canceled state.
     * @type {number}
     * @memberof StripeSubscription
     */
    canceledAt?: number | null;
    /**
     * Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions.
     * @type {string}
     * @memberof StripeSubscription
     */
    collectionMethod: StripeSubscriptionCollectionMethodEnum;
    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     * @type {number}
     * @memberof StripeSubscription
     */
    created: number;
    /**
     * End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created.
     * @type {number}
     * @memberof StripeSubscription
     */
    currentPeriodEnd: number;
    /**
     * Start of the current period that the subscription has been invoiced for.
     * @type {number}
     * @memberof StripeSubscription
     */
    currentPeriodStart: number;
    /**
     * ID of the customer who owns the subscription.
     * @type {string}
     * @memberof StripeSubscription
     */
    customer: string;
    /**
     * Number of days a customer has to pay invoices generated by this subscription. This value will be `null` for subscriptions where `collection_method=charge_automatically`.
     * @type {number}
     * @memberof StripeSubscription
     */
    daysUntilDue?: number | null;
    /**
     * ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source).
     * @type {string}
     * @memberof StripeSubscription
     */
    defaultPaymentMethod?: string | null;
    /**
     * ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If `default_payment_method` is also set, `default_payment_method` will take precedence. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source).
     * @type {string}
     * @memberof StripeSubscription
     */
    defaultSource?: string | null;
    /**
     * If the subscription has ended, the date the subscription ended.
     * @type {number}
     * @memberof StripeSubscription
     */
    endedAt?: number | null;
    /**
     * Unique identifier for the object.
     * @type {string}
     * @memberof StripeSubscription
     */
    id: string;
    /**
     * 
     * @type {SubscriptionItemList}
     * @memberof StripeSubscription
     */
    items: SubscriptionItemList;
    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     * @type {boolean}
     * @memberof StripeSubscription
     */
    livemode: boolean;
    /**
     * Specifies the approximate timestamp on which any pending invoice items will be billed according to the schedule provided at `pending_invoice_item_interval`.
     * @type {number}
     * @memberof StripeSubscription
     */
    nextPendingInvoiceItemInvoice?: number | null;
    /**
     * String representing the object's type. Objects of the same type share the same value.
     * @type {string}
     * @memberof StripeSubscription
     */
    object: StripeSubscriptionObjectEnum;
    /**
     * You can use this [SetupIntent](https://stripe.com/docs/api/setup_intents) to collect user authentication when creating a subscription without immediate payment or updating a subscription's payment method, allowing you to optimize for off-session payments. Learn more in the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication#scenario-2).
     * @type {string}
     * @memberof StripeSubscription
     */
    pendingSetupIntent?: string | null;
    /**
     * If specified, [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates) that will be applied to the subscription once the `latest_invoice` has been paid.
     * @type {string}
     * @memberof StripeSubscription
     */
    pendingUpdate?: string | null;
    /**
     * The schedule attached to the subscription
     * @type {string}
     * @memberof StripeSubscription
     */
    schedule?: string | null;
    /**
     * Date when the subscription was first created. The date might differ from the `created` date due to backdating.
     * @type {number}
     * @memberof StripeSubscription
     */
    startDate: number;
    /**
     * Possible values are `incomplete`, `incomplete_expired`, `trialing`, `active`, `past_due`, `canceled`, or `unpaid`.
     * For `collection_method=charge_automatically` a subscription moves into `incomplete` if the initial payment attempt fails. A subscription in this state can only have metadata and default_source updated. Once the first invoice is paid, the subscription moves into an `active` state. If the first invoice is not paid within 23 hours, the subscription transitions to `incomplete_expired`. This is a terminal state, the open invoice will be voided and no further invoices will be generated.
     * A subscription that is currently in a trial period is `trialing` and moves to `active` when the trial period is over.
     * If subscription `collection_method=charge_automatically` it becomes `past_due` when payment to renew it fails and `canceled` or `unpaid` (depending on your subscriptions settings) when Stripe has exhausted all payment retry attempts.
     * If subscription `collection_method=send_invoice` it becomes `past_due` when its invoice is not paid by the due date, and `canceled` or `unpaid` if it is still not paid by an additional deadline after that. Note that when a subscription has a status of `unpaid`, no subsequent invoices will be attempted (invoices will be created, but then immediately automatically closed). After receiving updated payment information from a customer, you may choose to reopen and pay their closed invoices.
     * @type {string}
     * @memberof StripeSubscription
     */
    status: StripeSubscriptionStatusEnum;
    /**
     * If the subscription has a trial, the end of that trial.
     * @type {number}
     * @memberof StripeSubscription
     */
    trialEnd?: number | null;
    /**
     * If the subscription has a trial, the beginning of that trial.
     * @type {number}
     * @memberof StripeSubscription
     */
    trialStart?: number | null;
}

/**
* @export
* @enum {string}
*/
export enum StripeSubscriptionCollectionMethodEnum {
    ChargeAutomatically = 'charge_automatically',
    SendInvoice = 'send_invoice'
}/**
* @export
* @enum {string}
*/
export enum StripeSubscriptionObjectEnum {
    Subscription = 'subscription'
}/**
* @export
* @enum {string}
*/
export enum StripeSubscriptionStatusEnum {
    Active = 'active',
    Canceled = 'canceled',
    Incomplete = 'incomplete',
    IncompleteExpired = 'incomplete_expired',
    PastDue = 'past_due',
    Trialing = 'trialing',
    Unpaid = 'unpaid'
}

export function StripeSubscriptionFromJSON(json: any): StripeSubscription {
    return StripeSubscriptionFromJSONTyped(json, false);
}

export function StripeSubscriptionFromJSONTyped(json: any, ignoreDiscriminator: boolean): StripeSubscription {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'applicationFeePercent': !exists(json, 'application_fee_percent') ? undefined : json['application_fee_percent'],
        'automaticTax': StripeAutomaticTaxFromJSON(json['automatic_tax']),
        'billingCycleAnchor': json['billing_cycle_anchor'],
        'cancelAt': !exists(json, 'cancel_at') ? undefined : json['cancel_at'],
        'cancelAtPeriodEnd': json['cancel_at_period_end'],
        'canceledAt': !exists(json, 'canceled_at') ? undefined : json['canceled_at'],
        'collectionMethod': json['collection_method'],
        'created': json['created'],
        'currentPeriodEnd': json['current_period_end'],
        'currentPeriodStart': json['current_period_start'],
        'customer': json['customer'],
        'daysUntilDue': !exists(json, 'days_until_due') ? undefined : json['days_until_due'],
        'defaultPaymentMethod': !exists(json, 'default_payment_method') ? undefined : json['default_payment_method'],
        'defaultSource': !exists(json, 'default_source') ? undefined : json['default_source'],
        'endedAt': !exists(json, 'ended_at') ? undefined : json['ended_at'],
        'id': json['id'],
        'items': SubscriptionItemListFromJSON(json['items']),
        'livemode': json['livemode'],
        'nextPendingInvoiceItemInvoice': !exists(json, 'next_pending_invoice_item_invoice') ? undefined : json['next_pending_invoice_item_invoice'],
        'object': json['object'],
        'pendingSetupIntent': !exists(json, 'pending_setup_intent') ? undefined : json['pending_setup_intent'],
        'pendingUpdate': !exists(json, 'pending_update') ? undefined : json['pending_update'],
        'schedule': !exists(json, 'schedule') ? undefined : json['schedule'],
        'startDate': json['start_date'],
        'status': json['status'],
        'trialEnd': !exists(json, 'trial_end') ? undefined : json['trial_end'],
        'trialStart': !exists(json, 'trial_start') ? undefined : json['trial_start'],
    };
}

export function StripeSubscriptionToJSON(value?: StripeSubscription | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'application_fee_percent': value.applicationFeePercent,
        'automatic_tax': StripeAutomaticTaxToJSON(value.automaticTax),
        'billing_cycle_anchor': value.billingCycleAnchor,
        'cancel_at': value.cancelAt,
        'cancel_at_period_end': value.cancelAtPeriodEnd,
        'canceled_at': value.canceledAt,
        'collection_method': value.collectionMethod,
        'created': value.created,
        'current_period_end': value.currentPeriodEnd,
        'current_period_start': value.currentPeriodStart,
        'customer': value.customer,
        'days_until_due': value.daysUntilDue,
        'default_payment_method': value.defaultPaymentMethod,
        'default_source': value.defaultSource,
        'ended_at': value.endedAt,
        'id': value.id,
        'items': SubscriptionItemListToJSON(value.items),
        'livemode': value.livemode,
        'next_pending_invoice_item_invoice': value.nextPendingInvoiceItemInvoice,
        'object': value.object,
        'pending_setup_intent': value.pendingSetupIntent,
        'pending_update': value.pendingUpdate,
        'schedule': value.schedule,
        'start_date': value.startDate,
        'status': value.status,
        'trial_end': value.trialEnd,
        'trial_start': value.trialStart,
    };
}


