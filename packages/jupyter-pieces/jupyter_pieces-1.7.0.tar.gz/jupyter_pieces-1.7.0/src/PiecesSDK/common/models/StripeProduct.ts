//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Runtime Common Library
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    RuntimeStripeAnyMetadata,
    RuntimeStripeAnyMetadataFromJSON,
    RuntimeStripeAnyMetadataFromJSONTyped,
    RuntimeStripeAnyMetadataToJSON,
} from './';

/**
 * Products describe the specific goods or services you offer to your customers.
 * For example, you might offer a Standard and Premium version of your goods or service; each version would be a separate Product.
 * They can be used in conjunction with [Prices](https://stripe.com/docs/api#prices) to configure pricing in Checkout and Subscriptions.
 * Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription) or accept [one-time payments with Checkout](https://stripe.com/docs/payments/checkout/client#create-products) and more about [Products and Prices](https://stripe.com/docs/billing/prices-guide)
 * @export
 * @interface StripeProduct
 */
export interface StripeProduct {
    /**
     * Whether the product is currently available for purchase.
     * @type {boolean}
     * @memberof StripeProduct
     */
    active: boolean;
    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     * @type {number}
     * @memberof StripeProduct
     */
    created: number;
    /**
     * The product's description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes.
     * @type {string}
     * @memberof StripeProduct
     */
    description?: string | null;
    /**
     * Unique identifier for the object.
     * @type {string}
     * @memberof StripeProduct
     */
    id: string;
    /**
     * A list of up to 8 URLs of images for this product, meant to be displayable to the customer.
     * @type {Array<string>}
     * @memberof StripeProduct
     */
    images: Array<string>;
    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     * @type {boolean}
     * @memberof StripeProduct
     */
    livemode: boolean;
    /**
     * The product's name, meant to be displayable to the customer. Whenever this product is sold via a subscription, name will show up on associated invoice line item descriptions.
     * @type {string}
     * @memberof StripeProduct
     */
    name: string;
    /**
     * String representing the object's type. Objects of the same type share the same value.
     * @type {string}
     * @memberof StripeProduct
     */
    object: StripeProductObjectEnum;
    /**
     * Whether this product is shipped (i.e., physical goods).
     * @type {boolean}
     * @memberof StripeProduct
     */
    shippable?: boolean | null;
    /**
     * Extra information about a product which will appear on your customer's credit card statement. In the case that multiple products are billed at once, the first statement descriptor will be used.
     * @type {string}
     * @memberof StripeProduct
     */
    statementDescriptor?: string | null;
    /**
     * A label that represents units of this product in Stripe and on customersâ€™ receipts and invoices. When set, this will be included in associated invoice line item descriptions.
     * @type {string}
     * @memberof StripeProduct
     */
    unitLabel?: string | null;
    /**
     * Time at which the object was last updated. Measured in seconds since the Unix epoch.
     * @type {number}
     * @memberof StripeProduct
     */
    updated: number;
    /**
     * A URL of a publicly-accessible webpage for this product.
     * @type {string}
     * @memberof StripeProduct
     */
    url?: string | null;
    /**
     * 
     * @type {RuntimeStripeAnyMetadata}
     * @memberof StripeProduct
     */
    metadata?: RuntimeStripeAnyMetadata;
}

/**
* @export
* @enum {string}
*/
export enum StripeProductObjectEnum {
    Product = 'product'
}

export function StripeProductFromJSON(json: any): StripeProduct {
    return StripeProductFromJSONTyped(json, false);
}

export function StripeProductFromJSONTyped(json: any, ignoreDiscriminator: boolean): StripeProduct {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'active': json['active'],
        'created': json['created'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'id': json['id'],
        'images': json['images'],
        'livemode': json['livemode'],
        'name': json['name'],
        'object': json['object'],
        'shippable': !exists(json, 'shippable') ? undefined : json['shippable'],
        'statementDescriptor': !exists(json, 'statement_descriptor') ? undefined : json['statement_descriptor'],
        'unitLabel': !exists(json, 'unit_label') ? undefined : json['unit_label'],
        'updated': json['updated'],
        'url': !exists(json, 'url') ? undefined : json['url'],
        'metadata': !exists(json, 'metadata') ? undefined : RuntimeStripeAnyMetadataFromJSON(json['metadata']),
    };
}

export function StripeProductToJSON(value?: StripeProduct | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'active': value.active,
        'created': value.created,
        'description': value.description,
        'id': value.id,
        'images': value.images,
        'livemode': value.livemode,
        'name': value.name,
        'object': value.object,
        'shippable': value.shippable,
        'statement_descriptor': value.statementDescriptor,
        'unit_label': value.unitLabel,
        'updated': value.updated,
        'url': value.url,
        'metadata': RuntimeStripeAnyMetadataToJSON(value.metadata),
    };
}


