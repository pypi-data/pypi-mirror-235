//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Runtime Common Library
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EmbeddedModelSchema,
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    TrackedFormat,
    TrackedFormatFromJSON,
    TrackedFormatFromJSONTyped,
    TrackedFormatToJSON,
    TrackedFormatEventIdentifierDescriptionPairs,
    TrackedFormatEventIdentifierDescriptionPairsFromJSON,
    TrackedFormatEventIdentifierDescriptionPairsFromJSONTyped,
    TrackedFormatEventIdentifierDescriptionPairsToJSON,
    TrackedFormatEventMetadata,
    TrackedFormatEventMetadataFromJSON,
    TrackedFormatEventMetadataFromJSONTyped,
    TrackedFormatEventMetadataToJSON,
} from './';

/**
 * This is a model that represents a generic event that we may want to track in relation to a format, for example beamed, copied, downloaded, and view. ** Note: This is the model that will get returned by our api, and is. Representative of a full TrackedFormat event. **
 * @export
 * @interface TrackedFormatEvent
 */
export interface TrackedFormatEvent {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof TrackedFormatEvent
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {TrackedFormat}
     * @memberof TrackedFormatEvent
     */
    format: TrackedFormat;
    /**
     * 
     * @type {TrackedFormatEventIdentifierDescriptionPairs}
     * @memberof TrackedFormatEvent
     */
    identifierDescriptionPair: TrackedFormatEventIdentifierDescriptionPairs;
    /**
     * 
     * @type {TrackedFormatEventMetadata}
     * @memberof TrackedFormatEvent
     */
    metadata?: TrackedFormatEventMetadata;
}

export function TrackedFormatEventFromJSON(json: any): TrackedFormatEvent {
    return TrackedFormatEventFromJSONTyped(json, false);
}

export function TrackedFormatEventFromJSONTyped(json: any, ignoreDiscriminator: boolean): TrackedFormatEvent {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'schema': !exists(json, 'schema') ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'format': TrackedFormatFromJSON(json[' format']),
        'identifierDescriptionPair': TrackedFormatEventIdentifierDescriptionPairsFromJSON(json['identifier_description_pair']),
        'metadata': !exists(json, 'metadata') ? undefined : TrackedFormatEventMetadataFromJSON(json['metadata']),
    };
}

export function TrackedFormatEventToJSON(value?: TrackedFormatEvent | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'schema': EmbeddedModelSchemaToJSON(value.schema),
        ' format': TrackedFormatToJSON(value.format),
        'identifier_description_pair': TrackedFormatEventIdentifierDescriptionPairsToJSON(value.identifierDescriptionPair),
        'metadata': TrackedFormatEventMetadataToJSON(value.metadata),
    };
}


