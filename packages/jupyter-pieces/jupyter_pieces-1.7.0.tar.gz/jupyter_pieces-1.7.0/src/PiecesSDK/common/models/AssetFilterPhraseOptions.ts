//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Runtime Common Library
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AnnotationTypeEnum,
    AnnotationTypeEnumFromJSON,
    AnnotationTypeEnumFromJSONTyped,
    AnnotationTypeEnumToJSON,
    EmbeddedModelSchema,
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
} from './';

/**
 * 
 * @export
 * @interface AssetFilterPhraseOptions
 */
export interface AssetFilterPhraseOptions {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof AssetFilterPhraseOptions
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {AnnotationTypeEnum}
     * @memberof AssetFilterPhraseOptions
     */
    annotation?: AnnotationTypeEnum;
}

export function AssetFilterPhraseOptionsFromJSON(json: any): AssetFilterPhraseOptions {
    return AssetFilterPhraseOptionsFromJSONTyped(json, false);
}

export function AssetFilterPhraseOptionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): AssetFilterPhraseOptions {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'schema': !exists(json, 'schema') ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'annotation': !exists(json, 'annotation') ? undefined : AnnotationTypeEnumFromJSON(json['annotation']),
    };
}

export function AssetFilterPhraseOptionsToJSON(value?: AssetFilterPhraseOptions | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'schema': EmbeddedModelSchemaToJSON(value.schema),
        'annotation': AnnotationTypeEnumToJSON(value.annotation),
    };
}


