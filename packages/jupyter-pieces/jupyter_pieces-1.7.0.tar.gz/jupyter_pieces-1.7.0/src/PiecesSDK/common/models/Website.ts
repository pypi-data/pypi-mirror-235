//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Runtime Common Library
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EmbeddedModelSchema,
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    FlattenedAsset,
    FlattenedAssetFromJSON,
    FlattenedAssetFromJSONTyped,
    FlattenedAssetToJSON,
    FlattenedFormat,
    FlattenedFormatFromJSON,
    FlattenedFormatFromJSONTyped,
    FlattenedFormatToJSON,
    FlattenedPersons,
    FlattenedPersonsFromJSON,
    FlattenedPersonsFromJSONTyped,
    FlattenedPersonsToJSON,
    GroupedTimestamp,
    GroupedTimestampFromJSON,
    GroupedTimestampFromJSONTyped,
    GroupedTimestampToJSON,
    MechanismEnum,
    MechanismEnumFromJSON,
    MechanismEnumFromJSONTyped,
    MechanismEnumToJSON,
} from './';

/**
 * This is a specific model for related websites to an asset.
 * @export
 * @interface Website
 */
export interface Website {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof Website
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {string}
     * @memberof Website
     */
    id: string;
    /**
     * 
     * @type {FlattenedAsset}
     * @memberof Website
     */
    asset?: FlattenedAsset;
    /**
     * this is the actual website url.
     * @type {string}
     * @memberof Website
     */
    url: string;
    /**
     * This is a name that is customized.
     * @type {string}
     * @memberof Website
     */
    name: string;
    /**
     * 
     * @type {FlattenedFormat}
     * @memberof Website
     */
    format?: FlattenedFormat;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof Website
     */
    created: GroupedTimestamp;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof Website
     */
    updated: GroupedTimestamp;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof Website
     */
    deleted?: GroupedTimestamp;
    /**
     * 
     * @type {MechanismEnum}
     * @memberof Website
     */
    mechanism: MechanismEnum;
    /**
     * This is an optional value that will keep track of the number of times this has been interacted with.
     * @type {number}
     * @memberof Website
     */
    interactions?: number;
    /**
     * 
     * @type {FlattenedPersons}
     * @memberof Website
     */
    persons?: FlattenedPersons;
}

export function WebsiteFromJSON(json: any): Website {
    return WebsiteFromJSONTyped(json, false);
}

export function WebsiteFromJSONTyped(json: any, ignoreDiscriminator: boolean): Website {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'schema': !exists(json, 'schema') ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'id': json['id'],
        'asset': !exists(json, 'asset') ? undefined : FlattenedAssetFromJSON(json['asset']),
        'url': json['url'],
        'name': json['name'],
        'format': !exists(json, 'format') ? undefined : FlattenedFormatFromJSON(json['format']),
        'created': GroupedTimestampFromJSON(json['created']),
        'updated': GroupedTimestampFromJSON(json['updated']),
        'deleted': !exists(json, 'deleted') ? undefined : GroupedTimestampFromJSON(json['deleted']),
        'mechanism': MechanismEnumFromJSON(json['mechanism']),
        'interactions': !exists(json, 'interactions') ? undefined : json['interactions'],
        'persons': !exists(json, 'persons') ? undefined : FlattenedPersonsFromJSON(json['persons']),
    };
}

export function WebsiteToJSON(value?: Website | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'schema': EmbeddedModelSchemaToJSON(value.schema),
        'id': value.id,
        'asset': FlattenedAssetToJSON(value.asset),
        'url': value.url,
        'name': value.name,
        'format': FlattenedFormatToJSON(value.format),
        'created': GroupedTimestampToJSON(value.created),
        'updated': GroupedTimestampToJSON(value.updated),
        'deleted': GroupedTimestampToJSON(value.deleted),
        'mechanism': MechanismEnumToJSON(value.mechanism),
        'interactions': value.interactions,
        'persons': FlattenedPersonsToJSON(value.persons),
    };
}


