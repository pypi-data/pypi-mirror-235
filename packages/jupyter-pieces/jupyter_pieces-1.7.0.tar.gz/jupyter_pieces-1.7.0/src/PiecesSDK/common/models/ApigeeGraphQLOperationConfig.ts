//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Runtime Common Library
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ApigeeAttribute,
    ApigeeAttributeFromJSON,
    ApigeeAttributeFromJSONTyped,
    ApigeeAttributeToJSON,
    ApigeeGraphQLOperation,
    ApigeeGraphQLOperationFromJSON,
    ApigeeGraphQLOperationFromJSONTyped,
    ApigeeGraphQLOperationToJSON,
    ApigeeQuota,
    ApigeeQuotaFromJSON,
    ApigeeQuotaFromJSONTyped,
    ApigeeQuotaToJSON,
} from './';

/**
 * Binds the resources in a proxy or remote service with the GraphQL operation and its associated quota enforcement.
 * @export
 * @interface ApigeeGraphQLOperationConfig
 */
export interface ApigeeGraphQLOperationConfig {
    /**
     * Required. Name of the API proxy endpoint or remote service with which the GraphQL operation and quota are associated.
     * @type {string}
     * @memberof ApigeeGraphQLOperationConfig
     */
    apiSource?: string;
    /**
     * Custom attributes associated with the operation.
     * @type {Array<ApigeeAttribute>}
     * @memberof ApigeeGraphQLOperationConfig
     */
    attributes?: Array<ApigeeAttribute>;
    /**
     * Required. List of GraphQL name/operation type pairs for the proxy or remote service to which quota will be applied. If only operation types are specified, the quota will be applied to all GraphQL requests irrespective of the GraphQL name. **Note**: Currently, you can specify only a single GraphQLOperation. Specifying more than one will cause the operation to fail.
     * @type {Array<ApigeeGraphQLOperation>}
     * @memberof ApigeeGraphQLOperationConfig
     */
    operations?: Array<ApigeeGraphQLOperation>;
    /**
     * 
     * @type {ApigeeQuota}
     * @memberof ApigeeGraphQLOperationConfig
     */
    quota?: ApigeeQuota;
}

export function ApigeeGraphQLOperationConfigFromJSON(json: any): ApigeeGraphQLOperationConfig {
    return ApigeeGraphQLOperationConfigFromJSONTyped(json, false);
}

export function ApigeeGraphQLOperationConfigFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApigeeGraphQLOperationConfig {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'apiSource': !exists(json, 'apiSource') ? undefined : json['apiSource'],
        'attributes': !exists(json, 'attributes') ? undefined : ((json['attributes'] as Array<any>).map(ApigeeAttributeFromJSON)),
        'operations': !exists(json, 'operations') ? undefined : ((json['operations'] as Array<any>).map(ApigeeGraphQLOperationFromJSON)),
        'quota': !exists(json, 'quota') ? undefined : ApigeeQuotaFromJSON(json['quota']),
    };
}

export function ApigeeGraphQLOperationConfigToJSON(value?: ApigeeGraphQLOperationConfig | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'apiSource': value.apiSource,
        'attributes': value.attributes === undefined ? undefined : ((value.attributes as Array<any>).map(ApigeeAttributeToJSON)),
        'operations': value.operations === undefined ? undefined : ((value.operations as Array<any>).map(ApigeeGraphQLOperationToJSON)),
        'quota': ApigeeQuotaToJSON(value.quota),
    };
}


