//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Runtime Common Library
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Assets,
    AssetsFromJSON,
    AssetsFromJSONTyped,
    AssetsToJSON,
    EmbeddedModelSchema,
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
} from './';

/**
 * This is the ReuseSuggestion. Mainly creating an additional model here because I imagine that we will want to add some additional data to this in the future (potentially with more numerical data that is emitted from the ML Models)
 * 
 * **Note: suggested is required here because we will want to say if we suggested to take this action of reuse or not.
 * 
 * ** Thoughts here. We could potentially return Assets: which would be an iterable of assets in most relavent order for the user to reuse if they want.
 * @export
 * @interface ReuseSuggestion
 */
export interface ReuseSuggestion {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof ReuseSuggestion
     */
    schema?: EmbeddedModelSchema;
    /**
     * This is a boolean, that will say if you should or should not take action.
     * @type {boolean}
     * @memberof ReuseSuggestion
     */
    suggested: boolean;
    /**
     * 
     * @type {Assets}
     * @memberof ReuseSuggestion
     */
    assets: Assets;
}

export function ReuseSuggestionFromJSON(json: any): ReuseSuggestion {
    return ReuseSuggestionFromJSONTyped(json, false);
}

export function ReuseSuggestionFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReuseSuggestion {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'schema': !exists(json, 'schema') ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'suggested': json['suggested'],
        'assets': AssetsFromJSON(json['assets']),
    };
}

export function ReuseSuggestionToJSON(value?: ReuseSuggestion | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'schema': EmbeddedModelSchemaToJSON(value.schema),
        'suggested': value.suggested,
        'assets': AssetsToJSON(value.assets),
    };
}


