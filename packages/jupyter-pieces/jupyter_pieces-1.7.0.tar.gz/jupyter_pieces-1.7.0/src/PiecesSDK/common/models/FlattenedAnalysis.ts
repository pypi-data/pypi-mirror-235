//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Runtime Common Library
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CodeAnalysis,
    CodeAnalysisFromJSON,
    CodeAnalysisFromJSONTyped,
    CodeAnalysisToJSON,
    EmbeddedModelSchema,
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    FlattenedImageAnalysis,
    FlattenedImageAnalysisFromJSON,
    FlattenedImageAnalysisFromJSONTyped,
    FlattenedImageAnalysisToJSON,
} from './';

/**
 * 
 * @export
 * @interface FlattenedAnalysis
 */
export interface FlattenedAnalysis {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof FlattenedAnalysis
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {CodeAnalysis}
     * @memberof FlattenedAnalysis
     */
    code?: CodeAnalysis;
    /**
     * 
     * @type {string}
     * @memberof FlattenedAnalysis
     */
    id: string;
    /**
     * this is a reference to the format that it belongs too.
     * @type {string}
     * @memberof FlattenedAnalysis
     */
    format: string;
    /**
     * 
     * @type {FlattenedImageAnalysis}
     * @memberof FlattenedAnalysis
     */
    image?: FlattenedImageAnalysis;
}

export function FlattenedAnalysisFromJSON(json: any): FlattenedAnalysis {
    return FlattenedAnalysisFromJSONTyped(json, false);
}

export function FlattenedAnalysisFromJSONTyped(json: any, ignoreDiscriminator: boolean): FlattenedAnalysis {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'schema': !exists(json, 'schema') ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'code': !exists(json, 'code') ? undefined : CodeAnalysisFromJSON(json['code']),
        'id': json['id'],
        'format': json['format'],
        'image': !exists(json, 'image') ? undefined : FlattenedImageAnalysisFromJSON(json['image']),
    };
}

export function FlattenedAnalysisToJSON(value?: FlattenedAnalysis | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'schema': EmbeddedModelSchemaToJSON(value.schema),
        'code': CodeAnalysisToJSON(value.code),
        'id': value.id,
        'format': value.format,
        'image': FlattenedImageAnalysisToJSON(value.image),
    };
}


