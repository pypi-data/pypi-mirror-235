//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Runtime Common Library
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EmbeddedModelSchema,
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
} from './';

/**
 * A model to support https://auth0.com/docs/api/authentication#logout
 * @export
 * @interface InvalidatedPKCE
 */
export interface InvalidatedPKCE {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof InvalidatedPKCE
     */
    schema?: EmbeddedModelSchema;
    /**
     * URL to redirect the user after the logout. If you want to navigate the user to a specific URL after the logout, set that URL at the returnTo parameter. The URL should be included in any the appropriate Allowed Logout URLs list.
     * @type {string}
     * @memberof InvalidatedPKCE
     */
    returnTo?: string;
    /**
     * The client_id of your application.
     * @type {string}
     * @memberof InvalidatedPKCE
     */
    clientId?: string;
    /**
     * Add this query string parameter to the logout URL, to log the user out of their identity provider, as well: https://pieces.us.auth0.com/v2/logout?federated.
     * @type {boolean}
     * @memberof InvalidatedPKCE
     */
    federated?: boolean;
}

export function InvalidatedPKCEFromJSON(json: any): InvalidatedPKCE {
    return InvalidatedPKCEFromJSONTyped(json, false);
}

export function InvalidatedPKCEFromJSONTyped(json: any, ignoreDiscriminator: boolean): InvalidatedPKCE {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'schema': !exists(json, 'schema') ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'returnTo': !exists(json, 'returnTo') ? undefined : json['returnTo'],
        'clientId': !exists(json, 'client_id') ? undefined : json['client_id'],
        'federated': !exists(json, 'federated') ? undefined : json['federated'],
    };
}

export function InvalidatedPKCEToJSON(value?: InvalidatedPKCE | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'schema': EmbeddedModelSchemaToJSON(value.schema),
        'returnTo': value.returnTo,
        'client_id': value.clientId,
        'federated': value.federated,
    };
}


