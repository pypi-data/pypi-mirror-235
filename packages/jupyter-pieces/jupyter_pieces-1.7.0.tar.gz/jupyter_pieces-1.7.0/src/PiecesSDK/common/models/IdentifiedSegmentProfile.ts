//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Runtime Common Library
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EmbeddedModelSchema,
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    IdentifiedSegmentProfileContext,
    IdentifiedSegmentProfileContextFromJSON,
    IdentifiedSegmentProfileContextFromJSONTyped,
    IdentifiedSegmentProfileContextToJSON,
    IdentifiedSegmentProfileIntegrations,
    IdentifiedSegmentProfileIntegrationsFromJSON,
    IdentifiedSegmentProfileIntegrationsFromJSONTyped,
    IdentifiedSegmentProfileIntegrationsToJSON,
    IdentifiedSegmentProfileTraits,
    IdentifiedSegmentProfileTraitsFromJSON,
    IdentifiedSegmentProfileTraitsFromJSONTyped,
    IdentifiedSegmentProfileTraitsToJSON,
} from './';

/**
 * A model used in the process of tracking a user through Pieces with an Identify Call
 * @export
 * @interface IdentifiedSegmentProfile
 */
export interface IdentifiedSegmentProfile {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof IdentifiedSegmentProfile
     */
    schema?: EmbeddedModelSchema;
    /**
     * optional if userID is set instead. A pseudo-unique substitute for a User ID, for cases when you donâ€™t have an absolutely unique identifier. A userId or an anonymousId is required.
     * See the Identities docs for more details.
     * @type {string}
     * @memberof IdentifiedSegmentProfile
     */
    anonymousId: string;
    /**
     * Optional if anonymousID is set instead, Unique identifier for the user in your database. A userId or an anonymousId is required. See the Identities docs for more details.
     * @type {string}
     * @memberof IdentifiedSegmentProfile
     */
    userId?: string;
    /**
     * 
     * @type {IdentifiedSegmentProfileContext}
     * @memberof IdentifiedSegmentProfile
     */
    context: IdentifiedSegmentProfileContext;
    /**
     * 
     * @type {IdentifiedSegmentProfileIntegrations}
     * @memberof IdentifiedSegmentProfile
     */
    integrations: IdentifiedSegmentProfileIntegrations;
    /**
     * 
     * @type {IdentifiedSegmentProfileTraits}
     * @memberof IdentifiedSegmentProfile
     */
    traits: IdentifiedSegmentProfileTraits;
}

export function IdentifiedSegmentProfileFromJSON(json: any): IdentifiedSegmentProfile {
    return IdentifiedSegmentProfileFromJSONTyped(json, false);
}

export function IdentifiedSegmentProfileFromJSONTyped(json: any, ignoreDiscriminator: boolean): IdentifiedSegmentProfile {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'schema': !exists(json, 'schema') ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'anonymousId': json['anonymousId'],
        'userId': !exists(json, 'userId') ? undefined : json['userId'],
        'context': IdentifiedSegmentProfileContextFromJSON(json['context']),
        'integrations': IdentifiedSegmentProfileIntegrationsFromJSON(json['integrations']),
        'traits': IdentifiedSegmentProfileTraitsFromJSON(json['traits']),
    };
}

export function IdentifiedSegmentProfileToJSON(value?: IdentifiedSegmentProfile | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'schema': EmbeddedModelSchemaToJSON(value.schema),
        'anonymousId': value.anonymousId,
        'userId': value.userId,
        'context': IdentifiedSegmentProfileContextToJSON(value.context),
        'integrations': IdentifiedSegmentProfileIntegrationsToJSON(value.integrations),
        'traits': IdentifiedSegmentProfileTraitsToJSON(value.traits),
    };
}


