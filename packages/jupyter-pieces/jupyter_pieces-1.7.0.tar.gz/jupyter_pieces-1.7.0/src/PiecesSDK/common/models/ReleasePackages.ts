//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Runtime Common Library
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    BuildPackages,
    BuildPackagesFromJSON,
    BuildPackagesFromJSONTyped,
    BuildPackagesToJSON,
    EmbeddedModelSchema,
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
} from './';

/**
 * 
 * @export
 * @interface ReleasePackages
 */
export interface ReleasePackages {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof ReleasePackages
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {BuildPackages}
     * @memberof ReleasePackages
     */
    pkg?: BuildPackages;
    /**
     * 
     * @type {BuildPackages}
     * @memberof ReleasePackages
     */
    zip?: BuildPackages;
    /**
     * 
     * @type {BuildPackages}
     * @memberof ReleasePackages
     */
    linux?: BuildPackages;
    /**
     * 
     * @type {BuildPackages}
     * @memberof ReleasePackages
     */
    snap?: BuildPackages;
    /**
     * 
     * @type {BuildPackages}
     * @memberof ReleasePackages
     */
    macos?: BuildPackages;
    /**
     * 
     * @type {BuildPackages}
     * @memberof ReleasePackages
     */
    windows?: BuildPackages;
    /**
     * 
     * @type {BuildPackages}
     * @memberof ReleasePackages
     */
    windowsMsix?: BuildPackages;
    /**
     * 
     * @type {BuildPackages}
     * @memberof ReleasePackages
     */
    tarGz?: BuildPackages;
    /**
     * 
     * @type {BuildPackages}
     * @memberof ReleasePackages
     */
    appinstaller?: BuildPackages;
    /**
     * 
     * @type {BuildPackages}
     * @memberof ReleasePackages
     */
    crx?: BuildPackages;
    /**
     * 
     * @type {BuildPackages}
     * @memberof ReleasePackages
     */
    sublimePackage?: BuildPackages;
    /**
     * 
     * @type {BuildPackages}
     * @memberof ReleasePackages
     */
    vsix?: BuildPackages;
    /**
     * 
     * @type {BuildPackages}
     * @memberof ReleasePackages
     */
    dmg?: BuildPackages;
    /**
     * 
     * @type {BuildPackages}
     * @memberof ReleasePackages
     */
    vsixDarwinArm64?: BuildPackages;
    /**
     * 
     * @type {BuildPackages}
     * @memberof ReleasePackages
     */
    vsixDarwinX64?: BuildPackages;
    /**
     * 
     * @type {BuildPackages}
     * @memberof ReleasePackages
     */
    vsixLinuxX64?: BuildPackages;
    /**
     * 
     * @type {BuildPackages}
     * @memberof ReleasePackages
     */
    vsixWin32X64?: BuildPackages;
    /**
     * 
     * @type {BuildPackages}
     * @memberof ReleasePackages
     */
    macosArm64?: BuildPackages;
    /**
     * 
     * @type {BuildPackages}
     * @memberof ReleasePackages
     */
    dmgArm64?: BuildPackages;
}

export function ReleasePackagesFromJSON(json: any): ReleasePackages {
    return ReleasePackagesFromJSONTyped(json, false);
}

export function ReleasePackagesFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReleasePackages {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'schema': !exists(json, 'schema') ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'pkg': !exists(json, 'pkg') ? undefined : BuildPackagesFromJSON(json['pkg']),
        'zip': !exists(json, 'zip') ? undefined : BuildPackagesFromJSON(json['zip']),
        'linux': !exists(json, 'linux') ? undefined : BuildPackagesFromJSON(json['linux']),
        'snap': !exists(json, 'snap') ? undefined : BuildPackagesFromJSON(json['snap']),
        'macos': !exists(json, 'macos') ? undefined : BuildPackagesFromJSON(json['macos']),
        'windows': !exists(json, 'windows') ? undefined : BuildPackagesFromJSON(json['windows']),
        'windowsMsix': !exists(json, 'windows-msix') ? undefined : BuildPackagesFromJSON(json['windows-msix']),
        'tarGz': !exists(json, 'tar.gz') ? undefined : BuildPackagesFromJSON(json['tar.gz']),
        'appinstaller': !exists(json, 'appinstaller') ? undefined : BuildPackagesFromJSON(json['appinstaller']),
        'crx': !exists(json, 'crx') ? undefined : BuildPackagesFromJSON(json['crx']),
        'sublimePackage': !exists(json, 'sublime_package') ? undefined : BuildPackagesFromJSON(json['sublime_package']),
        'vsix': !exists(json, 'vsix') ? undefined : BuildPackagesFromJSON(json['vsix']),
        'dmg': !exists(json, 'dmg') ? undefined : BuildPackagesFromJSON(json['dmg']),
        'vsixDarwinArm64': !exists(json, 'vsix-darwin-arm64') ? undefined : BuildPackagesFromJSON(json['vsix-darwin-arm64']),
        'vsixDarwinX64': !exists(json, 'vsix-darwin-x64') ? undefined : BuildPackagesFromJSON(json['vsix-darwin-x64']),
        'vsixLinuxX64': !exists(json, 'vsix-linux-x64') ? undefined : BuildPackagesFromJSON(json['vsix-linux-x64']),
        'vsixWin32X64': !exists(json, 'vsix-win32-x64') ? undefined : BuildPackagesFromJSON(json['vsix-win32-x64']),
        'macosArm64': !exists(json, 'macos-arm64') ? undefined : BuildPackagesFromJSON(json['macos-arm64']),
        'dmgArm64': !exists(json, 'dmg-arm64') ? undefined : BuildPackagesFromJSON(json['dmg-arm64']),
    };
}

export function ReleasePackagesToJSON(value?: ReleasePackages | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'schema': EmbeddedModelSchemaToJSON(value.schema),
        'pkg': BuildPackagesToJSON(value.pkg),
        'zip': BuildPackagesToJSON(value.zip),
        'linux': BuildPackagesToJSON(value.linux),
        'snap': BuildPackagesToJSON(value.snap),
        'macos': BuildPackagesToJSON(value.macos),
        'windows': BuildPackagesToJSON(value.windows),
        'windows-msix': BuildPackagesToJSON(value.windowsMsix),
        'tar.gz': BuildPackagesToJSON(value.tarGz),
        'appinstaller': BuildPackagesToJSON(value.appinstaller),
        'crx': BuildPackagesToJSON(value.crx),
        'sublime_package': BuildPackagesToJSON(value.sublimePackage),
        'vsix': BuildPackagesToJSON(value.vsix),
        'dmg': BuildPackagesToJSON(value.dmg),
        'vsix-darwin-arm64': BuildPackagesToJSON(value.vsixDarwinArm64),
        'vsix-darwin-x64': BuildPackagesToJSON(value.vsixDarwinX64),
        'vsix-linux-x64': BuildPackagesToJSON(value.vsixLinuxX64),
        'vsix-win32-x64': BuildPackagesToJSON(value.vsixWin32X64),
        'macos-arm64': BuildPackagesToJSON(value.macosArm64),
        'dmg-arm64': BuildPackagesToJSON(value.dmgArm64),
    };
}


