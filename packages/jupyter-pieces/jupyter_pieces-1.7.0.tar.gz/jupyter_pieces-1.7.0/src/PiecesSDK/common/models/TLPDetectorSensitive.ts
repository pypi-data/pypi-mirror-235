//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Runtime Common Library
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EmbeddedModelSchema,
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    SensitiveCategoryEnum,
    SensitiveCategoryEnumFromJSON,
    SensitiveCategoryEnumFromJSONTyped,
    SensitiveCategoryEnumToJSON,
    SensitiveSeverityEnum,
    SensitiveSeverityEnumFromJSON,
    SensitiveSeverityEnumFromJSONTyped,
    SensitiveSeverityEnumToJSON,
    TextMatch,
    TextMatchFromJSON,
    TextMatchFromJSONTyped,
    TextMatchToJSON,
} from './';

/**
 * 
 * @export
 * @interface TLPDetectorSensitive
 */
export interface TLPDetectorSensitive {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof TLPDetectorSensitive
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {TextMatch}
     * @memberof TLPDetectorSensitive
     */
    match: TextMatch;
    /**
     * entropy of the sensitive
     * @type {number}
     * @memberof TLPDetectorSensitive
     */
    entropy?: number;
    /**
     * 
     * @type {SensitiveSeverityEnum}
     * @memberof TLPDetectorSensitive
     */
    severity: SensitiveSeverityEnum;
    /**
     * this is the description of the type of key we match with.
     * @type {string}
     * @memberof TLPDetectorSensitive
     */
    description: string;
    /**
     * 
     * @type {SensitiveCategoryEnum}
     * @memberof TLPDetectorSensitive
     */
    category: SensitiveCategoryEnum;
}

export function TLPDetectorSensitiveFromJSON(json: any): TLPDetectorSensitive {
    return TLPDetectorSensitiveFromJSONTyped(json, false);
}

export function TLPDetectorSensitiveFromJSONTyped(json: any, ignoreDiscriminator: boolean): TLPDetectorSensitive {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'schema': !exists(json, 'schema') ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'match': TextMatchFromJSON(json['match']),
        'entropy': !exists(json, 'entropy') ? undefined : json['entropy'],
        'severity': SensitiveSeverityEnumFromJSON(json['severity']),
        'description': json['description'],
        'category': SensitiveCategoryEnumFromJSON(json['category']),
    };
}

export function TLPDetectorSensitiveToJSON(value?: TLPDetectorSensitive | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'schema': EmbeddedModelSchemaToJSON(value.schema),
        'match': TextMatchToJSON(value.match),
        'entropy': value.entropy,
        'severity': SensitiveSeverityEnumToJSON(value.severity),
        'description': value.description,
        'category': SensitiveCategoryEnumToJSON(value.category),
    };
}


