//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Runtime Common Library
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EmbeddedModelSchema,
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
} from './';

/**
 * This is a String representaion of any of these changes.
 * 
 * [NOT IMPLEMENTED] base64, base64_url, data_url
 * [IMPLEMENTED] raw
 * @export
 * @interface TransferableString
 */
export interface TransferableString {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof TransferableString
     */
    schema?: EmbeddedModelSchema;
    /**
     * IMPLEMENTED
     * @type {string}
     * @memberof TransferableString
     */
    raw?: string;
    /**
     * NOT IMPLEMENTED
     * @type {string}
     * @memberof TransferableString
     */
    base64?: string;
    /**
     * NOT IMPLEMENTED
     * @type {string}
     * @memberof TransferableString
     */
    base64Url?: string;
    /**
     * NOT IMPLEMENTED
     * @type {string}
     * @memberof TransferableString
     */
    dataUrl?: string;
}

export function TransferableStringFromJSON(json: any): TransferableString {
    return TransferableStringFromJSONTyped(json, false);
}

export function TransferableStringFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransferableString {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'schema': !exists(json, 'schema') ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'raw': !exists(json, 'raw') ? undefined : json['raw'],
        'base64': !exists(json, 'base64') ? undefined : json['base64'],
        'base64Url': !exists(json, 'base64_url') ? undefined : json['base64_url'],
        'dataUrl': !exists(json, 'data_url') ? undefined : json['data_url'],
    };
}

export function TransferableStringToJSON(value?: TransferableString | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'schema': EmbeddedModelSchemaToJSON(value.schema),
        'raw': value.raw,
        'base64': value.base64,
        'base64_url': value.base64Url,
        'data_url': value.dataUrl,
    };
}


