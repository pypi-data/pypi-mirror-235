//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Runtime Common Library
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * X.509 certificate as defined in RFC 5280.
 * @export
 * @interface ApigeeCertInfo
 */
export interface ApigeeCertInfo {
    /**
     * X.509 basic constraints extension.
     * @type {string}
     * @memberof ApigeeCertInfo
     */
    basicConstraints?: string;
    /**
     * X.509 `notAfter` validity period in milliseconds since epoch.
     * @type {string}
     * @memberof ApigeeCertInfo
     */
    expiryDate?: string;
    /**
     * Flag that specifies whether the certificate is valid. Flag is set to `Yes` if the certificate is valid, `No` if expired, or `Not yet` if not yet valid.
     * @type {string}
     * @memberof ApigeeCertInfo
     */
    isValid?: string;
    /**
     * X.509 issuer.
     * @type {string}
     * @memberof ApigeeCertInfo
     */
    issuer?: string;
    /**
     * Public key component of the X.509 subject public key info.
     * @type {string}
     * @memberof ApigeeCertInfo
     */
    publicKey?: string;
    /**
     * X.509 serial number.
     * @type {string}
     * @memberof ApigeeCertInfo
     */
    serialNumber?: string;
    /**
     * X.509 signatureAlgorithm.
     * @type {string}
     * @memberof ApigeeCertInfo
     */
    sigAlgName?: string;
    /**
     * X.509 subject.
     * @type {string}
     * @memberof ApigeeCertInfo
     */
    subject?: string;
    /**
     * X.509 subject alternative names (SANs) extension.
     * @type {Array<string>}
     * @memberof ApigeeCertInfo
     */
    subjectAlternativeNames?: Array<string>;
    /**
     * X.509 `notBefore` validity period in milliseconds since epoch.
     * @type {string}
     * @memberof ApigeeCertInfo
     */
    validFrom?: string;
    /**
     * X.509 version.
     * @type {number}
     * @memberof ApigeeCertInfo
     */
    version?: number;
}

export function ApigeeCertInfoFromJSON(json: any): ApigeeCertInfo {
    return ApigeeCertInfoFromJSONTyped(json, false);
}

export function ApigeeCertInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApigeeCertInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'basicConstraints': !exists(json, 'basicConstraints') ? undefined : json['basicConstraints'],
        'expiryDate': !exists(json, 'expiryDate') ? undefined : json['expiryDate'],
        'isValid': !exists(json, 'isValid') ? undefined : json['isValid'],
        'issuer': !exists(json, 'issuer') ? undefined : json['issuer'],
        'publicKey': !exists(json, 'publicKey') ? undefined : json['publicKey'],
        'serialNumber': !exists(json, 'serialNumber') ? undefined : json['serialNumber'],
        'sigAlgName': !exists(json, 'sigAlgName') ? undefined : json['sigAlgName'],
        'subject': !exists(json, 'subject') ? undefined : json['subject'],
        'subjectAlternativeNames': !exists(json, 'subjectAlternativeNames') ? undefined : json['subjectAlternativeNames'],
        'validFrom': !exists(json, 'validFrom') ? undefined : json['validFrom'],
        'version': !exists(json, 'version') ? undefined : json['version'],
    };
}

export function ApigeeCertInfoToJSON(value?: ApigeeCertInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'basicConstraints': value.basicConstraints,
        'expiryDate': value.expiryDate,
        'isValid': value.isValid,
        'issuer': value.issuer,
        'publicKey': value.publicKey,
        'serialNumber': value.serialNumber,
        'sigAlgName': value.sigAlgName,
        'subject': value.subject,
        'subjectAlternativeNames': value.subjectAlternativeNames,
        'validFrom': value.validFrom,
        'version': value.version,
    };
}


