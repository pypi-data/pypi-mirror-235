//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Runtime Common Library
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EmbeddedModelSchema,
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    Format,
    FormatFromJSON,
    FormatFromJSONTyped,
    FormatToJSON,
    Model,
    ModelFromJSON,
    ModelFromJSONTyped,
    ModelToJSON,
} from './';

/**
 * This is the data collected during the ocr analysis of an image.
 * @export
 * @interface OCRAnalysis
 */
export interface OCRAnalysis {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof OCRAnalysis
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {string}
     * @memberof OCRAnalysis
     */
    id: string;
    /**
     * 
     * @type {Format}
     * @memberof OCRAnalysis
     */
    raw: Format;
    /**
     * 
     * @type {Format}
     * @memberof OCRAnalysis
     */
    hocr: Format;
    /**
     * this is a reference the the imageAnalysis.
     * @type {string}
     * @memberof OCRAnalysis
     */
    image: string;
    /**
     * 
     * @type {Model}
     * @memberof OCRAnalysis
     */
    model: Model;
}

export function OCRAnalysisFromJSON(json: any): OCRAnalysis {
    return OCRAnalysisFromJSONTyped(json, false);
}

export function OCRAnalysisFromJSONTyped(json: any, ignoreDiscriminator: boolean): OCRAnalysis {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'schema': !exists(json, 'schema') ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'id': json['id'],
        'raw': FormatFromJSON(json['raw']),
        'hocr': FormatFromJSON(json['hocr']),
        'image': json['image'],
        'model': ModelFromJSON(json['model']),
    };
}

export function OCRAnalysisToJSON(value?: OCRAnalysis | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'schema': EmbeddedModelSchemaToJSON(value.schema),
        'id': value.id,
        'raw': FormatToJSON(value.raw),
        'hocr': FormatToJSON(value.hocr),
        'image': value.image,
        'model': ModelToJSON(value.model),
    };
}


