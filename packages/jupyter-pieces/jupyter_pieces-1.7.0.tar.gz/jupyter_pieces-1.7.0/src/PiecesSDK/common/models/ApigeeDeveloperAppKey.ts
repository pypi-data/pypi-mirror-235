//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Runtime Common Library
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ApigeeAttribute,
    ApigeeAttributeFromJSON,
    ApigeeAttributeFromJSONTyped,
    ApigeeAttributeToJSON,
} from './';

/**
 * 
 * @export
 * @interface ApigeeDeveloperAppKey
 */
export interface ApigeeDeveloperAppKey {
    /**
     * List of API products for which the credential can be used. **Note**: Do not specify the list of API products when creating a consumer key and secret for a developer app. Instead, use the UpdateDeveloperAppKey API to make the association after the consumer key and secret are created.
     * @type {Array<string>}
     * @memberof ApigeeDeveloperAppKey
     */
    apiProducts?: Array<string>;
    /**
     * List of attributes associated with the credential.
     * @type {Array<ApigeeAttribute>}
     * @memberof ApigeeDeveloperAppKey
     */
    attributes?: Array<ApigeeAttribute>;
    /**
     * Consumer key.
     * @type {string}
     * @memberof ApigeeDeveloperAppKey
     */
    consumerKey?: string;
    /**
     * Secret key.
     * @type {string}
     * @memberof ApigeeDeveloperAppKey
     */
    consumerSecret?: string;
    /**
     * Time the developer app expires in milliseconds since epoch.
     * @type {string}
     * @memberof ApigeeDeveloperAppKey
     */
    expiresAt?: string;
    /**
     * Input only. Expiration time, in seconds, for the consumer key. If not set or left to the default value of `-1`, the API key never expires. The expiration time can't be updated after it is set.
     * @type {string}
     * @memberof ApigeeDeveloperAppKey
     */
    expiresInSeconds?: string;
    /**
     * Time the developer app was created in milliseconds since epoch.
     * @type {string}
     * @memberof ApigeeDeveloperAppKey
     */
    issuedAt?: string;
    /**
     * Scopes to apply to the app. The specified scope names must already be defined for the API product that you associate with the app.
     * @type {Array<string>}
     * @memberof ApigeeDeveloperAppKey
     */
    scopes?: Array<string>;
    /**
     * Status of the credential. Valid values include `approved` or `revoked`.
     * @type {string}
     * @memberof ApigeeDeveloperAppKey
     */
    status?: string;
}

export function ApigeeDeveloperAppKeyFromJSON(json: any): ApigeeDeveloperAppKey {
    return ApigeeDeveloperAppKeyFromJSONTyped(json, false);
}

export function ApigeeDeveloperAppKeyFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApigeeDeveloperAppKey {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'apiProducts': !exists(json, 'apiProducts') ? undefined : json['apiProducts'],
        'attributes': !exists(json, 'attributes') ? undefined : ((json['attributes'] as Array<any>).map(ApigeeAttributeFromJSON)),
        'consumerKey': !exists(json, 'consumerKey') ? undefined : json['consumerKey'],
        'consumerSecret': !exists(json, 'consumerSecret') ? undefined : json['consumerSecret'],
        'expiresAt': !exists(json, 'expiresAt') ? undefined : json['expiresAt'],
        'expiresInSeconds': !exists(json, 'expiresInSeconds') ? undefined : json['expiresInSeconds'],
        'issuedAt': !exists(json, 'issuedAt') ? undefined : json['issuedAt'],
        'scopes': !exists(json, 'scopes') ? undefined : json['scopes'],
        'status': !exists(json, 'status') ? undefined : json['status'],
    };
}

export function ApigeeDeveloperAppKeyToJSON(value?: ApigeeDeveloperAppKey | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'apiProducts': value.apiProducts,
        'attributes': value.attributes === undefined ? undefined : ((value.attributes as Array<any>).map(ApigeeAttributeToJSON)),
        'consumerKey': value.consumerKey,
        'consumerSecret': value.consumerSecret,
        'expiresAt': value.expiresAt,
        'expiresInSeconds': value.expiresInSeconds,
        'issuedAt': value.issuedAt,
        'scopes': value.scopes,
        'status': value.status,
    };
}


