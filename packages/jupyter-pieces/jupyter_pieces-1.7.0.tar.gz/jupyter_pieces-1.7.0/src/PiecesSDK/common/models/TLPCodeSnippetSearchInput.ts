//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Runtime Common Library
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Embedding,
    EmbeddingFromJSON,
    EmbeddingFromJSONTyped,
    EmbeddingToJSON,
    TLPCodeSnippetTagifyCodeTag,
    TLPCodeSnippetTagifyCodeTagFromJSON,
    TLPCodeSnippetTagifyCodeTagFromJSONTyped,
    TLPCodeSnippetTagifyCodeTagToJSON,
} from './';

/**
 * id: represents the the identifier that will be used to map to the asset that was used.
 * 
 * Embedding is the embedding for the searchable format of the asset that we will used for search.
 * 
 * embedding is optional on in the case you pass along a list of tags that we will use to calculate the embedding.
 * 
 * if you do not pass and embedding in you are required to pass in a list of tags, if not we will throw an error.
 * 
 * if tags or embedding is not passed in we will also throw an error.
 * 
 * Note:
 *   - You can pass in tags here to get your embedding, however this process is an approximation and will be better if you use the tagify embedding instead. So if you has access to tagify please use this instead.
 * @export
 * @interface TLPCodeSnippetSearchInput
 */
export interface TLPCodeSnippetSearchInput {
    /**
     * 
     * @type {string}
     * @memberof TLPCodeSnippetSearchInput
     */
    id: string;
    /**
     * List of embeddings.
     * @type {Array<Embedding>}
     * @memberof TLPCodeSnippetSearchInput
     */
    embeddings?: Array<Embedding>;
    /**
     * This is optionally passed in if the format embedding is not available or not calculated yet.
     * @type {Array<TLPCodeSnippetTagifyCodeTag>}
     * @memberof TLPCodeSnippetSearchInput
     */
    tags?: Array<TLPCodeSnippetTagifyCodeTag>;
}

export function TLPCodeSnippetSearchInputFromJSON(json: any): TLPCodeSnippetSearchInput {
    return TLPCodeSnippetSearchInputFromJSONTyped(json, false);
}

export function TLPCodeSnippetSearchInputFromJSONTyped(json: any, ignoreDiscriminator: boolean): TLPCodeSnippetSearchInput {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'embeddings': !exists(json, 'embeddings') ? undefined : ((json['embeddings'] as Array<any>).map(EmbeddingFromJSON)),
        'tags': !exists(json, 'tags') ? undefined : ((json['tags'] as Array<any>).map(TLPCodeSnippetTagifyCodeTagFromJSON)),
    };
}

export function TLPCodeSnippetSearchInputToJSON(value?: TLPCodeSnippetSearchInput | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'embeddings': value.embeddings === undefined ? undefined : ((value.embeddings as Array<any>).map(EmbeddingToJSON)),
        'tags': value.tags === undefined ? undefined : ((value.tags as Array<any>).map(TLPCodeSnippetTagifyCodeTagToJSON)),
    };
}


