//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Runtime Common Library
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ApigeeAttribute,
    ApigeeAttributeFromJSON,
    ApigeeAttributeFromJSONTyped,
    ApigeeAttributeToJSON,
} from './';

/**
 * 
 * @export
 * @interface ApigeeDeveloper
 */
export interface ApigeeDeveloper {
    /**
     * Access type.
     * @type {string}
     * @memberof ApigeeDeveloper
     */
    accessType?: string;
    /**
     * Developer app family.
     * @type {string}
     * @memberof ApigeeDeveloper
     */
    appFamily?: string;
    /**
     * List of apps associated with the developer.
     * @type {Array<string>}
     * @memberof ApigeeDeveloper
     */
    apps?: Array<string> | null;
    /**
     * Optional. Developer attributes (name/value pairs). The custom attribute limit is 18.
     * @type {Array<ApigeeAttribute>}
     * @memberof ApigeeDeveloper
     */
    attributes?: Array<ApigeeAttribute> | null;
    /**
     * List of companies associated with the developer.
     * @type {Array<string>}
     * @memberof ApigeeDeveloper
     */
    companies?: Array<string> | null;
    /**
     * Output only. Time at which the developer was created in milliseconds since epoch.
     * @type {number}
     * @memberof ApigeeDeveloper
     */
    readonly createdAt?: number;
    /**
     * ID of the developer. **Note**: IDs are generated internally by Apigee and are not guaranteed to stay the same over time.
     * @type {string}
     * @memberof ApigeeDeveloper
     */
    developerId?: string;
    /**
     * Required. Email address of the developer. This value is used to uniquely identify the developer in Apigee hybrid. Note that the email address has to be in lowercase only.
     * @type {string}
     * @memberof ApigeeDeveloper
     */
    email: string;
    /**
     * Required. First name of the developer.
     * @type {string}
     * @memberof ApigeeDeveloper
     */
    firstName: string;
    /**
     * Output only. Time at which the developer was last modified in milliseconds since epoch.
     * @type {number}
     * @memberof ApigeeDeveloper
     */
    readonly lastModifiedAt?: number;
    /**
     * Required. Last name of the developer.
     * @type {string}
     * @memberof ApigeeDeveloper
     */
    lastName: string;
    /**
     * Output only. Name of the Apigee organization in which the developer resides.
     * @type {string}
     * @memberof ApigeeDeveloper
     */
    readonly organizationName?: string;
    /**
     * Output only. Status of the developer. Valid values are `active` and `inactive`.
     * @type {string}
     * @memberof ApigeeDeveloper
     */
    readonly status?: string;
    /**
     * Required. User name of the developer. Not used by Apigee hybrid.
     * @type {string}
     * @memberof ApigeeDeveloper
     */
    userName: string;
}

export function ApigeeDeveloperFromJSON(json: any): ApigeeDeveloper {
    return ApigeeDeveloperFromJSONTyped(json, false);
}

export function ApigeeDeveloperFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApigeeDeveloper {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'accessType': !exists(json, 'accessType') ? undefined : json['accessType'],
        'appFamily': !exists(json, 'appFamily') ? undefined : json['appFamily'],
        'apps': !exists(json, 'apps') ? undefined : json['apps'],
        'attributes': !exists(json, 'attributes') ? undefined : (json['attributes'] === null ? null : (json['attributes'] as Array<any>).map(ApigeeAttributeFromJSON)),
        'companies': !exists(json, 'companies') ? undefined : json['companies'],
        'createdAt': !exists(json, 'createdAt') ? undefined : json['createdAt'],
        'developerId': !exists(json, 'developerId') ? undefined : json['developerId'],
        'email': json['email'],
        'firstName': json['firstName'],
        'lastModifiedAt': !exists(json, 'lastModifiedAt') ? undefined : json['lastModifiedAt'],
        'lastName': json['lastName'],
        'organizationName': !exists(json, 'organizationName') ? undefined : json['organizationName'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'userName': json['userName'],
    };
}

export function ApigeeDeveloperToJSON(value?: ApigeeDeveloper | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'accessType': value.accessType,
        'appFamily': value.appFamily,
        'apps': value.apps,
        'attributes': value.attributes === undefined ? undefined : (value.attributes === null ? null : (value.attributes as Array<any>).map(ApigeeAttributeToJSON)),
        'companies': value.companies,
        'developerId': value.developerId,
        'email': value.email,
        'firstName': value.firstName,
        'lastName': value.lastName,
        'userName': value.userName,
    };
}


