//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Runtime Common Library
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EmbeddedModelSchema,
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
} from './';

/**
 * This is a Model for the incoming parameters on /dns/update/vanity.
 * @export
 * @interface AllocationVanityname
 */
export interface AllocationVanityname {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof AllocationVanityname
     */
    schema?: EmbeddedModelSchema;
    /**
     * This is the uuid that represents the user.
     * @type {string}
     * @memberof AllocationVanityname
     */
    id: string;
    /**
     * This is the vanityname that the user is attempting to update their vanityname too. ie mark.pieces.cloud, where "mark" is the vanityname.
     * @type {string}
     * @memberof AllocationVanityname
     */
    vanityname: string;
}

export function AllocationVanitynameFromJSON(json: any): AllocationVanityname {
    return AllocationVanitynameFromJSONTyped(json, false);
}

export function AllocationVanitynameFromJSONTyped(json: any, ignoreDiscriminator: boolean): AllocationVanityname {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'schema': !exists(json, 'schema') ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'id': json['id'],
        'vanityname': json['vanityname'],
    };
}

export function AllocationVanitynameToJSON(value?: AllocationVanityname | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'schema': EmbeddedModelSchemaToJSON(value.schema),
        'id': value.id,
        'vanityname': value.vanityname,
    };
}


