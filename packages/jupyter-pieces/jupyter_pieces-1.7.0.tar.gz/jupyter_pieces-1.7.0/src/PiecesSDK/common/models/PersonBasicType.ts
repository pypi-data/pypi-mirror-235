//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Runtime Common Library
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EmbeddedModelSchema,
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    ExternallySourcedEnum,
    ExternallySourcedEnumFromJSON,
    ExternallySourcedEnumFromJSONTyped,
    ExternallySourcedEnumToJSON,
    MailgunMetadata,
    MailgunMetadataFromJSON,
    MailgunMetadataFromJSONTyped,
    MailgunMetadataToJSON,
} from './';

/**
 * This is all optional properties around the most basic information around a non-pieces user.
 * 
 * A Basic type will NOT have a scope as it is not an actual pieces user.
 * @export
 * @interface PersonBasicType
 */
export interface PersonBasicType {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof PersonBasicType
     */
    schema?: EmbeddedModelSchema;
    /**
     * username or twitter handle...etc
     * @type {string}
     * @memberof PersonBasicType
     */
    username?: string;
    /**
     * This is the name of the basic user.
     * @type {string}
     * @memberof PersonBasicType
     */
    name?: string;
    /**
     * this is a url picture representation of a user.
     * @type {string}
     * @memberof PersonBasicType
     */
    picture?: string;
    /**
     * an email that was extracted.
     * @type {string}
     * @memberof PersonBasicType
     */
    email?: string;
    /**
     * 
     * @type {ExternallySourcedEnum}
     * @memberof PersonBasicType
     */
    sourced?: ExternallySourcedEnum;
    /**
     * This is a specific url that this basic user came from.
     * @type {string}
     * @memberof PersonBasicType
     */
    url?: string;
    /**
     * 
     * @type {MailgunMetadata}
     * @memberof PersonBasicType
     */
    mailgun?: MailgunMetadata;
}

export function PersonBasicTypeFromJSON(json: any): PersonBasicType {
    return PersonBasicTypeFromJSONTyped(json, false);
}

export function PersonBasicTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): PersonBasicType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'schema': !exists(json, 'schema') ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'username': !exists(json, 'username') ? undefined : json['username'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'picture': !exists(json, 'picture') ? undefined : json['picture'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'sourced': !exists(json, 'sourced') ? undefined : ExternallySourcedEnumFromJSON(json['sourced']),
        'url': !exists(json, 'url') ? undefined : json['url'],
        'mailgun': !exists(json, 'mailgun') ? undefined : MailgunMetadataFromJSON(json['mailgun']),
    };
}

export function PersonBasicTypeToJSON(value?: PersonBasicType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'schema': EmbeddedModelSchemaToJSON(value.schema),
        'username': value.username,
        'name': value.name,
        'picture': value.picture,
        'email': value.email,
        'sourced': ExternallySourcedEnumToJSON(value.sourced),
        'url': value.url,
        'mailgun': MailgunMetadataToJSON(value.mailgun),
    };
}


