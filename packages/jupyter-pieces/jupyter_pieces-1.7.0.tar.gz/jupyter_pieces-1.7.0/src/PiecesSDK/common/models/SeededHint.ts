//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Runtime Common Library
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EmbeddedModelSchema,
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    HintTypeEnum,
    HintTypeEnumFromJSON,
    HintTypeEnumFromJSONTyped,
    HintTypeEnumToJSON,
    MechanismEnum,
    MechanismEnumFromJSON,
    MechanismEnumFromJSONTyped,
    MechanismEnumToJSON,
} from './';

/**
 * 
 * @export
 * @interface SeededHint
 */
export interface SeededHint {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof SeededHint
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {MechanismEnum}
     * @memberof SeededHint
     */
    mechanism?: MechanismEnum;
    /**
     * This is an asset id that we are using to link this to an asset.
     * @type {string}
     * @memberof SeededHint
     */
    asset?: string;
    /**
     * 
     * @type {HintTypeEnum}
     * @memberof SeededHint
     */
    type: HintTypeEnum;
    /**
     * This is the text of the hint.
     * @type {string}
     * @memberof SeededHint
     */
    text: string;
    /**
     * this is a model id. that we are using to link this to a model.
     * @type {string}
     * @memberof SeededHint
     */
    model?: string;
}

export function SeededHintFromJSON(json: any): SeededHint {
    return SeededHintFromJSONTyped(json, false);
}

export function SeededHintFromJSONTyped(json: any, ignoreDiscriminator: boolean): SeededHint {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'schema': !exists(json, 'schema') ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'mechanism': !exists(json, 'mechanism') ? undefined : MechanismEnumFromJSON(json['mechanism']),
        'asset': !exists(json, 'asset') ? undefined : json['asset'],
        'type': HintTypeEnumFromJSON(json['type']),
        'text': json['text'],
        'model': !exists(json, 'model') ? undefined : json['model'],
    };
}

export function SeededHintToJSON(value?: SeededHint | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'schema': EmbeddedModelSchemaToJSON(value.schema),
        'mechanism': MechanismEnumToJSON(value.mechanism),
        'asset': value.asset,
        'type': HintTypeEnumToJSON(value.type),
        'text': value.text,
        'model': value.model,
    };
}


