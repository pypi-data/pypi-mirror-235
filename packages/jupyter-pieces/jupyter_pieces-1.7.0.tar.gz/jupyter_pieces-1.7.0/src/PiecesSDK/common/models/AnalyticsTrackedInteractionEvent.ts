//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Runtime Common Library
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AnalyticsTrackedInteractionEventIdentifierDescriptionPairs,
    AnalyticsTrackedInteractionEventIdentifierDescriptionPairsFromJSON,
    AnalyticsTrackedInteractionEventIdentifierDescriptionPairsFromJSONTyped,
    AnalyticsTrackedInteractionEventIdentifierDescriptionPairsToJSON,
} from './';

/**
 * This is a model that will hold relavent information in relation to an interaction(ONLY CLICK/TAP) analytics event(usage). If you want to register an event that relates to an interaction with the key then register a Keyboard Event.
 * @export
 * @interface AnalyticsTrackedInteractionEvent
 */
export interface AnalyticsTrackedInteractionEvent {
    /**
     * (optional) a description of this button that was clicked. or maybe what it did.
     * @type {string}
     * @memberof AnalyticsTrackedInteractionEvent
     */
    description: string;
    /**
     * This is an identifer that will allow the developer to know what unique button/field was interacted with.
     * @type {string}
     * @memberof AnalyticsTrackedInteractionEvent
     */
    element?: string;
    /**
     * 
     * @type {AnalyticsTrackedInteractionEventIdentifierDescriptionPairs}
     * @memberof AnalyticsTrackedInteractionEvent
     */
    identifierDescriptionPair?: AnalyticsTrackedInteractionEventIdentifierDescriptionPairs;
}

export function AnalyticsTrackedInteractionEventFromJSON(json: any): AnalyticsTrackedInteractionEvent {
    return AnalyticsTrackedInteractionEventFromJSONTyped(json, false);
}

export function AnalyticsTrackedInteractionEventFromJSONTyped(json: any, ignoreDiscriminator: boolean): AnalyticsTrackedInteractionEvent {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'description': json['description'],
        'element': !exists(json, 'element') ? undefined : json['element'],
        'identifierDescriptionPair': !exists(json, 'identifier_description_pair') ? undefined : AnalyticsTrackedInteractionEventIdentifierDescriptionPairsFromJSON(json['identifier_description_pair']),
    };
}

export function AnalyticsTrackedInteractionEventToJSON(value?: AnalyticsTrackedInteractionEvent | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'description': value.description,
        'element': value.element,
        'identifier_description_pair': AnalyticsTrackedInteractionEventIdentifierDescriptionPairsToJSON(value.identifierDescriptionPair),
    };
}


