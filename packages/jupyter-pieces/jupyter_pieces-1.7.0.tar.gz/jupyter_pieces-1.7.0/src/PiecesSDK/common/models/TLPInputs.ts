//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Runtime Common Library
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    TLPInput,
    TLPInputFromJSON,
    TLPInputFromJSONTyped,
    TLPInputToJSON,
    TLPInputModels,
    TLPInputModelsFromJSON,
    TLPInputModelsFromJSONTyped,
    TLPInputModelsToJSON,
} from './';

/**
 * This is the main body for the /tlp endpoint. This requires an array of Input classes that represent the data the developer wishes to run technical language processing on. This also accepts an optional "models" property, which enables a developer to preference which Machine Learning models to use in the processing pipeline.
 * @export
 * @interface TLPInputs
 */
export interface TLPInputs {
    /**
     * This is an array inputs, where the min is a single input.
     * @type {Array<TLPInput>}
     * @memberof TLPInputs
     */
    iterable: Array<TLPInput>;
    /**
     * 
     * @type {TLPInputModels}
     * @memberof TLPInputs
     */
    models?: TLPInputModels;
}

export function TLPInputsFromJSON(json: any): TLPInputs {
    return TLPInputsFromJSONTyped(json, false);
}

export function TLPInputsFromJSONTyped(json: any, ignoreDiscriminator: boolean): TLPInputs {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'iterable': ((json['iterable'] as Array<any>).map(TLPInputFromJSON)),
        'models': !exists(json, 'models') ? undefined : TLPInputModelsFromJSON(json['models']),
    };
}

export function TLPInputsToJSON(value?: TLPInputs | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'iterable': ((value.iterable as Array<any>).map(TLPInputToJSON)),
        'models': TLPInputModelsToJSON(value.models),
    };
}


