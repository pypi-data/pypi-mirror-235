//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Runtime Common Library
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ApigeeSyncAuthorization
 */
export interface ApigeeSyncAuthorization {
    /**
     * Entity tag (ETag) used for optimistic concurrency control as a way to help prevent simultaneous updates from overwriting each other. For example, when you call [getSyncAuthorization](organizations/getSyncAuthorization) an ETag is returned in the response. Pass that ETag when calling the [setSyncAuthorization](organizations/setSyncAuthorization) to ensure that you are updating the correct version. If you don't pass the ETag in the call to `setSyncAuthorization`, then the existing authorization is overwritten indiscriminately. **Note**: We strongly recommend that you use the ETag in the read-modify-write cycle to avoid race conditions.
     * @type {string}
     * @memberof ApigeeSyncAuthorization
     */
    etag?: string;
    /**
     * Required. Array of service accounts to grant access to control plane resources, each specified using the following format: `serviceAccount:` service-account-name. The service-account-name is formatted like an email address. For example: `my-synchronizer-manager-service_account@my_project_id.iam.gserviceaccount.com` You might specify multiple service accounts, for example, if you have multiple environments and wish to assign a unique service account to each one. The service accounts must have **Apigee Synchronizer Manager** role. See also [Create service accounts](https://cloud.google.com/apigee/docs/hybrid/latest/sa-about#create-the-service-accounts).
     * @type {Array<string>}
     * @memberof ApigeeSyncAuthorization
     */
    identities?: Array<string>;
}

export function ApigeeSyncAuthorizationFromJSON(json: any): ApigeeSyncAuthorization {
    return ApigeeSyncAuthorizationFromJSONTyped(json, false);
}

export function ApigeeSyncAuthorizationFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApigeeSyncAuthorization {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'etag': !exists(json, 'etag') ? undefined : json['etag'],
        'identities': !exists(json, 'identities') ? undefined : json['identities'],
    };
}

export function ApigeeSyncAuthorizationToJSON(value?: ApigeeSyncAuthorization | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'etag': value.etag,
        'identities': value.identities,
    };
}


