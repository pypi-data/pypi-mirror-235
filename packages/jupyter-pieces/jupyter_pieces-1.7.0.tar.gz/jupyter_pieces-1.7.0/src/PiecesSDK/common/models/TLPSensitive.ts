//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Runtime Common Library
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    TLPSensitiveCategoryEnum,
    TLPSensitiveCategoryEnumFromJSON,
    TLPSensitiveCategoryEnumFromJSONTyped,
    TLPSensitiveCategoryEnumToJSON,
    TLPSensitiveMetadata,
    TLPSensitiveMetadataFromJSON,
    TLPSensitiveMetadataFromJSONTyped,
    TLPSensitiveMetadataToJSON,
    TLPSensitiveSeverityEnum,
    TLPSensitiveSeverityEnumFromJSON,
    TLPSensitiveSeverityEnumFromJSONTyped,
    TLPSensitiveSeverityEnumToJSON,
    TLPTextMatch,
    TLPTextMatchFromJSON,
    TLPTextMatchFromJSONTyped,
    TLPTextMatchToJSON,
} from './';

/**
 * This is a fully referenced representation of a sensitive pieces of data.
 * @export
 * @interface TLPSensitive
 */
export interface TLPSensitive {
    /**
     * 
     * @type {string}
     * @memberof TLPSensitive
     */
    id: string;
    /**
     * 
     * @type {TLPTextMatch}
     * @memberof TLPSensitive
     */
    match: TLPTextMatch;
    /**
     * 
     * @type {TLPSensitiveCategoryEnum}
     * @memberof TLPSensitive
     */
    category: TLPSensitiveCategoryEnum;
    /**
     * 
     * @type {TLPSensitiveSeverityEnum}
     * @memberof TLPSensitive
     */
    severity: TLPSensitiveSeverityEnum;
    /**
     * 
     * @type {string}
     * @memberof TLPSensitive
     */
    description: string;
    /**
     * 
     * @type {TLPSensitiveMetadata}
     * @memberof TLPSensitive
     */
    metadata?: TLPSensitiveMetadata;
}

export function TLPSensitiveFromJSON(json: any): TLPSensitive {
    return TLPSensitiveFromJSONTyped(json, false);
}

export function TLPSensitiveFromJSONTyped(json: any, ignoreDiscriminator: boolean): TLPSensitive {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'match': TLPTextMatchFromJSON(json['match']),
        'category': TLPSensitiveCategoryEnumFromJSON(json['category']),
        'severity': TLPSensitiveSeverityEnumFromJSON(json['severity']),
        'description': json['description'],
        'metadata': !exists(json, 'metadata') ? undefined : TLPSensitiveMetadataFromJSON(json['metadata']),
    };
}

export function TLPSensitiveToJSON(value?: TLPSensitive | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'match': TLPTextMatchToJSON(value.match),
        'category': TLPSensitiveCategoryEnumToJSON(value.category),
        'severity': TLPSensitiveSeverityEnumToJSON(value.severity),
        'description': value.description,
        'metadata': TLPSensitiveMetadataToJSON(value.metadata),
    };
}


