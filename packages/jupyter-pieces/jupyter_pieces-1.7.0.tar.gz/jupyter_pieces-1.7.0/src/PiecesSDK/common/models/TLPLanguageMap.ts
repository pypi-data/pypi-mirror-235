//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Runtime Common Library
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    TLPLanguageDescriptor,
    TLPLanguageDescriptorFromJSON,
    TLPLanguageDescriptorFromJSONTyped,
    TLPLanguageDescriptorToJSON,
} from './';

/**
 * This is going to have a model of all our languages. all will be optional here.
 * @export
 * @interface TLPLanguageMap
 */
export interface TLPLanguageMap {
    /**
     * 
     * @type {TLPLanguageDescriptor}
     * @memberof TLPLanguageMap
     */
    batchfile?: TLPLanguageDescriptor;
    /**
     * 
     * @type {TLPLanguageDescriptor}
     * @memberof TLPLanguageMap
     */
    c?: TLPLanguageDescriptor;
    /**
     * 
     * @type {TLPLanguageDescriptor}
     * @memberof TLPLanguageMap
     */
    coffeescript?: TLPLanguageDescriptor;
    /**
     * 
     * @type {TLPLanguageDescriptor}
     * @memberof TLPLanguageMap
     */
    cpp?: TLPLanguageDescriptor;
    /**
     * 
     * @type {TLPLanguageDescriptor}
     * @memberof TLPLanguageMap
     */
    csharp?: TLPLanguageDescriptor;
    /**
     * 
     * @type {TLPLanguageDescriptor}
     * @memberof TLPLanguageMap
     */
    css?: TLPLanguageDescriptor;
    /**
     * 
     * @type {TLPLanguageDescriptor}
     * @memberof TLPLanguageMap
     */
    dart?: TLPLanguageDescriptor;
    /**
     * 
     * @type {TLPLanguageDescriptor}
     * @memberof TLPLanguageMap
     */
    erlang?: TLPLanguageDescriptor;
    /**
     * 
     * @type {TLPLanguageDescriptor}
     * @memberof TLPLanguageMap
     */
    go?: TLPLanguageDescriptor;
    /**
     * 
     * @type {TLPLanguageDescriptor}
     * @memberof TLPLanguageMap
     */
    haskell?: TLPLanguageDescriptor;
    /**
     * 
     * @type {TLPLanguageDescriptor}
     * @memberof TLPLanguageMap
     */
    html?: TLPLanguageDescriptor;
    /**
     * 
     * @type {TLPLanguageDescriptor}
     * @memberof TLPLanguageMap
     */
    java?: TLPLanguageDescriptor;
    /**
     * 
     * @type {TLPLanguageDescriptor}
     * @memberof TLPLanguageMap
     */
    javascript?: TLPLanguageDescriptor;
    /**
     * 
     * @type {TLPLanguageDescriptor}
     * @memberof TLPLanguageMap
     */
    lua?: TLPLanguageDescriptor;
    /**
     * 
     * @type {TLPLanguageDescriptor}
     * @memberof TLPLanguageMap
     */
    markdown?: TLPLanguageDescriptor;
    /**
     * 
     * @type {TLPLanguageDescriptor}
     * @memberof TLPLanguageMap
     */
    matlab?: TLPLanguageDescriptor;
    /**
     * 
     * @type {TLPLanguageDescriptor}
     * @memberof TLPLanguageMap
     */
    objectivec?: TLPLanguageDescriptor;
    /**
     * 
     * @type {TLPLanguageDescriptor}
     * @memberof TLPLanguageMap
     */
    perl?: TLPLanguageDescriptor;
    /**
     * 
     * @type {TLPLanguageDescriptor}
     * @memberof TLPLanguageMap
     */
    php?: TLPLanguageDescriptor;
    /**
     * 
     * @type {TLPLanguageDescriptor}
     * @memberof TLPLanguageMap
     */
    powershell?: TLPLanguageDescriptor;
    /**
     * 
     * @type {TLPLanguageDescriptor}
     * @memberof TLPLanguageMap
     */
    python?: TLPLanguageDescriptor;
    /**
     * 
     * @type {TLPLanguageDescriptor}
     * @memberof TLPLanguageMap
     */
    r?: TLPLanguageDescriptor;
    /**
     * 
     * @type {TLPLanguageDescriptor}
     * @memberof TLPLanguageMap
     */
    ruby?: TLPLanguageDescriptor;
    /**
     * 
     * @type {TLPLanguageDescriptor}
     * @memberof TLPLanguageMap
     */
    rust?: TLPLanguageDescriptor;
    /**
     * 
     * @type {TLPLanguageDescriptor}
     * @memberof TLPLanguageMap
     */
    scala?: TLPLanguageDescriptor;
    /**
     * 
     * @type {TLPLanguageDescriptor}
     * @memberof TLPLanguageMap
     */
    shellscript?: TLPLanguageDescriptor;
    /**
     * 
     * @type {TLPLanguageDescriptor}
     * @memberof TLPLanguageMap
     */
    sql?: TLPLanguageDescriptor;
    /**
     * 
     * @type {TLPLanguageDescriptor}
     * @memberof TLPLanguageMap
     */
    swift?: TLPLanguageDescriptor;
    /**
     * 
     * @type {TLPLanguageDescriptor}
     * @memberof TLPLanguageMap
     */
    tex?: TLPLanguageDescriptor;
    /**
     * 
     * @type {TLPLanguageDescriptor}
     * @memberof TLPLanguageMap
     */
    typescript?: TLPLanguageDescriptor;
    /**
     * 
     * @type {TLPLanguageDescriptor}
     * @memberof TLPLanguageMap
     */
    toml?: TLPLanguageDescriptor;
    /**
     * 
     * @type {TLPLanguageDescriptor}
     * @memberof TLPLanguageMap
     */
    yaml?: TLPLanguageDescriptor;
    /**
     * 
     * @type {TLPLanguageDescriptor}
     * @memberof TLPLanguageMap
     */
    json?: TLPLanguageDescriptor;
    /**
     * 
     * @type {TLPLanguageDescriptor}
     * @memberof TLPLanguageMap
     */
    groovy?: TLPLanguageDescriptor;
    /**
     * 
     * @type {TLPLanguageDescriptor}
     * @memberof TLPLanguageMap
     */
    kotlin?: TLPLanguageDescriptor;
    /**
     * 
     * @type {TLPLanguageDescriptor}
     * @memberof TLPLanguageMap
     */
    emacslisp?: TLPLanguageDescriptor;
    /**
     * 
     * @type {TLPLanguageDescriptor}
     * @memberof TLPLanguageMap
     */
    clojure?: TLPLanguageDescriptor;
    /**
     * 
     * @type {TLPLanguageDescriptor}
     * @memberof TLPLanguageMap
     */
    elixir?: TLPLanguageDescriptor;
    /**
     * 
     * @type {TLPLanguageDescriptor}
     * @memberof TLPLanguageMap
     */
    xml?: TLPLanguageDescriptor;
    /**
     * 
     * @type {TLPLanguageDescriptor}
     * @memberof TLPLanguageMap
     */
    solidity?: TLPLanguageDescriptor;
    /**
     * 
     * @type {TLPLanguageDescriptor}
     * @memberof TLPLanguageMap
     */
    systemverilog?: TLPLanguageDescriptor;
    /**
     * 
     * @type {TLPLanguageDescriptor}
     * @memberof TLPLanguageMap
     */
    asp?: TLPLanguageDescriptor;
    /**
     * 
     * @type {TLPLanguageDescriptor}
     * @memberof TLPLanguageMap
     */
    coldfusion?: TLPLanguageDescriptor;
}

export function TLPLanguageMapFromJSON(json: any): TLPLanguageMap {
    return TLPLanguageMapFromJSONTyped(json, false);
}

export function TLPLanguageMapFromJSONTyped(json: any, ignoreDiscriminator: boolean): TLPLanguageMap {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'batchfile': !exists(json, 'batchfile') ? undefined : TLPLanguageDescriptorFromJSON(json['batchfile']),
        'c': !exists(json, 'c') ? undefined : TLPLanguageDescriptorFromJSON(json['c']),
        'coffeescript': !exists(json, 'coffeescript') ? undefined : TLPLanguageDescriptorFromJSON(json['coffeescript']),
        'cpp': !exists(json, 'cpp') ? undefined : TLPLanguageDescriptorFromJSON(json['cpp']),
        'csharp': !exists(json, 'csharp') ? undefined : TLPLanguageDescriptorFromJSON(json['csharp']),
        'css': !exists(json, 'css') ? undefined : TLPLanguageDescriptorFromJSON(json['css']),
        'dart': !exists(json, 'dart') ? undefined : TLPLanguageDescriptorFromJSON(json['dart']),
        'erlang': !exists(json, 'erlang') ? undefined : TLPLanguageDescriptorFromJSON(json['erlang']),
        'go': !exists(json, 'go') ? undefined : TLPLanguageDescriptorFromJSON(json['go']),
        'haskell': !exists(json, 'haskell') ? undefined : TLPLanguageDescriptorFromJSON(json['haskell']),
        'html': !exists(json, 'html') ? undefined : TLPLanguageDescriptorFromJSON(json['html']),
        'java': !exists(json, 'java') ? undefined : TLPLanguageDescriptorFromJSON(json['java']),
        'javascript': !exists(json, 'javascript') ? undefined : TLPLanguageDescriptorFromJSON(json['javascript']),
        'lua': !exists(json, 'lua') ? undefined : TLPLanguageDescriptorFromJSON(json['lua']),
        'markdown': !exists(json, 'markdown') ? undefined : TLPLanguageDescriptorFromJSON(json['markdown']),
        'matlab': !exists(json, 'matlab') ? undefined : TLPLanguageDescriptorFromJSON(json['matlab']),
        'objectivec': !exists(json, 'objectivec') ? undefined : TLPLanguageDescriptorFromJSON(json['objectivec']),
        'perl': !exists(json, 'perl') ? undefined : TLPLanguageDescriptorFromJSON(json['perl']),
        'php': !exists(json, 'php') ? undefined : TLPLanguageDescriptorFromJSON(json['php']),
        'powershell': !exists(json, 'powershell') ? undefined : TLPLanguageDescriptorFromJSON(json['powershell']),
        'python': !exists(json, 'python') ? undefined : TLPLanguageDescriptorFromJSON(json['python']),
        'r': !exists(json, 'r') ? undefined : TLPLanguageDescriptorFromJSON(json['r']),
        'ruby': !exists(json, 'ruby') ? undefined : TLPLanguageDescriptorFromJSON(json['ruby']),
        'rust': !exists(json, 'rust') ? undefined : TLPLanguageDescriptorFromJSON(json['rust']),
        'scala': !exists(json, 'scala') ? undefined : TLPLanguageDescriptorFromJSON(json['scala']),
        'shellscript': !exists(json, 'shellscript') ? undefined : TLPLanguageDescriptorFromJSON(json['shellscript']),
        'sql': !exists(json, 'sql') ? undefined : TLPLanguageDescriptorFromJSON(json['sql']),
        'swift': !exists(json, 'swift') ? undefined : TLPLanguageDescriptorFromJSON(json['swift']),
        'tex': !exists(json, 'tex') ? undefined : TLPLanguageDescriptorFromJSON(json['tex']),
        'typescript': !exists(json, 'typescript') ? undefined : TLPLanguageDescriptorFromJSON(json['typescript']),
        'toml': !exists(json, 'toml') ? undefined : TLPLanguageDescriptorFromJSON(json['toml']),
        'yaml': !exists(json, 'yaml') ? undefined : TLPLanguageDescriptorFromJSON(json['yaml']),
        'json': !exists(json, 'json') ? undefined : TLPLanguageDescriptorFromJSON(json['json']),
        'groovy': !exists(json, 'groovy') ? undefined : TLPLanguageDescriptorFromJSON(json['groovy']),
        'kotlin': !exists(json, 'kotlin') ? undefined : TLPLanguageDescriptorFromJSON(json['kotlin']),
        'emacslisp': !exists(json, 'emacslisp') ? undefined : TLPLanguageDescriptorFromJSON(json['emacslisp']),
        'clojure': !exists(json, 'clojure') ? undefined : TLPLanguageDescriptorFromJSON(json['clojure']),
        'elixir': !exists(json, 'elixir') ? undefined : TLPLanguageDescriptorFromJSON(json['elixir']),
        'xml': !exists(json, 'xml') ? undefined : TLPLanguageDescriptorFromJSON(json['xml']),
        'solidity': !exists(json, 'solidity') ? undefined : TLPLanguageDescriptorFromJSON(json['solidity']),
        'systemverilog': !exists(json, 'systemverilog') ? undefined : TLPLanguageDescriptorFromJSON(json['systemverilog']),
        'asp': !exists(json, 'asp') ? undefined : TLPLanguageDescriptorFromJSON(json['asp']),
        'coldfusion': !exists(json, 'coldfusion') ? undefined : TLPLanguageDescriptorFromJSON(json['coldfusion']),
    };
}

export function TLPLanguageMapToJSON(value?: TLPLanguageMap | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'batchfile': TLPLanguageDescriptorToJSON(value.batchfile),
        'c': TLPLanguageDescriptorToJSON(value.c),
        'coffeescript': TLPLanguageDescriptorToJSON(value.coffeescript),
        'cpp': TLPLanguageDescriptorToJSON(value.cpp),
        'csharp': TLPLanguageDescriptorToJSON(value.csharp),
        'css': TLPLanguageDescriptorToJSON(value.css),
        'dart': TLPLanguageDescriptorToJSON(value.dart),
        'erlang': TLPLanguageDescriptorToJSON(value.erlang),
        'go': TLPLanguageDescriptorToJSON(value.go),
        'haskell': TLPLanguageDescriptorToJSON(value.haskell),
        'html': TLPLanguageDescriptorToJSON(value.html),
        'java': TLPLanguageDescriptorToJSON(value.java),
        'javascript': TLPLanguageDescriptorToJSON(value.javascript),
        'lua': TLPLanguageDescriptorToJSON(value.lua),
        'markdown': TLPLanguageDescriptorToJSON(value.markdown),
        'matlab': TLPLanguageDescriptorToJSON(value.matlab),
        'objectivec': TLPLanguageDescriptorToJSON(value.objectivec),
        'perl': TLPLanguageDescriptorToJSON(value.perl),
        'php': TLPLanguageDescriptorToJSON(value.php),
        'powershell': TLPLanguageDescriptorToJSON(value.powershell),
        'python': TLPLanguageDescriptorToJSON(value.python),
        'r': TLPLanguageDescriptorToJSON(value.r),
        'ruby': TLPLanguageDescriptorToJSON(value.ruby),
        'rust': TLPLanguageDescriptorToJSON(value.rust),
        'scala': TLPLanguageDescriptorToJSON(value.scala),
        'shellscript': TLPLanguageDescriptorToJSON(value.shellscript),
        'sql': TLPLanguageDescriptorToJSON(value.sql),
        'swift': TLPLanguageDescriptorToJSON(value.swift),
        'tex': TLPLanguageDescriptorToJSON(value.tex),
        'typescript': TLPLanguageDescriptorToJSON(value.typescript),
        'toml': TLPLanguageDescriptorToJSON(value.toml),
        'yaml': TLPLanguageDescriptorToJSON(value.yaml),
        'json': TLPLanguageDescriptorToJSON(value.json),
        'groovy': TLPLanguageDescriptorToJSON(value.groovy),
        'kotlin': TLPLanguageDescriptorToJSON(value.kotlin),
        'emacslisp': TLPLanguageDescriptorToJSON(value.emacslisp),
        'clojure': TLPLanguageDescriptorToJSON(value.clojure),
        'elixir': TLPLanguageDescriptorToJSON(value.elixir),
        'xml': TLPLanguageDescriptorToJSON(value.xml),
        'solidity': TLPLanguageDescriptorToJSON(value.solidity),
        'systemverilog': TLPLanguageDescriptorToJSON(value.systemverilog),
        'asp': TLPLanguageDescriptorToJSON(value.asp),
        'coldfusion': TLPLanguageDescriptorToJSON(value.coldfusion),
    };
}


