# coding: utf-8

"""
    Forgejo API.

    This documentation describes the Forgejo API.

    The version of the OpenAPI document: 1.20.5+0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator

class ChangeFileOperation(BaseModel):
    """
    ChangeFileOperation for creating, updating or deleting a file  # noqa: E501
    """
    content: Optional[StrictStr] = Field(None, description="new or updated file content, must be base64 encoded")
    from_path: Optional[StrictStr] = Field(None, description="old path of the file to move")
    operation: StrictStr = Field(..., description="indicates what to do with the file")
    path: StrictStr = Field(..., description="path to the existing or new file")
    sha: Optional[StrictStr] = Field(None, description="sha is the SHA for the file that already exists, required for update or delete")
    __properties = ["content", "from_path", "operation", "path", "sha"]

    @validator('operation')
    def operation_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('create', 'update', 'delete'):
            raise ValueError("must be one of enum values ('create', 'update', 'delete')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ChangeFileOperation:
        """Create an instance of ChangeFileOperation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ChangeFileOperation:
        """Create an instance of ChangeFileOperation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ChangeFileOperation.parse_obj(obj)

        _obj = ChangeFileOperation.parse_obj({
            "content": obj.get("content"),
            "from_path": obj.get("from_path"),
            "operation": obj.get("operation"),
            "path": obj.get("path"),
            "sha": obj.get("sha")
        })
        return _obj


