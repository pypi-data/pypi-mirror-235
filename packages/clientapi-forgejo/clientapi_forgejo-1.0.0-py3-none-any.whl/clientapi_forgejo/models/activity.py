# coding: utf-8

"""
    Forgejo API.

    This documentation describes the Forgejo API.

    The version of the OpenAPI document: 1.20.5+0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from clientapi_forgejo.models.comment import Comment
from clientapi_forgejo.models.repository import Repository
from clientapi_forgejo.models.user import User

class Activity(BaseModel):
    """
    Activity
    """
    act_user: Optional[User] = None
    act_user_id: Optional[StrictInt] = None
    comment: Optional[Comment] = None
    comment_id: Optional[StrictInt] = None
    content: Optional[StrictStr] = None
    created: Optional[datetime] = None
    id: Optional[StrictInt] = None
    is_private: Optional[StrictBool] = None
    op_type: Optional[StrictStr] = None
    ref_name: Optional[StrictStr] = None
    repo: Optional[Repository] = None
    repo_id: Optional[StrictInt] = None
    user_id: Optional[StrictInt] = None
    __properties = ["act_user", "act_user_id", "comment", "comment_id", "content", "created", "id", "is_private", "op_type", "ref_name", "repo", "repo_id", "user_id"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Activity:
        """Create an instance of Activity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of act_user
        if self.act_user:
            _dict['act_user'] = self.act_user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of comment
        if self.comment:
            _dict['comment'] = self.comment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of repo
        if self.repo:
            _dict['repo'] = self.repo.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Activity:
        """Create an instance of Activity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Activity.parse_obj(obj)

        _obj = Activity.parse_obj({
            "act_user": User.from_dict(obj.get("act_user")) if obj.get("act_user") is not None else None,
            "act_user_id": obj.get("act_user_id"),
            "comment": Comment.from_dict(obj.get("comment")) if obj.get("comment") is not None else None,
            "comment_id": obj.get("comment_id"),
            "content": obj.get("content"),
            "created": obj.get("created"),
            "id": obj.get("id"),
            "is_private": obj.get("is_private"),
            "op_type": obj.get("op_type"),
            "ref_name": obj.get("ref_name"),
            "repo": Repository.from_dict(obj.get("repo")) if obj.get("repo") is not None else None,
            "repo_id": obj.get("repo_id"),
            "user_id": obj.get("user_id")
        })
        return _obj


