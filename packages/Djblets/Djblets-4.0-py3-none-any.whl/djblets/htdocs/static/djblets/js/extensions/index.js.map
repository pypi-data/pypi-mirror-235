{"version":3,"file":"index.js","sources":["../../../../../static/djblets/js/extensions/models/extensionModel.ts","../../../../../static/djblets/js/extensions/models/extensionHookModel.ts","../../../../../static/djblets/js/extensions/models/extensionHookPointModel.ts","../../../../../static/djblets/js/extensions/models/extensionManagerModel.ts"],"sourcesContent":["/**\n * Base class for an extension.\n */\n\nimport {\n    BaseModel,\n    ModelAttributes,\n    spina,\n} from '@beanbag/spina';\n\nimport type { ExtensionHook } from './extensionHookModel';\n\n\n/**\n * Attributes that can be passed to an extension's constructor.\n *\n * Version Added:\n *     4.0\n */\nexport interface BaseExtensionAttrs extends ModelAttributes {\n    /**\n     * The unique ID of the extension.\n     */\n    id: string;\n\n    /**\n     * The display name of the extension.\n     */\n    name: string;\n\n    /**\n     * A mapping of settings made available to the extension.\n     */\n    settings: {\n        [key: string]: unknown,\n    }\n}\n\n\n/**\n * Base class for an extension.\n *\n * Extensions that deal with JavaScript should subclass this to provide any\n * initialization code it needs, such as the initialization of hooks.\n *\n * Extension instances will have read access to the server-stored settings\n * for the extension.\n */\n@spina\nexport class Extension<\n    TDefaults extends BaseExtensionAttrs = BaseExtensionAttrs\n> extends BaseModel<TDefaults> {\n    static defaults: BaseExtensionAttrs = {\n        id: null,\n        name: null,\n        settings: {},\n    };\n\n    /**********************\n     * Instance variables *\n     **********************/\n\n    /**\n     * The list of extension hooks added by this extension.\n     *\n     * This is automatically populated when instantiating extension hooks.\n     */\n    hooks: ExtensionHook[];\n\n    /**\n     * Initialize the extension.\n     *\n     * Subclasses that override this are expected to call this method.\n     */\n    initialize() {\n        this.hooks = [];\n    }\n}\n","/**\n * Base support for defining extension hooks.\n */\n\nimport {\n    BaseModel,\n    ModelAttributes,\n    spina,\n} from '@beanbag/spina';\n\nimport type { ExtensionHookPoint } from './extensionHookPointModel';\nimport type { Extension } from './extensionModel';\n\n\n/**\n * Attributes that can be passed to an extension hook's constructor.\n *\n * Version Added:\n *     4.0\n */\nexport interface ExtensionHookAttrs extends ModelAttributes {\n    /**\n     * The extension that owns this hook.\n     */\n    extension: Extension;\n}\n\n\n/**\n * Base class for hooks that an extension can use to augment functionality.\n *\n * Each type of hook represents a point in the codebase that an extension\n * is able to plug functionality into.\n *\n * Subclasses are expected to set a hookPoint field in the prototype to an\n * instance of ExtensionPoint.\n *\n * Instances of an ExtensionHook subclass that extensions create will be\n * automatically registered with both the extension and the list of hooks\n * for that ExtensionHook subclass.\n *\n * Callers that use ExtensionHook subclasses to provide functionality can\n * use the subclass's each() method to loop over all registered hooks.\n */\n@spina({\n    prototypeAttrs: [\n        'each',\n        'hookPoint',\n    ],\n})\nexport class ExtensionHook<\n    TDefaults extends ExtensionHookAttrs = ExtensionHookAttrs\n> extends BaseModel<TDefaults> {\n    /**\n     * An ExtensionHookPoint instance.\n     *\n     * This must be defined and instantiated by a subclass of ExtensionHook,\n     * but not by subclasses created by extensions.\n     */\n    static hookPoint: ExtensionHookPoint = null;\n    hookPoint: ExtensionHookPoint;\n\n    static defaults: ExtensionHookAttrs = {\n        extension: null,\n    };\n\n    /**\n     * Loop through each registered hook instance and call the given callback.\n     *\n     * Args:\n     *     cb (function):\n     *         The callback to call.\n     *\n     *     context (object, optional):\n     *         Optional context to use when calling the callback.\n     */\n    static each(\n        cb: (ExtensionHook) => void,\n        context: unknown = null,\n    ) {\n        for (const hook of this.prototype.hookPoint.hooks) {\n            cb.call(context, hook);\n        }\n    }\n\n    /**\n     * Initialize the hook.\n     *\n     * This will add the instance of the hook to the extension's list of\n     * hooks, and to the list of known hook instances for this hook point.\n     *\n     * After initialization, setUpHook will be called, which a subclass\n     * can use to provide additional setup.\n     */\n    initialize() {\n        const extension = this.get('extension');\n\n        console.assert(\n            !!this.hookPoint,\n            'This ExtensionHook subclass must define hookPoint');\n        console.assert(\n            !!extension,\n            'An Extension instance must be passed to ExtensionHook');\n\n        extension.hooks.push(this);\n        this.hookPoint.addHook(this);\n\n        this.setUpHook();\n    }\n\n    /**\n     * Set up additional state for the hook.\n     *\n     * This can be overridden by subclasses to provide additional\n     * functionality.\n     */\n    setUpHook() {\n        /* Empty by default. */\n    }\n}\n","/**\n * Class for defining a hook point for extension hooks.\n */\n\nimport { BaseModel, spina } from '@beanbag/spina';\n\nimport type { ExtensionHook } from './extensionHookModel';\n\n\n/**\n * Defines a point where extension hooks can plug into.\n *\n * This is meant to be instantiated and provided as a 'hookPoint' field on\n * an ExtensionHook subclass, in order to provide a place to hook into.\n */\n@spina\nexport class ExtensionHookPoint extends BaseModel {\n    /**********************\n     * Instance variables *\n     **********************/\n\n    /**\n     * A list of all hooks registered on this extension point.\n     */\n    hooks: ExtensionHook[];\n\n    /**\n     * Initialize the hook point.\n     */\n    initialize() {\n        this.hooks = [];\n    }\n\n    /**\n     * Add a hook instance to the list of known hooks.\n     *\n     * Args:\n     *     hook (Djblets.ExtensionHook):\n     *         The hook instance.\n     */\n    addHook(hook: ExtensionHook) {\n        this.hooks.push(hook);\n    }\n}\n","/**\n * Extension management support.\n */\n\nimport {\n    BaseCollection,\n    BaseModel,\n    ModelAttributes,\n    spina,\n} from '@beanbag/spina';\nimport * as Backbone from 'backbone';\nimport * as _ from 'underscore';\n\n\n/**\n * Attributes for information on an installed extension.\n *\n * Version Added:\n *     4.0\n */\ninterface InstalledExtensionAttrs extends ModelAttributes {\n    /**\n     * The name of the author writing/maintaining the extension.\n     */\n    author: string;\n\n    /**\n     * The URL to the author's website.\n     */\n    authorURL: string;\n\n    /**\n     * The URL on Review Board for configuring the extension.\n     */\n    configURL: string;\n\n    /**\n     * The URL to the extension's database management page.\n     */\n    dbURL: string;\n\n    /**\n     * Whether the extension is currently enabled.\n     */\n    enabled: boolean;\n\n    /**\n     * An error message encountered when trying to load the extension.\n     */\n    loadError: string;\n\n    /**\n     * Whether the extension can be loaded.\n     */\n    loadable: boolean;\n\n    /**\n     * The display name of the extension.\n     */\n    name: string;\n\n    /**\n     * A short summary describing the extension.\n     */\n    summary: string;\n\n    /**\n     * The version of the extension.\n     */\n    version: string;\n}\n\n\n/**\n * Attributes for controlling the extension manager.\n *\n * Version Added:\n *     4.0\n */\ninterface ExtensionManagerAttrs extends ModelAttributes {\n    /**\n     * The root of the extension API.\n     */\n    apiRoot: string;\n}\n\n\n/**\n * Represents an installed extension listed in the Manage Extensions list.\n *\n * This stores the various information about the extension that we'll display\n * to the user, and offers actions for enabling or disabling the extension.\n */\n@spina\nclass InstalledExtension extends BaseModel<InstalledExtensionAttrs> {\n    static defaults: InstalledExtensionAttrs = {\n        author: null,\n        authorURL: null,\n        configURL: null,\n        dbURL: null,\n        enabled: false,\n        loadError: null,\n        loadable: true,\n        name: null,\n        summary: null,\n        version: null,\n    };\n\n    /**\n     * Enable the extension.\n     *\n     * This will submit a request to the server to enable this extension.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise that will be resolved when the request to enable the\n     *     extension completes.\n     */\n    enable(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            this.save({\n                enabled: true,\n            }, {\n                wait: true,\n\n                error: (model, xhr) => {\n                    this.set({\n                        canEnable: !xhr.errorRsp.needs_reload,\n                        loadError: xhr.errorRsp.load_error,\n                        loadable: false,\n                    });\n\n                    reject(new Error(xhr.errorText));\n                },\n                success: () => resolve(),\n            });\n        });\n    }\n\n    /**\n     * Disable the extension.\n     *\n     * This will submit a request to the server to disable this extension.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise that will be resolved when the request to enable the\n     *     extension completes.\n     */\n    disable(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            this.save({\n                enabled: false,\n            }, {\n                wait: true,\n\n                error: xhr => reject(new Error(xhr.errorText)),\n                success: () => resolve(),\n            });\n        });\n    }\n\n    /**\n     * Return a JSON payload for requests sent to the server.\n     *\n     * Returns:\n     *     object:\n     *     A payload that will be serialized for making the API request.\n     */\n    toJSON(): object {\n        return {\n            enabled: this.get('enabled'),\n        };\n    }\n\n    /**\n     * Parse a JSON payload from the server.\n     *\n     * Args:\n     *     rsp (object):\n     *         The payload from the server.\n     *\n     * Returns:\n     *     object:\n     *     The parsed response.\n     */\n    parse(rsp) {\n        if (rsp.stat !== undefined) {\n            rsp = rsp.extension;\n        }\n\n        const id = rsp.class_name;\n        const configLink = rsp.links['admin-configure'];\n        const dbLink = rsp.links['admin-database'];\n\n        this.url = `${this.collection.url}${id}/`;\n\n        return {\n            author: rsp.author,\n            authorURL: rsp.author_url,\n            canDisable: rsp.can_disable,\n            canEnable: rsp.can_enable,\n            configURL: configLink ? configLink.href : null,\n            dbURL: dbLink ? dbLink.href : null,\n            enabled: rsp.enabled,\n            id: id,\n            loadError: rsp.load_error,\n            loadable: rsp.loadable,\n            name: rsp.name,\n            summary: rsp.summary,\n            version: rsp.version,\n        };\n    }\n\n    /**\n     * Perform AJAX requests against the server-side API.\n     *\n     * Args:\n     *     method (string):\n     *         The HTTP method to use.\n     *\n     *     model (InstalledExtension):\n     *         The extension object being synced.\n     *\n     *     options (object):\n     *         Options for the sync operation.\n     */\n    sync(\n        method: string,\n        model: InstalledExtension,\n        options?: JQuery.AjaxSettings,\n    ): JQueryXHR {\n        return Backbone.sync.call(this, method, model, _.defaults({\n            contentType: 'application/x-www-form-urlencoded',\n            data: model.toJSON(),\n            processData: true,\n\n            error: (xhr, textStatus, errorThrown) => {\n                let rsp;\n                let text;\n\n                try {\n                    rsp = $.parseJSON(xhr.responseText);\n                    text = rsp.err.msg;\n                } catch (e) {\n                    text = 'HTTP ' + xhr.status + ' ' + xhr.statusText;\n                    rsp = {\n                        canEnable: false,\n                        loadError: text,\n                    };\n                }\n\n                if (_.isFunction(options.error)) {\n                    xhr.errorText = text;\n                    xhr.errorRsp = rsp;\n                    options.error(xhr, textStatus, errorThrown);\n                }\n            },\n        }, options));\n    }\n}\n\n\n/**\n * A collection of installed extensions.\n *\n * This stores the list of installed extensions, and allows fetching from\n * the API.\n */\n@spina\nclass InstalledExtensionCollection extends BaseCollection {\n    static model = InstalledExtension;\n\n    /**\n     * Parse the response from the server.\n     *\n     * Args:\n     *     rsp (object):\n     *         The response from the server.\n     *\n     * Returns:\n     *     object:\n     *     The parsed data from the response.\n     */\n    parse(rsp) {\n        return rsp.extensions;\n    }\n}\n\n\n/**\n * Manages installed extensions.\n *\n * This stores a collection of installed extensions, and provides\n * functionality for loading the current list from the server.\n */\n@spina\nexport class ExtensionManager extends BaseModel<ExtensionManagerAttrs> {\n    static defaults: ExtensionManagerAttrs = {\n        apiRoot: null,\n    };\n\n    /**********************\n     * Instance variables *\n     **********************/\n\n    /**\n     * A collection of all installed extensions.\n     */\n    installedExtensions: InstalledExtensionCollection;\n\n    /**\n     * Initialize the manager.\n     */\n    initialize() {\n        this.installedExtensions = new InstalledExtensionCollection();\n        this.installedExtensions.url = this.get('apiRoot');\n    }\n\n    /**\n     * Load the extensions list.\n     */\n    load() {\n        this.trigger('loading');\n\n        this.installedExtensions.fetch({\n            success: () => this.trigger('loaded'),\n        });\n    }\n}\n"],"names":["spina","BaseModel","initialize","_class2","id","name","settings","_class","prototypeAttrs","cb","extension","setUpHook","enable","enabled","wait","error","canEnable","loadError","loadable","disable","toJSON","configURL","dbURL","sync","contentType","data","processData","text","rsp","author","authorURL","summary","version","BaseCollection","load","success","apiRoot"],"mappings":"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"}