"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import debug as shared_debug
from ..shared import validationerror as shared_validationerror
from dataclasses_json import Undefined, dataclass_json
from orb import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class IngestionResponse:
    validation_failed: list[shared_validationerror.ValidationError] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validation_failed') }})
    r"""Contains all failing validation events. In the case of a 200, this array will always be empty. This field will always be present."""
    debug: Optional[shared_debug.Debug] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('debug') }})
    r"""Optional debug information (only present when debug=true is passed to the endpoint). Contains ingested and duplicate event idempotency keys."""
    

