{"version":3,"file":"556.js","mappings":"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","sources":["webpack://@splunk/ucc_ui_lib/./src/main/webapp/components/CustomTab.jsx","webpack://@splunk/ucc_ui_lib/./src/main/webapp/components/ConfigurationFormView.jsx","webpack://@splunk/ucc_ui_lib/./src/main/webapp/components/ConfigurationTable.jsx","webpack://@splunk/ucc_ui_lib/./src/main/webapp/pages/Configuration/ConfigurationPage.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { _ } from '@splunk/ui-utils/i18n';\nimport { getUnifiedConfigs } from '../util/util';\nimport { getBuildDirPath } from '../util/script';\n\nfunction CustomTab({ tab }) {\n    const [loading, setLoading] = useState(true);\n    const divRef = useRef(null);\n\n    const globalConfig = getUnifiedConfigs();\n    const appName = globalConfig.meta.name;\n\n    const loadCustomTab = () =>\n        new Promise((resolve) => {\n            if (tab.customTab.type === 'external') {\n                import(\n                    /* webpackIgnore: true */ `${getBuildDirPath()}/custom/${tab.customTab.src}.js`\n                ).then((external) => {\n                    const Control = external.default;\n                    resolve(Control);\n                });\n            } else {\n                __non_webpack_require__(\n                    [`app/${appName}/js/build/custom/${tab.customTab.src}`],\n                    (Control) => resolve(Control)\n                );\n            }\n        });\n\n    useEffect(() => {\n        loadCustomTab().then((Control) => {\n            const customControl = new Control(tab, divRef.current);\n            customControl.render();\n            setLoading(false);\n        });\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n    return (\n        <>\n            {loading && _('Loading...')}\n            <div ref={divRef} style={{ visibility: loading ? 'hidden' : 'visible' }} />\n        </>\n    );\n}\n\nCustomTab.propTypes = {\n    tab: PropTypes.object.isRequired,\n};\n\nexport default CustomTab;\n","import React, { useRef, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { _ } from '@splunk/ui-utils/i18n';\nimport styled from 'styled-components';\nimport WaitSpinner from '@splunk/react-ui/WaitSpinner';\n\nimport BaseFormView from './BaseFormView';\nimport { StyledButton } from '../pages/EntryPageStyle';\nimport { axiosCallWrapper } from '../util/axiosCallWrapper';\nimport { MODE_CONFIG } from '../constants/modes';\nimport { WaitSpinnerWrapper } from './table/CustomTableStyle';\nimport { PAGE_CONF } from '../constants/pages';\n\nconst ButtonWrapper = styled.div`\n    margin-left: 270px !important;\n    width: 150px;\n`;\n\nfunction ConfigurationFormView({ serviceName }) {\n    const form = useRef(); // nosemgrep: typescript.react.security.audit.react-no-refs.react-no-refs\n    const [error, setError] = useState(null);\n    const [isSubmitting, setIsSubmitting] = useState(false);\n    const [currentServiceState, setCurrentServiceState] = useState({});\n\n    useEffect(() => {\n        axiosCallWrapper({\n            serviceName: `settings/${serviceName}`,\n            handleError: true,\n            callbackOnError: (err) => {\n                // eslint-disable-next-line no-param-reassign\n                err.uccErrorCode = 'ERR0005';\n                setError(err);\n            },\n        }).then((response) => {\n            setCurrentServiceState(response.data.entry[0].content);\n        });\n    }, [serviceName]);\n\n    const handleSubmit = () => {\n        form.current.handleSubmit();\n    };\n\n    const handleFormSubmit = (set) => {\n        setIsSubmitting(set);\n    };\n\n    if (error?.uccErrorCode) {\n        throw error;\n    }\n\n    // Ref is used here to call submit method of form only\n    return Object.keys(currentServiceState).length ? (\n        <>\n            <BaseFormView // nosemgrep: typescript.react.security.audit.react-no-refs.react-no-refs\n                ref={form}\n                page={PAGE_CONF}\n                stanzaName={serviceName}\n                serviceName=\"settings\"\n                mode={MODE_CONFIG}\n                currentServiceState={currentServiceState}\n                handleFormSubmit={handleFormSubmit}\n            />\n            <ButtonWrapper>\n                <StyledButton\n                    className=\"saveBtn\"\n                    appearance=\"primary\"\n                    label={isSubmitting ? <WaitSpinner /> : _('Save')}\n                    onClick={handleSubmit}\n                    disabled={isSubmitting}\n                />\n            </ButtonWrapper>\n        </>\n    ) : (\n        <WaitSpinnerWrapper size=\"medium\" />\n    );\n}\n\nConfigurationFormView.propTypes = {\n    serviceName: PropTypes.string.isRequired,\n};\n\nexport default ConfigurationFormView;\n","import React, { useState, memo, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { TableContextProvider } from '../context/TableContext';\nimport TableWrapper from './table/TableWrapper';\nimport EntityModal from './EntityModal';\nimport EntityPage from './EntityPage';\nimport { MODE_CREATE, MODE_CLONE } from '../constants/modes';\nimport { PAGE_CONF } from '../constants/pages';\nimport { STYLE_PAGE } from '../constants/dialogStyles';\n\nfunction ConfigurationTable({ selectedTab, updateIsPageOpen }) {\n    const [entity, setEntity] = useState({ open: false });\n\n    const isConfigurationPageStyle = selectedTab.style === STYLE_PAGE;\n\n    useEffect(() => {\n        if (isConfigurationPageStyle) {\n            updateIsPageOpen(!!entity.open);\n        }\n    }, [entity]); // eslint-disable-line react-hooks/exhaustive-deps\n\n    const handleRequestOpen = () => {\n        setEntity({\n            ...entity,\n            open: true,\n            mode: MODE_CREATE,\n            formLabel: `Add ${selectedTab.title}`,\n        });\n    };\n\n    // handle close request for modal style dialog\n    const handleModalDialogClose = () => {\n        setEntity({ ...entity, open: false });\n    };\n\n    // generate modal style dialog\n    const generateModalDialog = () => (\n        <EntityModal\n            page={PAGE_CONF}\n            open={entity.open}\n            handleRequestClose={handleModalDialogClose}\n            serviceName={selectedTab.name}\n            mode={MODE_CREATE}\n            formLabel={entity.formLabel}\n        />\n    );\n\n    // handle clone/edit request per row from table for page style dialog\n    const handleOpenPageStyleDialog = (row, mode) => {\n        setEntity({\n            ...entity,\n            open: true,\n            stanzaName: row.name,\n            formLabel:\n                mode === MODE_CLONE ? `Clone ${selectedTab.title}` : `Update ${selectedTab.title}`,\n            mode,\n        });\n    };\n\n    // handle close request for page style dialog\n    const handlePageDialogClose = () => {\n        setEntity({ ...entity, open: false });\n    };\n\n    // generate page style dialog\n    const generatePageDialog = () => (\n        <EntityPage\n            open={entity.open}\n            handleRequestClose={handlePageDialogClose}\n            serviceName={selectedTab.name}\n            stanzaName={entity.stanzaName}\n            mode={entity.mode}\n            formLabel={entity.formLabel}\n            page={PAGE_CONF}\n        />\n    );\n\n    const getTableWrapper = () => (\n        <div\n            style={\n                isConfigurationPageStyle && entity.open ? { display: 'none' } : { display: 'block' }\n            }\n        >\n            <TableWrapper\n                page={PAGE_CONF}\n                serviceName={selectedTab.name}\n                handleRequestModalOpen={() => handleRequestOpen()}\n                handleOpenPageStyleDialog={handleOpenPageStyleDialog}\n            />\n        </div>\n    );\n\n    return (\n        <TableContextProvider value={null}>\n            {isConfigurationPageStyle && entity.open && generatePageDialog()}\n            {getTableWrapper()}\n            {!isConfigurationPageStyle && entity.open && generateModalDialog()}\n        </TableContextProvider>\n    );\n}\n\nConfigurationTable.propTypes = {\n    selectedTab: PropTypes.object,\n    updateIsPageOpen: PropTypes.func,\n};\n\nexport default memo(ConfigurationTable);\n","import React, { useState, useCallback, useEffect } from 'react';\n\nimport { _ } from '@splunk/ui-utils/i18n';\nimport TabBar from '@splunk/react-ui/TabBar';\nimport ToastMessages from '@splunk/react-toast-notifications/ToastMessages';\nimport ColumnLayout from '@splunk/react-ui/ColumnLayout';\nimport styled from 'styled-components';\n\nimport useQuery from '../../hooks/useQuery';\nimport { getUnifiedConfigs } from '../../util/util';\nimport { TitleComponent, SubTitleComponent } from '../Input/InputPageStyle';\nimport ErrorBoundary from '../../components/ErrorBoundary';\nimport CustomTab from '../../components/CustomTab';\nimport ConfigurationFormView from '../../components/ConfigurationFormView';\nimport ConfigurationTable from '../../components/ConfigurationTable';\n\nconst Row = styled(ColumnLayout.Row)`\n    padding: 5px 0px;\n\n    .dropdown {\n        text-align: right;\n    }\n\n    .input_button {\n        text-align: right;\n        margin-right: 0px;\n    }\n`;\n\nfunction ConfigurationPage() {\n    const unifiedConfigs = getUnifiedConfigs();\n    const { title, description, tabs } = unifiedConfigs.pages.configuration;\n    const permittedTabNames = tabs.map((tab) => tab.name);\n\n    const [activeTabId, setActiveTabId] = useState(tabs[0].name);\n    const [isPageOpen, setIsPageOpen] = useState(false);\n\n    const query = useQuery();\n\n    // Run initially and when query is updated to set active tab based on initial URL\n    // or while navigating browser history\n    useEffect(() => {\n        // Only change active tab when provided tab in query is specified in globalConfig\n        // and if the current active tab is not same as provided in query\n        if (\n            query &&\n            permittedTabNames.includes(query.get('tab')) &&\n            query.get('tab') !== activeTabId\n        ) {\n            setActiveTabId(query.get('tab'));\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const handleChange = useCallback(\n        (e, { selectedTabId }) => {\n            setActiveTabId(selectedTabId);\n            setIsPageOpen(false);\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [activeTabId]\n    );\n\n    const updateIsPageOpen = (data) => {\n        setIsPageOpen(data);\n    };\n\n    const getCustomTab = (tab) => React.createElement(CustomTab, { tab });\n\n    const getTabContent = (tab) => {\n        let TabComponent;\n        if (tab?.customTab) {\n            TabComponent = getCustomTab(tab);\n        } else {\n            TabComponent = tab?.table ? (\n                <ConfigurationTable\n                    key={tab.name}\n                    selectedTab={tab}\n                    updateIsPageOpen={updateIsPageOpen}\n                />\n            ) : (\n                <ConfigurationFormView key={tab.name} serviceName={tab.name} />\n            );\n        }\n\n        return (\n            <div\n                key={tab.name}\n                style={tab.name !== activeTabId ? { display: 'none' } : { display: 'block' }}\n                id={`${tab.name}Tab`}\n            >\n                {TabComponent}\n            </div>\n        );\n    };\n\n    return (\n        <ErrorBoundary>\n            <div style={isPageOpen ? { display: 'none' } : { display: 'block' }}>\n                <ColumnLayout gutter={8}>\n                    <Row>\n                        <ColumnLayout.Column span={9}>\n                            <TitleComponent>{_(title)}</TitleComponent>\n                            <SubTitleComponent>{_(description || '')}</SubTitleComponent>\n                        </ColumnLayout.Column>\n                    </Row>\n                </ColumnLayout>\n                <TabBar activeTabId={activeTabId} onChange={handleChange}>\n                    {tabs.map((tab) => (\n                        <TabBar.Tab key={tab.name} label={_(tab.title)} tabId={tab.name} />\n                    ))}\n                </TabBar>\n            </div>\n            {tabs.map((tab) => getTabContent(tab))}\n            <ToastMessages position=\"top-right\" />\n        </ErrorBoundary>\n    );\n}\n\nexport default ConfigurationPage;\n"],"names":["CustomTab","tab","useState","loading","setLoading","divRef","useRef","appName","getUnifiedConfigs","meta","name","useEffect","Promise","resolve","customTab","type","import","getBuildDirPath","src","then","external","Control","__non_webpack_require__","current","render","_","ref","style","visibility","propTypes","PropTypes","ButtonWrapper","styled","ConfigurationFormView","serviceName","form","error","setError","isSubmitting","setIsSubmitting","currentServiceState","setCurrentServiceState","axiosCallWrapper","handleError","callbackOnError","err","uccErrorCode","response","data","entry","content","Object","keys","length","BaseFormView","page","PAGE_CONF","stanzaName","mode","MODE_CONFIG","handleFormSubmit","set","className","appearance","label","onClick","handleSubmit","disabled","size","ConfigurationTable","selectedTab","updateIsPageOpen","open","entity","setEntity","isConfigurationPageStyle","STYLE_PAGE","TableContext","value","EntityPage","handleRequestClose","formLabel","display","TableWrapper","handleRequestModalOpen","MODE_CREATE","title","handleOpenPageStyleDialog","row","MODE_CLONE","EntityModal","memo","Row","ColumnLayout","pages","configuration","description","tabs","permittedTabNames","map","activeTabId","setActiveTabId","isPageOpen","setIsPageOpen","query","useQuery","includes","get","handleChange","useCallback","e","selectedTabId","ErrorBoundary","gutter","Column","span","onChange","Tab","key","tabId","TabComponent","React","getCustomTab","table","id","getTabContent","position"],"sourceRoot":""}