{"version":3,"file":"895.js","mappings":"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","sources":["webpack://@splunk/ucc_ui_lib/./src/main/webapp/components/CustomMenu.jsx","webpack://@splunk/ucc_ui_lib/./src/main/webapp/components/MenuInput.jsx","webpack://@splunk/ucc_ui_lib/./src/main/webapp/pages/Input/InputPage.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { _ } from '@splunk/ui-utils/i18n';\nimport { getUnifiedConfigs } from '../util/util';\nimport { getBuildDirPath } from '../util/script';\n\nclass CustomMenu extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true,\n        };\n        this.shouldRender = true;\n    }\n\n    componentDidMount() {\n        const unifiedConfigs = getUnifiedConfigs();\n        const { services, menu: customMenuField, groupsMenu } = unifiedConfigs.pages.inputs;\n        this.setState({ loading: true });\n        this.loadCustomMenu().then((Control) => {\n            const customControl = new Control(unifiedConfigs, this.el, this.setValue);\n            if (services && customMenuField && !groupsMenu) {\n                customControl.render();\n            }\n            this.setState({ loading: false });\n        });\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (!nextState.loading && this.shouldRender) {\n            this.shouldRender = false;\n            return true;\n        }\n        return false;\n    }\n\n    setValue = (newValue) => {\n        this.props.handleChange(newValue);\n    };\n\n    loadCustomMenu = () =>\n        new Promise((resolve) => {\n            if (this.props.type === 'external') {\n                import(\n                    /* webpackIgnore: true */ `${getBuildDirPath()}/custom/${\n                        this.props.fileName\n                    }.js`\n                ).then((external) => {\n                    const Control = external.default;\n                    resolve(Control);\n                });\n            } else {\n                const globalConfig = getUnifiedConfigs();\n                const appName = globalConfig.meta.name;\n                __non_webpack_require__(\n                    [`app/${appName}/js/build/custom/${this.props.fileName}`],\n                    (Control) => resolve(Control)\n                );\n            }\n        });\n\n    render() {\n        return (\n            <>\n                {this.state.loading && _('Loading...')}\n                <span\n                    ref={(el) => {\n                        this.el = el;\n                    }}\n                    style={{ visibility: this.state.loading ? 'hidden' : 'visible' }}\n                />\n            </>\n        );\n    }\n}\n\nCustomMenu.propTypes = {\n    fileName: PropTypes.string.isRequired,\n    type: PropTypes.string,\n    handleChange: PropTypes.func,\n};\n\nexport default CustomMenu;\n","import React, { useState, useEffect, useMemo } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Dropdown from '@splunk/react-ui/Dropdown';\nimport Menu from '@splunk/react-ui/Menu';\nimport SlidingPanels from '@splunk/react-ui/SlidingPanels';\nimport ChevronLeft from '@splunk/react-icons/ChevronLeft';\nimport { _ } from '@splunk/ui-utils/i18n';\nimport styled from 'styled-components';\nimport { variables } from '@splunk/themes';\nimport { getFormattedMessage } from '../util/messageUtil';\nimport { getUnifiedConfigs } from '../util/util';\nimport CustomMenu from './CustomMenu';\nimport { StyledButton } from '../pages/EntryPageStyle';\n\nconst CustomSubTitle = styled.span`\n    color: ${variables.brandColorD20};\n    font-size: ${variables.fontSizeSmall};\n    font-weight: 500;\n`;\n\nexport const ROOT_GROUP_NAME = 'main_panel';\n\nfunction MenuInput({ handleRequestOpen }) {\n    const [activePanelId, setActivePanelId] = useState(ROOT_GROUP_NAME);\n    const [slidingPanelsTransition, setSlidingPanelsTransition] = useState('forward');\n    const [openDropDown, setOpenDropDown] = useState(false);\n    const [isSubMenu, setIsSubMenu] = useState(true);\n\n    const unifiedConfigs = getUnifiedConfigs();\n    const { services, menu: customMenuField, groupsMenu } = unifiedConfigs.pages.inputs;\n\n    const closeReasons = ['clickAway', 'escapeKey', 'offScreen', 'toggleClick'];\n    const toggle = (\n        <StyledButton appearance=\"primary\" id=\"addInputBtn\" label={_('Create New Input')} isMenu />\n    );\n\n    useEffect(() => {\n        if (!isSubMenu) {\n            setOpenDropDown(false);\n            setIsSubMenu(true);\n        }\n    }, [isSubMenu]); // eslint-disable-line react-hooks/exhaustive-deps\n\n    const handleRequestDropDownClose = ({ reason }) => {\n        setOpenDropDown(!closeReasons.includes(reason));\n    };\n\n    const handleRequestDropDownOpen = () => {\n        setOpenDropDown(true);\n    };\n\n    const handleChangeCustomMenu = (val) => {\n        const { service, input } = val;\n        handleRequestOpen({ serviceName: service, input });\n    };\n\n    const getMenuItems = (serviceItems, groupName) =>\n        serviceItems.map((service) =>\n            service?.hasSubmenu ? (\n                <Menu.Item\n                    hasSubmenu\n                    key={service.name}\n                    onClick={() => {\n                        setActivePanelId(service.name);\n                        setSlidingPanelsTransition('forward');\n                    }}\n                >\n                    {service.title}\n                </Menu.Item>\n            ) : (\n                <Menu.Item\n                    key={service.name}\n                    onClick={() => {\n                        handleRequestOpen({ serviceName: service.name, groupName });\n                        setIsSubMenu(false);\n                    }}\n                >\n                    {service.title}\n                    <CustomSubTitle>&nbsp;{service.subTitle}</CustomSubTitle>\n                </Menu.Item>\n            )\n        );\n\n    const getBackButton = () => (\n        <>\n            <Menu.Item\n                icon={<ChevronLeft />}\n                onClick={() => {\n                    setActivePanelId(ROOT_GROUP_NAME);\n                    setSlidingPanelsTransition('backward');\n                }}\n            >\n                Back\n            </Menu.Item>\n            <Menu.Divider />\n        </>\n    );\n\n    const getSlidingsPanels = (servicesGroup) =>\n        Object.keys(servicesGroup).map((groupsName) => (\n            <SlidingPanels.Panel key={groupsName} panelId={groupsName}>\n                <Menu>\n                    {groupsName !== ROOT_GROUP_NAME && getBackButton()}\n                    {getMenuItems(servicesGroup[groupsName], groupsName)}\n                </Menu>\n            </SlidingPanels.Panel>\n        ));\n\n    const getInputMenu = useMemo(() => {\n        const servicesGroup = { [ROOT_GROUP_NAME]: [] };\n        if (groupsMenu) {\n            groupsMenu.forEach((group) => {\n                if (group?.groupServices) {\n                    servicesGroup[group.groupName] = [];\n                    group.groupServices.forEach((serviceName) => {\n                        servicesGroup[group.groupName].push({\n                            name: serviceName,\n                            hasSubmenu: false,\n                            title: services.find((service) => service.name === serviceName).title,\n                            subTitle: services.find((service) => service.name === serviceName)\n                                ?.subTitle,\n                        });\n                    });\n                    servicesGroup[ROOT_GROUP_NAME].push({\n                        name: group.groupName,\n                        title: group.groupTitle,\n                        hasSubmenu: true,\n                    });\n                } else {\n                    servicesGroup[ROOT_GROUP_NAME].push({\n                        name: group.groupName,\n                        title: group.groupTitle,\n                        subTitle: services.find((service) => service.name === group.groupName)\n                            ?.subTitle,\n                        hasSubmenu: false,\n                    });\n                }\n            });\n        } else {\n            servicesGroup[ROOT_GROUP_NAME] = services.map((service) => ({\n                name: service.name,\n                title: service.title,\n                subTitle: service.subTitle,\n                hasSubmenu: false,\n            }));\n        }\n        return getSlidingsPanels(servicesGroup);\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n    // Making a dropdown if we have more than one service\n    const makeSingleSelectDropDown = () => (\n        <Dropdown\n            toggle={toggle}\n            open={openDropDown}\n            onRequestClose={handleRequestDropDownClose}\n            onRequestOpen={handleRequestDropDownOpen}\n        >\n            <SlidingPanels\n                activePanelId={activePanelId}\n                transition={slidingPanelsTransition}\n                style={{ width: '210px' }}\n            >\n                {getInputMenu}\n            </SlidingPanels>\n        </Dropdown>\n    );\n\n    // Making a dropdown if we have one service\n    const makeInputButton = () => (\n        <StyledButton\n            label={getFormattedMessage(100)}\n            appearance=\"primary\"\n            id=\"addInputBtn\"\n            onClick={() => {\n                handleRequestOpen({ serviceName: services[0].name });\n            }}\n        />\n    );\n\n    // Making a custom menu\n    const makeCustomMenu = () => (\n        <>\n            {React.createElement(CustomMenu, {\n                fileName: customMenuField.src,\n                type: customMenuField.type,\n                handleChange: handleChangeCustomMenu,\n            })}\n        </>\n    );\n\n    const getCustomMenuAndGroupsMenu = () => (\n        <>\n            {React.createElement(CustomMenu, {\n                fileName: customMenuField.src,\n                type: customMenuField.type,\n                handleChange: handleChangeCustomMenu,\n            })}\n            {services.length === 1 ? makeInputButton() : makeSingleSelectDropDown()}\n        </>\n    );\n\n    if (services && !customMenuField?.src) {\n        return services.length === 1 ? makeInputButton() : makeSingleSelectDropDown();\n    }\n\n    // Introducing a condition to enable simultaneous support for custom menu src and Groups Menu.\n    // ADDON-62948\n    if (services && customMenuField?.src && groupsMenu) {\n        return getCustomMenuAndGroupsMenu();\n    }\n    return makeCustomMenu();\n}\n\nMenuInput.propTypes = {\n    handleRequestOpen: PropTypes.func,\n};\n\nexport default MenuInput;\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\n\nimport ColumnLayout from '@splunk/react-ui/ColumnLayout';\nimport styled from 'styled-components';\nimport ToastMessages from '@splunk/react-toast-notifications/ToastMessages';\nimport TabBar from '@splunk/react-ui/TabBar';\nimport { _ } from '@splunk/ui-utils/i18n';\nimport { getUnifiedConfigs } from '../../util/util';\nimport { TitleComponent, SubTitleComponent } from './InputPageStyle';\nimport { TableContextProvider } from '../../context/TableContext';\nimport { MODE_CREATE, MODE_CLONE, MODE_EDIT } from '../../constants/modes';\nimport { PAGE_INPUT } from '../../constants/pages';\nimport { STYLE_PAGE } from '../../constants/dialogStyles';\nimport MenuInput, { ROOT_GROUP_NAME } from '../../components/MenuInput';\nimport TableWrapper from '../../components/table/TableWrapper';\nimport EntityModal from '../../components/EntityModal';\nimport ErrorBoundary from '../../components/ErrorBoundary';\nimport EntityPage from '../../components/EntityPage';\nimport useQuery from '../../hooks/useQuery';\n\nconst Row = styled(ColumnLayout.Row)`\n    padding: 5px 0px;\n\n    .title_menu_column {\n        width: auto !important;\n    }\n\n    .page_subtitle {\n        min-height: 20px;\n    }\n\n    .dropdown {\n        text-align: right;\n    }\n`;\n\nfunction InputPage() {\n    const [entity, setEntity] = useState({ open: false });\n    const unifiedConfigs = getUnifiedConfigs();\n    const { services, title, table, description } = unifiedConfigs.pages.inputs;\n\n    // check if the tabs feature is enabled or not.\n    const isTabs = !table;\n\n    const [activeTabId, setActiveTabId] = useState(services[0].name);\n    const selectedTab = services.find((x) => x.name === activeTabId);\n\n    const PERMITTED_MODES = [MODE_CLONE, MODE_CREATE, MODE_EDIT];\n    const permittedTabNames = services.map((service) => service.name);\n\n    const navigate = useNavigate();\n    const query = useQuery();\n\n    useEffect(() => {\n        // eslint-disable-next-line no-use-before-define\n        setServiceEntity();\n        // eslint-disable-next-line no-use-before-define\n        setActiveTab();\n    }, [useLocation().search]); // eslint-disable-line react-hooks/exhaustive-deps\n\n    const setServiceEntity = () => {\n        const service = services.find((x) => x.name === query.get('service'));\n        // Run only when service and action/mode is valid and modal/page is not open\n        if (query && service && PERMITTED_MODES.includes(query.get('action')) && !entity.open) {\n            // run when mode is not create and previous state info is available\n            if (query.get('action') !== MODE_CREATE && entity.stanzaName) {\n                setEntity({\n                    ...entity,\n                    open: true,\n                    isInputPageStyle: true,\n                    serviceName: query.get('service'),\n                    mode: query.get('action'),\n                });\n            } else {\n                // If previous state information is unavailable, create mode will be used by default\n                setEntity({\n                    ...entity,\n                    open: true,\n                    isInputPageStyle: true,\n                    serviceName: query.get('service'),\n                    formLabel: `Create ${service?.title}`,\n                    mode: MODE_CREATE,\n                });\n            }\n        } else if (\n            (!query.get('service') || !query.get('action')) &&\n            entity.open &&\n            entity.isInputPageStyle\n        ) {\n            // Close page when any of the required query params are not provided\n            setEntity({ ...entity, open: false });\n        }\n    };\n\n    const setActiveTab = () => {\n        if (query && permittedTabNames.includes(query.get('service'))) {\n            setActiveTabId(query.get('service'));\n        }\n    };\n\n    // handle modal/page open request on create/add entity button\n    const handleRequestOpen = ({ serviceName, groupName, input }) => {\n        const service = services.find((x) => x.name === serviceName);\n        const serviceTitle = service.title;\n        const isInputPageStyle = service.style === STYLE_PAGE;\n\n        setEntity({\n            ...entity,\n            open: true,\n            serviceName,\n            mode: MODE_CREATE,\n            formLabel: `Add ${serviceTitle}`,\n            isInputPageStyle,\n            groupName,\n        });\n        if (isInputPageStyle) {\n            // set query and push to navigate\n            query.set('service', serviceName);\n            query.set('action', MODE_CREATE);\n            const selectedGroup = groupName && groupName !== ROOT_GROUP_NAME ? groupName : null;\n            const inputQueryValue = input || selectedGroup || serviceName;\n            if (inputQueryValue) {\n                query.set('input', inputQueryValue);\n            } else {\n                query.delete('input');\n            }\n            navigate({ search: query.toString() });\n        }\n    };\n\n    // handle close/cancel/back request in add/create modal component\n    const handleModalDialogClose = () => {\n        setEntity({ ...entity, open: false });\n    };\n\n    // generate modal style dialog\n    const generateModalDialog = () => (\n        <EntityModal\n            page={PAGE_INPUT}\n            open={entity.open}\n            handleRequestClose={handleModalDialogClose}\n            serviceName={entity.serviceName}\n            mode={MODE_CREATE}\n            formLabel={entity.formLabel}\n            groupName={entity.groupName}\n        />\n    );\n\n    // handle clone/edit request per row from table for page style dialog\n    const handleOpenPageStyleDialog = (row, mode) => {\n        const label = services.find((x) => x.name === row.serviceName)?.title;\n        setEntity({\n            ...entity,\n            open: true,\n            isInputPageStyle: true,\n            serviceName: row.serviceName,\n            stanzaName: row.name,\n            formLabel: mode === MODE_CLONE ? `Clone ${label}` : `Update ${label}`,\n            mode,\n        });\n        // set query and push to history\n        query.set('service', row.serviceName);\n        query.set('action', mode);\n        navigate({ search: query.toString() });\n    };\n\n    // handle close request for page style dialog\n    const handlePageDialogClose = () => {\n        setEntity({ ...entity, open: false });\n        if (!isTabs) {\n            query.delete('service');\n        }\n        query.delete('action');\n        navigate({ search: query.toString() });\n    };\n\n    // generate page style dialog\n    const generatePageDialog = () => (\n        <EntityPage\n            open={entity.open}\n            handleRequestClose={handlePageDialogClose}\n            serviceName={entity.serviceName}\n            stanzaName={entity.stanzaName}\n            mode={entity.mode}\n            formLabel={entity.formLabel}\n            page={PAGE_INPUT}\n            groupName={entity.groupName}\n        />\n    );\n\n    const onTabChange = useCallback(\n        (e, { selectedTabId }) => {\n            setActiveTabId(selectedTabId);\n            query.delete('action');\n            query.set('service', selectedTabId);\n            navigate({ search: query.toString() });\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n        },\n        [activeTabId] // eslint-disable-line react-hooks/exhaustive-deps\n    );\n\n    return (\n        <ErrorBoundary>\n            <TableContextProvider value={null}>\n                {entity.isInputPageStyle && entity.open ? generatePageDialog() : null}{' '}\n                <div\n                    style={\n                        entity.isInputPageStyle && entity.open\n                            ? { display: 'none' }\n                            : { display: 'block' }\n                    }\n                >\n                    <ColumnLayout gutter={8}>\n                        <Row>\n                            <ColumnLayout.Column className={isTabs && 'title_menu_column'} span={9}>\n                                <TitleComponent>\n                                    {isTabs ? _(selectedTab.title) : _(title || '')}\n                                </TitleComponent>\n                                <SubTitleComponent className={isTabs && 'page_subtitle'}>\n                                    {isTabs ? _(selectedTab.description) : _(description || '')}\n                                </SubTitleComponent>\n                            </ColumnLayout.Column>\n                            <ColumnLayout.Column\n                                className={isTabs ? 'title_menu_column' : 'dropdown'}\n                                span={3}\n                            >\n                                {!isTabs && <MenuInput handleRequestOpen={handleRequestOpen} />}\n                            </ColumnLayout.Column>\n                        </Row>\n                    </ColumnLayout>\n                    {isTabs ? (\n                        <>\n                            <TabBar activeTabId={activeTabId} onChange={onTabChange}>\n                                {services.map((service) => (\n                                    <TabBar.Tab\n                                        key={service.name}\n                                        label={_(service.title)}\n                                        tabId={service.name}\n                                    />\n                                ))}\n                            </TabBar>\n                            {services.map((service) => (\n                                <div\n                                    key={service.name}\n                                    style={\n                                        service.name !== activeTabId\n                                            ? { display: 'none' }\n                                            : { display: 'block' }\n                                    }\n                                    id={`${service.name}Tab`}\n                                >\n                                    <TableWrapper\n                                        page={PAGE_INPUT}\n                                        serviceName={service.name}\n                                        handleRequestModalOpen={() =>\n                                            handleRequestOpen({ serviceName: service.name })\n                                        }\n                                        handleOpenPageStyleDialog={handleOpenPageStyleDialog}\n                                    />\n                                </div>\n                            ))}\n                        </>\n                    ) : (\n                        <TableWrapper\n                            page={PAGE_INPUT}\n                            handleOpenPageStyleDialog={handleOpenPageStyleDialog}\n                            displayActionBtnAllRows\n                        />\n                    )}\n\n                    <ToastMessages position=\"top-right\" />\n                    {!entity.isInputPageStyle && entity.open ? generateModalDialog() : null}\n                </div>\n            </TableContextProvider>\n        </ErrorBoundary>\n    );\n}\n\nexport default InputPage;\n"],"names":["CustomMenu","props","newValue","handleChange","Promise","resolve","type","import","getBuildDirPath","fileName","then","external","Control","appName","getUnifiedConfigs","meta","name","__non_webpack_require__","state","loading","shouldRender","unifiedConfigs","pages","inputs","services","customMenuField","menu","groupsMenu","this","setState","loadCustomMenu","customControl","el","setValue","render","nextProps","nextState","_","ref","style","visibility","Component","propTypes","PropTypes","CustomSubTitle","styled","variables","ROOT_GROUP_NAME","MenuInput","handleRequestOpen","useState","activePanelId","setActivePanelId","slidingPanelsTransition","setSlidingPanelsTransition","openDropDown","setOpenDropDown","isSubMenu","setIsSubMenu","closeReasons","toggle","appearance","id","label","isMenu","useEffect","handleRequestDropDownClose","reason","includes","handleRequestDropDownOpen","handleChangeCustomMenu","val","service","input","serviceName","getInputMenu","useMemo","servicesGroup","forEach","group","groupServices","groupName","push","hasSubmenu","title","find","subTitle","groupTitle","map","Object","keys","groupsName","key","panelId","icon","onClick","serviceItems","getSlidingsPanels","makeSingleSelectDropDown","open","onRequestClose","onRequestOpen","transition","width","makeInputButton","getFormattedMessage","src","React","length","Row","ColumnLayout","entity","setEntity","table","description","isTabs","activeTabId","setActiveTabId","selectedTab","x","PERMITTED_MODES","MODE_CLONE","MODE_CREATE","MODE_EDIT","permittedTabNames","navigate","useNavigate","query","useQuery","setServiceEntity","setActiveTab","useLocation","search","get","stanzaName","isInputPageStyle","mode","formLabel","serviceTitle","STYLE_PAGE","set","inputQueryValue","toString","handleOpenPageStyleDialog","row","onTabChange","useCallback","e","selectedTabId","ErrorBoundary","TableContext","value","EntityPage","handleRequestClose","page","PAGE_INPUT","display","gutter","Column","className","span","onChange","Tab","tabId","TableWrapper","handleRequestModalOpen","displayActionBtnAllRows","position","EntityModal"],"sourceRoot":""}