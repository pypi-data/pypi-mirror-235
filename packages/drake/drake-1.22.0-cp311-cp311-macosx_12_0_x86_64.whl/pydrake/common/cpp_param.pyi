from _typeshed import Incomplete
from pydrake.common import pretty_class_name as pretty_class_name

class _StrictMap:
    def __init__(self) -> None: ...
    def add(self, key, value) -> None: ...
    def get(self, key, default): ...

class _ParamAliases:
    def __init__(self) -> None: ...
    def register(self, canonical, aliases) -> None: ...
    def is_aliased(self, alias): ...
    def get_canonical(self, alias): ...
    def get_name(self, alias, *, mangle): ...

def get_param_canonical(param): ...
def get_param_names(param, *, mangle: bool = ...): ...

class _Generic:
    def __init__(self, name, instantiator, num_params) -> None: ...
    def __getitem__(self, params): ...

Dict: Incomplete
List: Incomplete
Optional: Incomplete
Union: Incomplete
