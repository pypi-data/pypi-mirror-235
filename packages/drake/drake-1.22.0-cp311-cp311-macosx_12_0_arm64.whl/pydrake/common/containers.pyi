from _typeshed import Incomplete

class _EqualityProxyBase:
    def __init__(self, value) -> None: ...
    def __hash__(self): ...
    def __eq__(self, other): ...
    value: Incomplete

class _DictKeyWrap(dict):
    def __init__(self, dict_in, key_wrap, key_unwrap) -> None: ...
    def __setitem__(self, key, value): ...
    def __getitem__(self, key): ...
    def __delitem__(self, key): ...
    def __contains__(self, key) -> bool: ...
    def items(self): ...
    def keys(self): ...
    def raw(self): ...

class EqualToDict(_DictKeyWrap):
    def __init__(self, *args, **kwargs) -> None: ...

class NamedViewBase:
    def __init__(self, value) -> None: ...
    @classmethod
    def get_fields(cls): ...
    def __getitem__(self, i): ...
    def __setitem__(self, i, value_i) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self): ...
    def __array__(self): ...
    @classmethod
    def Zero(cls): ...

def namedview(name, fields, *, sanitize_field_names: bool = ...): ...
