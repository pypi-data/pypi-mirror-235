from _typeshed import Incomplete
from pydrake.common import pretty_class_name as pretty_class_name
from pydrake.common.cpp_param import get_param_canonical as get_param_canonical, get_param_names as get_param_names

def get_or_init(scope, name, template_cls, *args, **kwargs): ...

class _Deprecation:
    message: Incomplete
    date: Incomplete
    def __init__(self, *, message, date) -> None: ...

class TemplateBase:
    name: Incomplete
    param_list: Incomplete
    __doc__: str
    def __init__(self, name, allow_default: bool = ..., scope: Incomplete | None = ...) -> None: ...
    def __getitem__(self, *param): ...
    def __call__(self, *args, **kwargs): ...
    def get_module_name(self): ...
    class _Deferred: ...
    def get_instantiation(self, param: Incomplete | None = ..., throw_error: bool = ...): ...
    def add_instantiation(self, param, instantiation, skip_rename: bool = ...): ...
    def add_instantiations(self, instantiation_func, param_list) -> None: ...
    def deprecate_instantiation(self, param, message, *, date: Incomplete | None = ...): ...
    def get_param_set(self, instantiation): ...
    def is_instantiation(self, obj): ...
    @classmethod
    def define(cls, name, param_list, *args, scope: Incomplete | None = ..., **kwargs): ...

class TemplateClass(TemplateBase):
    def __init__(self, name, *, scope: Incomplete | None = ..., **kwargs) -> None: ...
    def is_subclass_of_instantiation(self, obj): ...

class TemplateFunction(TemplateBase): ...

class TemplateMethod(TemplateBase):
    def __init__(self, name, cls, scope: Incomplete | None = ..., **kwargs) -> None: ...
    def __get__(self, obj, objtype): ...
    def __set__(self, obj, value) -> None: ...
    class _Bound:
        def __init__(self, template, obj) -> None: ...
        def __getitem__(self, param): ...
