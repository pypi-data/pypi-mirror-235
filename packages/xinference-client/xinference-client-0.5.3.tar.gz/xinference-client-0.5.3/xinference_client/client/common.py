# Copyright 2022-2023 XProbe Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import json
from typing import Iterator

from ..types import ChatCompletionChunk, CompletionChunk


def streaming_response_iterator(
    response_chunk: Iterator[bytes],
) -> Iterator["CompletionChunk"]:
    """
    Create an Iterator to handle the streaming type of generation.

    Parameters
    ----------
    response_chunk: Iterator[bytes]
        Generated lines by the Model Generator.

    Returns
    -------
    Iterator["CompletionChunk"]
        Iterator of CompletionChunks generated by models.

    """

    for chunk in response_chunk:
        content = json.loads(chunk.decode("utf-8"))
        error = content.get("error", None)
        if error is not None:
            raise Exception(str(error))
        yield content


# Duplicate code due to type hint issues
def chat_streaming_response_iterator(
    response_chunk: Iterator[bytes],
) -> Iterator["ChatCompletionChunk"]:
    """
    Create an Iterator to handle the streaming type of generation.

    Parameters
    ----------
    response_chunk: Iterator[bytes]
        Generated chunk by the Model Generator.

    Returns
    -------
    Iterator["ChatCompletionChunk"]
        Iterator of ChatCompletionChunks generated by models.

    """

    for chunk in response_chunk:
        content = json.loads(chunk.decode("utf-8"))
        error = content.get("error", None)
        if error is not None:
            raise Exception(str(error))
        yield content
