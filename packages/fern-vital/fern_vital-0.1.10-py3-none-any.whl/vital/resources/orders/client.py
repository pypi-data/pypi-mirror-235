# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing
import urllib.parse
from json.decoder import JSONDecodeError

import pydantic

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.datetime_utils import serialize_datetime
from ...core.remove_none_from_dict import remove_none_from_dict
from ...errors.unprocessable_entity_error import UnprocessableEntityError
from ...types.get_orders_response import GetOrdersResponse
from ...types.http_validation_error import HttpValidationError


class OrdersClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_orders(
        self,
        *,
        start_date: typing.Optional[dt.datetime] = None,
        end_date: typing.Optional[dt.datetime] = None,
        user_id: typing.Optional[str] = None,
        patient_name: typing.Optional[str] = None,
        order_ids: typing.Union[typing.Optional[str], typing.List[str]],
        page: typing.Optional[int] = None,
        size: typing.Optional[int] = None,
    ) -> GetOrdersResponse:
        """
        GET many orders with filters.

        Parameters:
            - start_date: typing.Optional[dt.datetime]. Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00

            - end_date: typing.Optional[dt.datetime]. Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59

            - user_id: typing.Optional[str]. Filter by user ID.

            - patient_name: typing.Optional[str]. Filter by patient name.

            - order_ids: typing.Union[typing.Optional[str], typing.List[str]]. Filter by order ids.

            - page: typing.Optional[int].

            - size: typing.Optional[int].
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v3/orders"),
            params=remove_none_from_dict(
                {
                    "start_date": serialize_datetime(start_date) if start_date is not None else None,
                    "end_date": serialize_datetime(end_date) if end_date is not None else None,
                    "user_id": user_id,
                    "patient_name": patient_name,
                    "order_ids": order_ids,
                    "page": page,
                    "size": size,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetOrdersResponse, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncOrdersClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_orders(
        self,
        *,
        start_date: typing.Optional[dt.datetime] = None,
        end_date: typing.Optional[dt.datetime] = None,
        user_id: typing.Optional[str] = None,
        patient_name: typing.Optional[str] = None,
        order_ids: typing.Union[typing.Optional[str], typing.List[str]],
        page: typing.Optional[int] = None,
        size: typing.Optional[int] = None,
    ) -> GetOrdersResponse:
        """
        GET many orders with filters.

        Parameters:
            - start_date: typing.Optional[dt.datetime]. Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00

            - end_date: typing.Optional[dt.datetime]. Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59

            - user_id: typing.Optional[str]. Filter by user ID.

            - patient_name: typing.Optional[str]. Filter by patient name.

            - order_ids: typing.Union[typing.Optional[str], typing.List[str]]. Filter by order ids.

            - page: typing.Optional[int].

            - size: typing.Optional[int].
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v3/orders"),
            params=remove_none_from_dict(
                {
                    "start_date": serialize_datetime(start_date) if start_date is not None else None,
                    "end_date": serialize_datetime(end_date) if end_date is not None else None,
                    "user_id": user_id,
                    "patient_name": patient_name,
                    "order_ids": order_ids,
                    "page": page,
                    "size": size,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetOrdersResponse, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
