# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import pydantic

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_dict import remove_none_from_dict
from ...errors.unprocessable_entity_error import UnprocessableEntityError
from ...types.area_info import AreaInfo
from ...types.client_facing_diagnosis_information import ClientFacingDiagnosisInformation
from ...types.client_facing_lab import ClientFacingLab
from ...types.client_facing_lab_test import ClientFacingLabTest
from ...types.client_facing_order import ClientFacingOrder
from ...types.client_facing_payor_search_response import ClientFacingPayorSearchResponse
from ...types.consent import Consent
from ...types.get_markers_response import GetMarkersResponse
from ...types.health_insurance_create_request import HealthInsuranceCreateRequest
from ...types.http_validation_error import HttpValidationError
from ...types.lab_results_metadata import LabResultsMetadata
from ...types.lab_results_raw import LabResultsRaw
from ...types.lab_test_collection_method import LabTestCollectionMethod
from ...types.lab_test_sample_type import LabTestSampleType
from ...types.patient_address_compatible import PatientAddressCompatible
from ...types.patient_details_compatible import PatientDetailsCompatible
from ...types.physician_create_request import PhysicianCreateRequest
from ...types.post_order_response import PostOrderResponse
from ...types.shipping_address import ShippingAddress

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class LabTestsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_tests(self) -> typing.List[ClientFacingLabTest]:
        """
        GET all the lab tests the team has access to.
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v3/lab_tests"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.List[ClientFacingLabTest], _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_lab_test_for_team(
        self,
        *,
        marker_ids: typing.List[int],
        lab_id: int,
        name: str,
        method: LabTestCollectionMethod,
        sample_type: LabTestSampleType,
        description: str,
        fasting: typing.Optional[bool] = OMIT,
    ) -> ClientFacingLabTest:
        """
        Parameters:
            - marker_ids: typing.List[int].

            - lab_id: int.

            - name: str.

            - method: LabTestCollectionMethod.

            - sample_type: LabTestSampleType.

            - description: str.

            - fasting: typing.Optional[bool].
        """
        _request: typing.Dict[str, typing.Any] = {
            "marker_ids": marker_ids,
            "lab_id": lab_id,
            "name": name,
            "method": method,
            "sample_type": sample_type,
            "description": description,
        }
        if fasting is not OMIT:
            _request["fasting"] = fasting
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v3/lab_tests"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ClientFacingLabTest, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_markers(
        self,
        *,
        lab_id: typing.Optional[int] = None,
        name: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        size: typing.Optional[int] = None,
    ) -> GetMarkersResponse:
        """
        GET all the markers for the given lab.

        Parameters:
            - lab_id: typing.Optional[int]. The identifier Vital assigned to a lab partner.

            - name: typing.Optional[str]. The name of an individual biomarker or a panel. Used as a fuzzy filter when searching markers.

            - page: typing.Optional[int].

            - size: typing.Optional[int].
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v3/lab_tests/markers"),
            params=remove_none_from_dict({"lab_id": lab_id, "name": name, "page": page, "size": size}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetMarkersResponse, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_labs(self) -> typing.List[ClientFacingLab]:
        """
        GET all the labs.
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v3/lab_tests/labs"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.List[ClientFacingLab], _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_unregistered_testkit_order(
        self, *, user_id: str, lab_test_id: str, shipping_details: ShippingAddress
    ) -> PostOrderResponse:
        """
        Creates an order for an unregistered testkit

        Parameters:
            - user_id: str.

            - lab_test_id: str.

            - shipping_details: ShippingAddress.
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v3/order/testkit"),
            json=jsonable_encoder(
                {"user_id": user_id, "lab_test_id": lab_test_id, "shipping_details": shipping_details}
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PostOrderResponse, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_area_info(self, *, zip_code: str) -> AreaInfo:
        """
        GET information about an area with respect to lab-testing.

        Information returned:
        * Whether a given zip code is served by our Phlebotomy network.

        Parameters:
            - zip_code: str. Zip code of the area to check
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v3/order/area/info"),
            params=remove_none_from_dict({"zip_code": zip_code}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(AreaInfo, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_results_pdf(self, order_id: str) -> typing.Any:
        """
        This endpoint returns the lab results for the order.

        Parameters:
            - order_id: str.
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"v3/order/{order_id}/result/pdf"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_results_metadata(self, order_id: str) -> LabResultsMetadata:
        """
        Return metadata related to order results, such as lab metadata,
        provider and sample dates.

        Parameters:
            - order_id: str.
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"v3/order/{order_id}/result/metadata"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(LabResultsMetadata, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_results(self, order_id: str) -> LabResultsRaw:
        """
        Return both metadata and raw json test data

        Parameters:
            - order_id: str.
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"v3/order/{order_id}/result"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(LabResultsRaw, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(self, order_id: str) -> typing.Any:
        """
        GET requisition pdf for an order

        Parameters:
            - order_id: str. Your Order ID.
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"v3/order/{order_id}/requisition/pdf"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_order(self, order_id: str) -> ClientFacingOrder:
        """
        GET individual order by ID.

        Parameters:
            - order_id: str. Your Order ID.
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"v3/order/{order_id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ClientFacingOrder, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_order(
        self,
        *,
        user_id: str,
        lab_test_id: str,
        physician: typing.Optional[PhysicianCreateRequest] = OMIT,
        health_insurance: typing.Optional[HealthInsuranceCreateRequest] = OMIT,
        priority: typing.Optional[bool] = OMIT,
        consents: typing.Optional[typing.List[Consent]] = OMIT,
        patient_details: PatientDetailsCompatible,
        patient_address: PatientAddressCompatible,
    ) -> PostOrderResponse:
        """
        POST create new order

        Parameters:
            - user_id: str.

            - lab_test_id: str.

            - physician: typing.Optional[PhysicianCreateRequest].

            - health_insurance: typing.Optional[HealthInsuranceCreateRequest].

            - priority: typing.Optional[bool]. Defines whether order is priority or not. Only available for Labcorp. For Labcorp, this corresponds to a STAT order.

            - consents: typing.Optional[typing.List[Consent]].

            - patient_details: PatientDetailsCompatible.

            - patient_address: PatientAddressCompatible.
        """
        _request: typing.Dict[str, typing.Any] = {
            "user_id": user_id,
            "lab_test_id": lab_test_id,
            "patient_details": patient_details,
            "patient_address": patient_address,
        }
        if physician is not OMIT:
            _request["physician"] = physician
        if health_insurance is not OMIT:
            _request["health_insurance"] = health_insurance
        if priority is not OMIT:
            _request["priority"] = priority
        if consents is not OMIT:
            _request["consents"] = consents
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v3/order"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PostOrderResponse, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def search_payor(
        self, *, insurance_name: str, insurance_state: typing.Optional[str] = OMIT
    ) -> typing.List[ClientFacingPayorSearchResponse]:
        """
        Parameters:
            - insurance_name: str.

            - insurance_state: typing.Optional[str].
        """
        _request: typing.Dict[str, typing.Any] = {"insurance_name": insurance_name}
        if insurance_state is not OMIT:
            _request["insurance_state"] = insurance_state
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v3/insurance/search/payor"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.List[ClientFacingPayorSearchResponse], _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def search_diagnosis(self, *, diagnosis_query: str) -> typing.List[ClientFacingDiagnosisInformation]:
        """
        Parameters:
            - diagnosis_query: str.
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v3/insurance/search/diagnosis"),
            params=remove_none_from_dict({"diagnosis_query": diagnosis_query}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.List[ClientFacingDiagnosisInformation], _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncLabTestsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_tests(self) -> typing.List[ClientFacingLabTest]:
        """
        GET all the lab tests the team has access to.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v3/lab_tests"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.List[ClientFacingLabTest], _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_lab_test_for_team(
        self,
        *,
        marker_ids: typing.List[int],
        lab_id: int,
        name: str,
        method: LabTestCollectionMethod,
        sample_type: LabTestSampleType,
        description: str,
        fasting: typing.Optional[bool] = OMIT,
    ) -> ClientFacingLabTest:
        """
        Parameters:
            - marker_ids: typing.List[int].

            - lab_id: int.

            - name: str.

            - method: LabTestCollectionMethod.

            - sample_type: LabTestSampleType.

            - description: str.

            - fasting: typing.Optional[bool].
        """
        _request: typing.Dict[str, typing.Any] = {
            "marker_ids": marker_ids,
            "lab_id": lab_id,
            "name": name,
            "method": method,
            "sample_type": sample_type,
            "description": description,
        }
        if fasting is not OMIT:
            _request["fasting"] = fasting
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v3/lab_tests"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ClientFacingLabTest, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_markers(
        self,
        *,
        lab_id: typing.Optional[int] = None,
        name: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        size: typing.Optional[int] = None,
    ) -> GetMarkersResponse:
        """
        GET all the markers for the given lab.

        Parameters:
            - lab_id: typing.Optional[int]. The identifier Vital assigned to a lab partner.

            - name: typing.Optional[str]. The name of an individual biomarker or a panel. Used as a fuzzy filter when searching markers.

            - page: typing.Optional[int].

            - size: typing.Optional[int].
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v3/lab_tests/markers"),
            params=remove_none_from_dict({"lab_id": lab_id, "name": name, "page": page, "size": size}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetMarkersResponse, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_labs(self) -> typing.List[ClientFacingLab]:
        """
        GET all the labs.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v3/lab_tests/labs"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.List[ClientFacingLab], _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_unregistered_testkit_order(
        self, *, user_id: str, lab_test_id: str, shipping_details: ShippingAddress
    ) -> PostOrderResponse:
        """
        Creates an order for an unregistered testkit

        Parameters:
            - user_id: str.

            - lab_test_id: str.

            - shipping_details: ShippingAddress.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v3/order/testkit"),
            json=jsonable_encoder(
                {"user_id": user_id, "lab_test_id": lab_test_id, "shipping_details": shipping_details}
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PostOrderResponse, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_area_info(self, *, zip_code: str) -> AreaInfo:
        """
        GET information about an area with respect to lab-testing.

        Information returned:
        * Whether a given zip code is served by our Phlebotomy network.

        Parameters:
            - zip_code: str. Zip code of the area to check
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v3/order/area/info"),
            params=remove_none_from_dict({"zip_code": zip_code}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(AreaInfo, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_results_pdf(self, order_id: str) -> typing.Any:
        """
        This endpoint returns the lab results for the order.

        Parameters:
            - order_id: str.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"v3/order/{order_id}/result/pdf"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_results_metadata(self, order_id: str) -> LabResultsMetadata:
        """
        Return metadata related to order results, such as lab metadata,
        provider and sample dates.

        Parameters:
            - order_id: str.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"v3/order/{order_id}/result/metadata"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(LabResultsMetadata, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_results(self, order_id: str) -> LabResultsRaw:
        """
        Return both metadata and raw json test data

        Parameters:
            - order_id: str.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"v3/order/{order_id}/result"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(LabResultsRaw, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(self, order_id: str) -> typing.Any:
        """
        GET requisition pdf for an order

        Parameters:
            - order_id: str. Your Order ID.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"v3/order/{order_id}/requisition/pdf"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_order(self, order_id: str) -> ClientFacingOrder:
        """
        GET individual order by ID.

        Parameters:
            - order_id: str. Your Order ID.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"v3/order/{order_id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ClientFacingOrder, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_order(
        self,
        *,
        user_id: str,
        lab_test_id: str,
        physician: typing.Optional[PhysicianCreateRequest] = OMIT,
        health_insurance: typing.Optional[HealthInsuranceCreateRequest] = OMIT,
        priority: typing.Optional[bool] = OMIT,
        consents: typing.Optional[typing.List[Consent]] = OMIT,
        patient_details: PatientDetailsCompatible,
        patient_address: PatientAddressCompatible,
    ) -> PostOrderResponse:
        """
        POST create new order

        Parameters:
            - user_id: str.

            - lab_test_id: str.

            - physician: typing.Optional[PhysicianCreateRequest].

            - health_insurance: typing.Optional[HealthInsuranceCreateRequest].

            - priority: typing.Optional[bool]. Defines whether order is priority or not. Only available for Labcorp. For Labcorp, this corresponds to a STAT order.

            - consents: typing.Optional[typing.List[Consent]].

            - patient_details: PatientDetailsCompatible.

            - patient_address: PatientAddressCompatible.
        """
        _request: typing.Dict[str, typing.Any] = {
            "user_id": user_id,
            "lab_test_id": lab_test_id,
            "patient_details": patient_details,
            "patient_address": patient_address,
        }
        if physician is not OMIT:
            _request["physician"] = physician
        if health_insurance is not OMIT:
            _request["health_insurance"] = health_insurance
        if priority is not OMIT:
            _request["priority"] = priority
        if consents is not OMIT:
            _request["consents"] = consents
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v3/order"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PostOrderResponse, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def search_payor(
        self, *, insurance_name: str, insurance_state: typing.Optional[str] = OMIT
    ) -> typing.List[ClientFacingPayorSearchResponse]:
        """
        Parameters:
            - insurance_name: str.

            - insurance_state: typing.Optional[str].
        """
        _request: typing.Dict[str, typing.Any] = {"insurance_name": insurance_name}
        if insurance_state is not OMIT:
            _request["insurance_state"] = insurance_state
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v3/insurance/search/payor"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.List[ClientFacingPayorSearchResponse], _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def search_diagnosis(self, *, diagnosis_query: str) -> typing.List[ClientFacingDiagnosisInformation]:
        """
        Parameters:
            - diagnosis_query: str.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v3/insurance/search/diagnosis"),
            params=remove_none_from_dict({"diagnosis_query": diagnosis_query}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.List[ClientFacingDiagnosisInformation], _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
