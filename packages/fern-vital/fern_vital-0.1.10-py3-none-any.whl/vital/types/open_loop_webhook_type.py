# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class OpenLoopWebhookType(str, enum.Enum):
    """
    An enumeration.
    """

    APPOINTMENT_CREATED = "appointment.created"
    APPOINTMENT_UPDATED = "appointment.updated"
    APPOINTMENT_DELETED = "appointment.deleted"
    BILLING_ITEM_CREATED = "billing_item.created"
    BILLING_ITEM_UPDATED = "billing_item.updated"
    CMS_1500_CREATED = "cms1500.created"
    CMS_1500_UPDATED = "cms1500.updated"
    CMS_1500_DELETED = "cms1500.deleted"
    COMMENT_CREATED = "comment.created"
    COMMENT_UPDATED = "comment.updated"
    COMMENT_DELETED = "comment.deleted"
    CONVERSATION_MEMBERSHIP_VIEWED = "conversation_membership.viewed"
    DOCUMENT_CREATED = "document.created"
    DOCUMENT_UPDATED = "document.updated"
    DOCUMENT_DELETED = "document.deleted"
    ENTRY_CREATED = "entry.created"
    ENTRY_UPDATED = "entry.updated"
    ENTRY_DELETED = "entry.deleted"
    FORM_ANSWER_GROUP_CREATED = "form_answer_group.created"
    FORM_ANSWER_GROUP_DELETED = "form_answer_group.deleted"
    FORM_ANSWER_GROUP_LOCKED = "form_answer_group.locked"
    GOAL_CREATED = "goal.created"
    GOAL_UPDATED = "goal.updated"
    GOAL_DELETED = "goal.deleted"
    GOAL_HISTORY_CREATED = "goal_history.created"
    INSURANCE_AUTHORIZATION_CREATED = "insurance_authorization.created"
    INSURANCE_AUTHORIZATION_UPDATED = "insurance_authorization.updated"
    INSURANCE_AUTHORIZATION_DELETED = "insurance_authorization.deleted"
    MESSAGE_CREATED = "message.created"
    MESSAGE_DELETED = "message.deleted"
    METRIC_ENTRY_CREATED = "metric_entry.created"
    METRIC_ENTRY_UPDATED = "metric_entry.updated"
    METRIC_ENTRY_DELETED = "metric_entry.deleted"
    PATIENT_CREATED = "patient.created"
    PATIENT_UPDATED = "patient.updated"
    PAYMENT_CREATED = "payment.created"
    PAYMENT_UPDATED = "payment.updated"
    PAYMENT_DELETED = "payment.deleted"
    POLICY_CREATED = "policy.created"
    POLICY_UPDATED = "policy.updated"
    POLICY_DELETED = "policy.deleted"
    REQUESTED_FORM_COMPLETION_CREATED = "requested_form_completion.created"
    REQUESTED_FORM_COMPLETION_UPDATED = "requested_form_completion.updated"
    REQUESTED_FORM_COMPLETION_DELETED = "requested_form_completion.deleted"
    TASK_CREATED = "task.created"
    TASK_UPDATED = "task.updated"
    TASK_DELETED = "task.deleted"

    def visit(
        self,
        appointment_created: typing.Callable[[], T_Result],
        appointment_updated: typing.Callable[[], T_Result],
        appointment_deleted: typing.Callable[[], T_Result],
        billing_item_created: typing.Callable[[], T_Result],
        billing_item_updated: typing.Callable[[], T_Result],
        cms_1500_created: typing.Callable[[], T_Result],
        cms_1500_updated: typing.Callable[[], T_Result],
        cms_1500_deleted: typing.Callable[[], T_Result],
        comment_created: typing.Callable[[], T_Result],
        comment_updated: typing.Callable[[], T_Result],
        comment_deleted: typing.Callable[[], T_Result],
        conversation_membership_viewed: typing.Callable[[], T_Result],
        document_created: typing.Callable[[], T_Result],
        document_updated: typing.Callable[[], T_Result],
        document_deleted: typing.Callable[[], T_Result],
        entry_created: typing.Callable[[], T_Result],
        entry_updated: typing.Callable[[], T_Result],
        entry_deleted: typing.Callable[[], T_Result],
        form_answer_group_created: typing.Callable[[], T_Result],
        form_answer_group_deleted: typing.Callable[[], T_Result],
        form_answer_group_locked: typing.Callable[[], T_Result],
        goal_created: typing.Callable[[], T_Result],
        goal_updated: typing.Callable[[], T_Result],
        goal_deleted: typing.Callable[[], T_Result],
        goal_history_created: typing.Callable[[], T_Result],
        insurance_authorization_created: typing.Callable[[], T_Result],
        insurance_authorization_updated: typing.Callable[[], T_Result],
        insurance_authorization_deleted: typing.Callable[[], T_Result],
        message_created: typing.Callable[[], T_Result],
        message_deleted: typing.Callable[[], T_Result],
        metric_entry_created: typing.Callable[[], T_Result],
        metric_entry_updated: typing.Callable[[], T_Result],
        metric_entry_deleted: typing.Callable[[], T_Result],
        patient_created: typing.Callable[[], T_Result],
        patient_updated: typing.Callable[[], T_Result],
        payment_created: typing.Callable[[], T_Result],
        payment_updated: typing.Callable[[], T_Result],
        payment_deleted: typing.Callable[[], T_Result],
        policy_created: typing.Callable[[], T_Result],
        policy_updated: typing.Callable[[], T_Result],
        policy_deleted: typing.Callable[[], T_Result],
        requested_form_completion_created: typing.Callable[[], T_Result],
        requested_form_completion_updated: typing.Callable[[], T_Result],
        requested_form_completion_deleted: typing.Callable[[], T_Result],
        task_created: typing.Callable[[], T_Result],
        task_updated: typing.Callable[[], T_Result],
        task_deleted: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is OpenLoopWebhookType.APPOINTMENT_CREATED:
            return appointment_created()
        if self is OpenLoopWebhookType.APPOINTMENT_UPDATED:
            return appointment_updated()
        if self is OpenLoopWebhookType.APPOINTMENT_DELETED:
            return appointment_deleted()
        if self is OpenLoopWebhookType.BILLING_ITEM_CREATED:
            return billing_item_created()
        if self is OpenLoopWebhookType.BILLING_ITEM_UPDATED:
            return billing_item_updated()
        if self is OpenLoopWebhookType.CMS_1500_CREATED:
            return cms_1500_created()
        if self is OpenLoopWebhookType.CMS_1500_UPDATED:
            return cms_1500_updated()
        if self is OpenLoopWebhookType.CMS_1500_DELETED:
            return cms_1500_deleted()
        if self is OpenLoopWebhookType.COMMENT_CREATED:
            return comment_created()
        if self is OpenLoopWebhookType.COMMENT_UPDATED:
            return comment_updated()
        if self is OpenLoopWebhookType.COMMENT_DELETED:
            return comment_deleted()
        if self is OpenLoopWebhookType.CONVERSATION_MEMBERSHIP_VIEWED:
            return conversation_membership_viewed()
        if self is OpenLoopWebhookType.DOCUMENT_CREATED:
            return document_created()
        if self is OpenLoopWebhookType.DOCUMENT_UPDATED:
            return document_updated()
        if self is OpenLoopWebhookType.DOCUMENT_DELETED:
            return document_deleted()
        if self is OpenLoopWebhookType.ENTRY_CREATED:
            return entry_created()
        if self is OpenLoopWebhookType.ENTRY_UPDATED:
            return entry_updated()
        if self is OpenLoopWebhookType.ENTRY_DELETED:
            return entry_deleted()
        if self is OpenLoopWebhookType.FORM_ANSWER_GROUP_CREATED:
            return form_answer_group_created()
        if self is OpenLoopWebhookType.FORM_ANSWER_GROUP_DELETED:
            return form_answer_group_deleted()
        if self is OpenLoopWebhookType.FORM_ANSWER_GROUP_LOCKED:
            return form_answer_group_locked()
        if self is OpenLoopWebhookType.GOAL_CREATED:
            return goal_created()
        if self is OpenLoopWebhookType.GOAL_UPDATED:
            return goal_updated()
        if self is OpenLoopWebhookType.GOAL_DELETED:
            return goal_deleted()
        if self is OpenLoopWebhookType.GOAL_HISTORY_CREATED:
            return goal_history_created()
        if self is OpenLoopWebhookType.INSURANCE_AUTHORIZATION_CREATED:
            return insurance_authorization_created()
        if self is OpenLoopWebhookType.INSURANCE_AUTHORIZATION_UPDATED:
            return insurance_authorization_updated()
        if self is OpenLoopWebhookType.INSURANCE_AUTHORIZATION_DELETED:
            return insurance_authorization_deleted()
        if self is OpenLoopWebhookType.MESSAGE_CREATED:
            return message_created()
        if self is OpenLoopWebhookType.MESSAGE_DELETED:
            return message_deleted()
        if self is OpenLoopWebhookType.METRIC_ENTRY_CREATED:
            return metric_entry_created()
        if self is OpenLoopWebhookType.METRIC_ENTRY_UPDATED:
            return metric_entry_updated()
        if self is OpenLoopWebhookType.METRIC_ENTRY_DELETED:
            return metric_entry_deleted()
        if self is OpenLoopWebhookType.PATIENT_CREATED:
            return patient_created()
        if self is OpenLoopWebhookType.PATIENT_UPDATED:
            return patient_updated()
        if self is OpenLoopWebhookType.PAYMENT_CREATED:
            return payment_created()
        if self is OpenLoopWebhookType.PAYMENT_UPDATED:
            return payment_updated()
        if self is OpenLoopWebhookType.PAYMENT_DELETED:
            return payment_deleted()
        if self is OpenLoopWebhookType.POLICY_CREATED:
            return policy_created()
        if self is OpenLoopWebhookType.POLICY_UPDATED:
            return policy_updated()
        if self is OpenLoopWebhookType.POLICY_DELETED:
            return policy_deleted()
        if self is OpenLoopWebhookType.REQUESTED_FORM_COMPLETION_CREATED:
            return requested_form_completion_created()
        if self is OpenLoopWebhookType.REQUESTED_FORM_COMPLETION_UPDATED:
            return requested_form_completion_updated()
        if self is OpenLoopWebhookType.REQUESTED_FORM_COMPLETION_DELETED:
            return requested_form_completion_deleted()
        if self is OpenLoopWebhookType.TASK_CREATED:
            return task_created()
        if self is OpenLoopWebhookType.TASK_UPDATED:
            return task_updated()
        if self is OpenLoopWebhookType.TASK_DELETED:
            return task_deleted()
