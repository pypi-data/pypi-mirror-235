# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class IngestibleTimeseriesResource(str, enum.Enum):
    """
    An enumeration.
    """

    BLOOD_PRESSURE = "blood_pressure"
    BLOOD_OXYGEN = "blood_oxygen"
    GLUCOSE = "glucose"
    HEARTRATE = "heartrate"
    HEARTRATE_VARIABILITY = "heartrate_variability"
    WATER = "water"
    CAFFEINE = "caffeine"
    MINDFULNESS_MINUTES = "mindfulness_minutes"

    def visit(
        self,
        blood_pressure: typing.Callable[[], T_Result],
        blood_oxygen: typing.Callable[[], T_Result],
        glucose: typing.Callable[[], T_Result],
        heartrate: typing.Callable[[], T_Result],
        heartrate_variability: typing.Callable[[], T_Result],
        water: typing.Callable[[], T_Result],
        caffeine: typing.Callable[[], T_Result],
        mindfulness_minutes: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is IngestibleTimeseriesResource.BLOOD_PRESSURE:
            return blood_pressure()
        if self is IngestibleTimeseriesResource.BLOOD_OXYGEN:
            return blood_oxygen()
        if self is IngestibleTimeseriesResource.GLUCOSE:
            return glucose()
        if self is IngestibleTimeseriesResource.HEARTRATE:
            return heartrate()
        if self is IngestibleTimeseriesResource.HEARTRATE_VARIABILITY:
            return heartrate_variability()
        if self is IngestibleTimeseriesResource.WATER:
            return water()
        if self is IngestibleTimeseriesResource.CAFFEINE:
            return caffeine()
        if self is IngestibleTimeseriesResource.MINDFULNESS_MINUTES:
            return mindfulness_minutes()
