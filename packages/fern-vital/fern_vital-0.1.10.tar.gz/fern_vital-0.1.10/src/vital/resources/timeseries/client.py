# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import pydantic

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.remove_none_from_dict import remove_none_from_dict
from ...errors.unprocessable_entity_error import UnprocessableEntityError
from ...types.http_validation_error import HttpValidationError


class TimeseriesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def post_user_blood_pressure(
        self,
        user_id: str,
        *,
        vital_ios_sdk_version: typing.Optional[str] = None,
        vital_android_sdk_version: typing.Optional[str] = None,
    ) -> str:
        """
        Parameters:
            - user_id: str.

            - vital_ios_sdk_version: typing.Optional[str].

            - vital_android_sdk_version: typing.Optional[str].
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"v2/timeseries/{user_id}/blood_pressure"),
            headers=remove_none_from_dict(
                {
                    **self._client_wrapper.get_headers(),
                    "x-vital-ios-sdk-version": vital_ios_sdk_version,
                    "x-vital-android-sdk-version": vital_android_sdk_version,
                }
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(str, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncTimeseriesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def post_user_blood_pressure(
        self,
        user_id: str,
        *,
        vital_ios_sdk_version: typing.Optional[str] = None,
        vital_android_sdk_version: typing.Optional[str] = None,
    ) -> str:
        """
        Parameters:
            - user_id: str.

            - vital_ios_sdk_version: typing.Optional[str].

            - vital_android_sdk_version: typing.Optional[str].
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"v2/timeseries/{user_id}/blood_pressure"),
            headers=remove_none_from_dict(
                {
                    **self._client_wrapper.get_headers(),
                    "x-vital-ios-sdk-version": vital_ios_sdk_version,
                    "x-vital-android-sdk-version": vital_android_sdk_version,
                }
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(str, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
