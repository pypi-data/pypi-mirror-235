# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime


class ClientFacingBloodPressureTimeseries(pydantic.BaseModel):
    id: typing.Optional[int] = pydantic.Field(
        description="Measurement id, note, this field has been deprecated and is no longer used"
    )
    timestamp: dt.datetime
    timezone_offset: typing.Optional[int] = pydantic.Field(
        description="Time zone UTC offset of the measurement. Positive offset indicates east of UTC; negative offset indicates west of UTC; and null indicates the time zone information is unavailable at source."
    )
    systolic: float
    diastolic: float
    type: typing.Optional[str]
    unit: str

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
