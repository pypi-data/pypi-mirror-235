# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/08_chck.ipynb.

# %% auto 0
__all__ = ['isstr', 'isdunder', 'isnilstr', 'isstar', 'iselps', 'ispunc', 'isupper', 'islower', 'isquote', 'ischars', 'isuniq']

# %% ../nbs/08_chck.ipynb 4
import string
from typing import TypeGuard
from .nchr import STAR, ELLIPSE, DUNDER

# %% ../nbs/08_chck.ipynb 6
def isstr(s: str) -> TypeGuard[str]:
    return isinstance(s, str)

# %% ../nbs/08_chck.ipynb 7
def isdunder(s: str) -> TypeGuard[str]:
    return isstr(s) and s.startswith(DUNDER) and s.endswith(DUNDER) and len(s) > 4

def isnilstr(s: str) -> TypeGuard[str]:
    return isstr(s) and len(s) == 0

# %% ../nbs/08_chck.ipynb 8
def isstar(s: str) -> TypeGuard[str]:
    return isstr(s) and s == STAR

def iselps(s: str) -> TypeGuard[str]:
    return isstr(s) and s == ELLIPSE

# %% ../nbs/08_chck.ipynb 9
def ispunc(s: str) -> TypeGuard[str]:
    return isstr(s) and s in string.punctuation

def isupper(s: str) -> TypeGuard[str]:
    return isstr(s) and s in string.ascii_uppercase

def islower(s: str) -> TypeGuard[str]:
    return isstr(s) and s in string.ascii_lowercase

# %% ../nbs/08_chck.ipynb 10
def isquote(s:str) -> str:
    return isstr(s) and ispunc(s) and s in {'"', "'"}

# %% ../nbs/08_chck.ipynb 11
def ischars(s: str, chars: str = string.punctuation) -> bool: # isvalid
    '''Checks if a string only contains characters from a set of valid characters.'''
    return all(c in chars for c in s)

def isuniq(s: str) -> bool: # isuniq
    '''Checks if a string only contains unique characters.'''
    return len(set(s)) == len(s)
