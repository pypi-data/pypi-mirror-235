from pathlib import Path
from bolt import Runtime

runtime = ctx.inject(Runtime)
project_root = generate_path('')

def current():
    return runtime.modules.current_path

def root(args):
    if not isinstance(args, (list, tuple)):
        args = [ args ]
    args = map(str, args)
    if project_root.endswith(":"):
        return project_root + '/'.join(args)
    return project_root + '/'.join(args)

def parent(path):
    parts = path.split("/")
    if len(parts) == 1:
        namespace, colon, path = path.partition(":")
        if colon:
            return namespace + ":"
        return ""
    return "/".join(parts[:-1])

def relative(args):
    if not isinstance(args, (list, tuple)):
        args = [ args ]
    args = map(str, args)
    root = parent(current())
    if root.endswith(":"):
        return root + '/'.join(args)
    return root + "/" + '/'.join(args)

def child(path):
    return current() + "/" + path