from datetime import date, datetime
from typing import List, Literal, Optional

from pykx import QConnection


class Xqa:
    def __init__(self, q: QConnection) -> None:
        self.q = q

    def sync(self, api: str, **args):
        filtered_args = {}
        for key, value in args.items():
            if value is not None:
                filtered_args[key] = value
        return self.q(api, filtered_args).pd()

    def getBinnedMetrics(
        self,
        symList: List[str],
        columns: Literal[
            "volume",
            "meantradesize",
            "mediantradesize",
            "aggrbidvolume",
            "aggraskvolume",
            "neutralvolume",
            "bidvolume",
            "askvolume",
            "midvolume",
            "inspreadvolume",
            "outspreadvolume",
            "tradecount",
            "meanspread",
            "medianspread",
            "meanspreadticks",
            "medianspreadticks",
            "meanbidsize",
            "meanasksize",
            "meandepthbidasksize",
            "mediandepthbidasksize",
            "meanordersize",
            "medianordersize",
            "levelcount",
            "highlowdiff",
            "turnover",
            "vwap",
            "high",
            "low",
            "meanbidasksize",
            "medianbidasksize",
            "firstprice",
            "lastprice",
            "lastbid",
            "lastask",
            "lastmid",
            "pricevolatility",
            "meanimbalance",
            "medianimbalance",
            "tradeimbalance",
            "depthimbalance",
            "meanprice",
            "pctvolume",
            "cumulativevwap",
            "cumulativevolume",
        ],
        startDate: Optional[List[date]] = None,
        endDate: Optional[List[date]] = None,
        startTime: Optional[List[datetime]] = None,
        endTime: Optional[List[datetime]] = None,
        binUnit: Optional[Literal["minute", "second", "time"]] = None,
        binSize: Optional[int] = None,
        numBins: Optional[int] = None,
        timeZone: Optional[List[str]] = None,
        noDays: Optional[int] = None,
        tradeRule: Optional[Literal["OB", "ALL", "CNS"]] = None,
        multiVenue: Optional[Literal["primary", "multi"]] = None,
        corpAction: Optional[bool] = None,
        ccy: Optional[str] = None,
        excludeAuctions: Optional[Literal["opening", "closing", "none", "all"]] = None,
        adjustDate: Optional[date] = None,
        limitCol: Optional[str] = None,
        limitSide: Optional[List[str]] = None,
        limitValue: Optional[List[float]] = None,
        offsetBins: Optional[bool] = None,
        includeDateType: Optional[Literal["", "HALF", "REBAL", "DISRUPT"]] = None,
        excludeDateType: Optional[Literal["NONE", "HALF", "REBAL", "DISRUPT"]] = None,
    ):
        return self.sync(
            "getBinnedMetrics",
            symList=symList,
            columns=columns,
            startDate=startDate,
            endDate=endDate,
            startTime=startTime,
            endTime=endTime,
            binUnit=binUnit,
            binSize=binSize,
            numBins=numBins,
            timeZone=timeZone,
            noDays=noDays,
            tradeRule=tradeRule,
            multiVenue=multiVenue,
            corpAction=corpAction,
            ccy=ccy,
            excludeAuctions=excludeAuctions,
            adjustDate=adjustDate,
            limitCol=limitCol,
            limitSide=limitSide,
            limitValue=limitValue,
            offsetBins=offsetBins,
            includeDateType=includeDateType,
            excludeDateType=excludeDateType,
        )

    def getDailyMetrics(
        self,
        symList: List[str],
        columns: Literal[
            "volume",
            "fragmentation",
            "meantradesize",
            "mediantradesize",
            "aggrbidvolume",
            "aggraskvolume",
            "neutralvolume",
            "bidvolume",
            "askvolume",
            "midvolume",
            "inspreadvolume",
            "outspreadvolume",
            "tradeimbalance",
            "openauctvolume",
            "closeauctvolume",
            "pctopenauctvolume",
            "pctcloseauctvolume",
            "auctvolume",
            "tradecount",
            "meanspread",
            "medianspread",
            "meanspreadticks",
            "medianspreadticks",
            "meandepthbidasksize",
            "mediandepthbidasksize",
            "meanordersize",
            "medianordersize",
            "levelcount",
            "highlowmove",
            "close",
            "prevclose",
            "turnover",
            "vwap",
            "high",
            "low",
            "meanbidasksize",
            "medianbidasksize",
            "meanasksize",
            "meanbidsize",
            "open",
            "meanimbalance",
            "medianimbalance",
            "meanintradayvolatility",
            "maxintradayvolatility",
            "timeweightedspread",
            "timeweightedspreadticks",
        ],
        startDate: Optional[List[date]] = None,
        endDate: Optional[List[date]] = None,
        tradeRule: Optional[Literal["OB", "ALL", "CNS"]] = None,
        multiVenue: Optional[Literal["primary", "multi"]] = None,
        corpAction: Optional[bool] = None,
        ccy: Optional[str] = None,
        specDates: Optional[List[str]] = None,
        noDays: Optional[int] = None,
        excludeAuctions: Optional[Literal["opening", "closing", "none", "all"]] = None,
        dateList: Optional[List[date]] = None,
        adjustDate: Optional[date] = None,
        includeDateType: Optional[Literal["", "HALF", "REBAL", "DISRUPT"]] = None,
        excludeDateType: Optional[Literal["NONE", "HALF", "REBAL", "DISRUPT"]] = None,
    ):
        return self.sync(
            "getDailyMetrics",
            symList=symList,
            columns=columns,
            startDate=startDate,
            endDate=endDate,
            tradeRule=tradeRule,
            multiVenue=multiVenue,
            corpAction=corpAction,
            ccy=ccy,
            specDates=specDates,
            noDays=noDays,
            excludeAuctions=excludeAuctions,
            dateList=dateList,
            adjustDate=adjustDate,
            includeDateType=includeDateType,
            excludeDateType=excludeDateType,
        )

    def getIntervalMetrics(
        self,
        symList: List[str],
        columns: Literal[
            "volume",
            "meantradesize",
            "mediantradesize",
            "aggrbidvolume",
            "aggraskvolume",
            "neutralvolume",
            "bidvolume",
            "askvolume",
            "midvolume",
            "bidvwap",
            "askvwap",
            "midvwap",
            "inspreadvolume",
            "outspreadvolume",
            "tradecount",
            "meanspread",
            "medianspread",
            "meanspreadticks",
            "medianspreadticks",
            "timewavgspread",
            "timewavgbidasksize",
            "meandepthbidasksize",
            "meanordersize",
            "medianordersize",
            "levelcount",
            "highlowmove",
            "lastprice",
            "turnover",
            "vwap",
            "high",
            "low",
            "meanbidasksize",
            "medianbidasksize",
            "firstprice",
            "meanimbalance",
            "medianimbalance",
            "tradeimbalance",
            "tradeimbalanceratio",
            "meanprice",
            "lastmid",
            "firstmid",
            "lastbid",
            "lastask",
        ],
        startDate: Optional[List[date]] = None,
        endDate: Optional[List[date]] = None,
        startTime: Optional[List[datetime]] = None,
        endTime: Optional[List[datetime]] = None,
        timeZone: Optional[List[str]] = None,
        tradeRule: Optional[Literal["OB", "ALL", "CNS"]] = None,
        multiVenue: Optional[Literal["primary", "multi"]] = None,
        corpAction: Optional[bool] = None,
        ccy: Optional[str] = None,
        excludeAuctions: Optional[Literal["opening", "closing", "none", "all"]] = None,
        adjustDate: Optional[date] = None,
        limitCol: Optional[str] = None,
        limitSide: Optional[List[str]] = None,
        limitValue: Optional[List[float]] = None,
        includeDateType: Optional[Literal["", "HALF", "REBAL", "DISRUPT"]] = None,
        excludeDateType: Optional[Literal["NONE", "HALF", "REBAL", "DISRUPT"]] = None,
    ):
        return self.sync(
            "getIntervalMetrics",
            symList=symList,
            columns=columns,
            startDate=startDate,
            endDate=endDate,
            startTime=startTime,
            endTime=endTime,
            timeZone=timeZone,
            tradeRule=tradeRule,
            multiVenue=multiVenue,
            corpAction=corpAction,
            ccy=ccy,
            excludeAuctions=excludeAuctions,
            adjustDate=adjustDate,
            limitCol=limitCol,
            limitSide=limitSide,
            limitValue=limitValue,
            includeDateType=includeDateType,
            excludeDateType=excludeDateType,
        )

    def getMetricsByPrice(
        self,
        symList: List[str],
        columns: Literal[
            "volume",
            "meantradesize",
            "mediantradesize",
            "tradecount",
            "firsttradetime",
            "lasttradetime",
        ],
        startDate: Optional[List[date]] = None,
        endDate: Optional[List[date]] = None,
        startTime: Optional[List[datetime]] = None,
        endTime: Optional[List[datetime]] = None,
        timeZone: Optional[List[str]] = None,
        tradeRule: Optional[Literal["OB", "ALL", "CNS"]] = None,
        multiVenue: Optional[Literal["primary", "multi"]] = None,
        excludeAuctions: Optional[Literal["opening", "closing", "none", "all"]] = None,
        includeDateType: Optional[Literal["", "HALF", "REBAL", "DISRUPT"]] = None,
        excludeDateType: Optional[Literal["NONE", "HALF", "REBAL", "DISRUPT"]] = None,
    ):
        return self.sync(
            "getMetricsByPrice",
            symList=symList,
            columns=columns,
            startDate=startDate,
            endDate=endDate,
            startTime=startTime,
            endTime=endTime,
            timeZone=timeZone,
            tradeRule=tradeRule,
            multiVenue=multiVenue,
            excludeAuctions=excludeAuctions,
            includeDateType=includeDateType,
            excludeDateType=excludeDateType,
        )

    def getPWPMetrics(
        self,
        symList: List[str],
        columns: Literal["vwap", "volume", "turnover", "endTime", "lastprice"],
        startDate: Optional[List[date]] = None,
        endDate: Optional[List[date]] = None,
        startTime: Optional[List[datetime]] = None,
        endTime: Optional[List[datetime]] = None,
        povRate: Optional[List[float]] = None,
        quantity: Optional[List[int]] = None,
        timeZone: Optional[List[str]] = None,
        tradeRule: Optional[Literal["OB", "ALL", "CNS"]] = None,
        multiVenue: Optional[Literal["primary", "multi"]] = None,
        corpAction: Optional[bool] = None,
        calcDirection: Optional[Literal["forward", "backward"]] = None,
        ccy: Optional[str] = None,
        excludeAuctions: Optional[Literal["opening", "closing", "none", "all"]] = None,
        adjustDate: Optional[date] = None,
        limitCol: Optional[str] = None,
        limitSide: Optional[List[str]] = None,
        limitValue: Optional[List[float]] = None,
        includeDateType: Optional[Literal["", "HALF", "REBAL", "DISRUPT"]] = None,
        excludeDateType: Optional[Literal["NONE", "HALF", "REBAL", "DISRUPT"]] = None,
    ):
        return self.sync(
            "getPWPMetrics",
            symList=symList,
            columns=columns,
            startDate=startDate,
            endDate=endDate,
            startTime=startTime,
            endTime=endTime,
            povRate=povRate,
            quantity=quantity,
            timeZone=timeZone,
            tradeRule=tradeRule,
            multiVenue=multiVenue,
            corpAction=corpAction,
            calcDirection=calcDirection,
            ccy=ccy,
            excludeAuctions=excludeAuctions,
            adjustDate=adjustDate,
            limitCol=limitCol,
            limitSide=limitSide,
            limitValue=limitValue,
            includeDateType=includeDateType,
            excludeDateType=excludeDateType,
        )

    def getPointInTimeMetrics(
        self,
        symList: List[str],
        columns: Literal[
            "size",
            "price",
            "bidsize",
            "bid",
            "asksize",
            "ask",
            "tradetime",
            "quotetime",
            "mid",
        ],
        snapDate: Optional[List[date]] = None,
        snapTime: Optional[List[datetime]] = None,
        timeZone: Optional[List[str]] = None,
        tradeRule: Optional[Literal["OB", "ALL", "CNS"]] = None,
        multiVenue: Optional[Literal["primary", "multi"]] = None,
        corpAction: Optional[bool] = None,
        ccy: Optional[str] = None,
        snapAfter: Optional[bool] = None,
        includeDateType: Optional[Literal["", "HALF", "REBAL", "DISRUPT"]] = None,
        excludeDateType: Optional[Literal["NONE", "HALF", "REBAL", "DISRUPT"]] = None,
    ):
        return self.sync(
            "getPointInTimeMetrics",
            symList=symList,
            columns=columns,
            snapDate=snapDate,
            snapTime=snapTime,
            timeZone=timeZone,
            tradeRule=tradeRule,
            multiVenue=multiVenue,
            corpAction=corpAction,
            ccy=ccy,
            snapAfter=snapAfter,
            includeDateType=includeDateType,
            excludeDateType=excludeDateType,
        )

    def getPriceCorrelations(
        self,
        symList: List[str],
        columns: Literal["beta", "covariance", "correlation", "trackingerror"],
        startDate: Optional[List[date]] = None,
        endDate: Optional[List[date]] = None,
        tradeRule: Optional[Literal["OB", "ALL", "CNS"]] = None,
        multiVenue: Optional[Literal["primary", "multi"]] = None,
        corpAction: Optional[bool] = None,
        adjustDate: Optional[date] = None,
        ccy: Optional[str] = None,
        noDays: Optional[int] = None,
        symList2: Optional[List[str]] = None,
        priceToCorrelate: Optional[str] = None,
        includeDateType: Optional[Literal["", "HALF", "REBAL", "DISRUPT"]] = None,
        excludeDateType: Optional[Literal["NONE", "HALF", "REBAL", "DISRUPT"]] = None,
    ):
        return self.sync(
            "getPriceCorrelations",
            symList=symList,
            columns=columns,
            startDate=startDate,
            endDate=endDate,
            tradeRule=tradeRule,
            multiVenue=multiVenue,
            corpAction=corpAction,
            adjustDate=adjustDate,
            ccy=ccy,
            noDays=noDays,
            symList2=symList2,
            priceToCorrelate=priceToCorrelate,
            includeDateType=includeDateType,
            excludeDateType=excludeDateType,
        )

    def getProfileMetrics(
        self,
        symList: List[str],
        columns: Literal[
            "meanvolume",
            "medianvolume",
            "meanpctvolume",
            "medianpctvolume",
            "meansumpctvolume",
            "meanspread",
            "medianspread",
            "meantradesize",
            "mediantradesize",
            "meanpricevolatility",
            "meanbidasksize",
            "meanvwap",
            "pctmedianvolume",
            "cumulativemeanpctvolume",
            "meanspreadticks",
        ],
        startDate: Optional[List[date]] = None,
        endDate: Optional[List[date]] = None,
        startTime: Optional[List[datetime]] = None,
        endTime: Optional[List[datetime]] = None,
        binSize: Optional[int] = None,
        binUnit: Optional[Literal["minute", "second", "time"]] = None,
        numBins: Optional[int] = None,
        tradeRule: Optional[Literal["OB", "ALL", "CNS"]] = None,
        multiVenue: Optional[Literal["primary", "multi"]] = None,
        corpAction: Optional[bool] = None,
        ccy: Optional[str] = None,
        specDates: Optional[List[str]] = None,
        noDays: Optional[int] = None,
        excludeAuctions: Optional[Literal["opening", "closing", "none", "all"]] = None,
        dateList: Optional[List[date]] = None,
        adjustDate: Optional[date] = None,
        limitCol: Optional[str] = None,
        limitSide: Optional[List[str]] = None,
        limitValue: Optional[List[float]] = None,
        offsetBins: Optional[bool] = None,
        timeZone: Optional[List[str]] = None,
        includeDateType: Optional[Literal["", "HALF", "REBAL", "DISRUPT"]] = None,
        excludeDateType: Optional[Literal["NONE", "HALF", "REBAL", "DISRUPT"]] = None,
    ):
        return self.sync(
            "getProfileMetrics",
            symList=symList,
            columns=columns,
            startDate=startDate,
            endDate=endDate,
            startTime=startTime,
            endTime=endTime,
            binSize=binSize,
            binUnit=binUnit,
            numBins=numBins,
            tradeRule=tradeRule,
            multiVenue=multiVenue,
            corpAction=corpAction,
            ccy=ccy,
            specDates=specDates,
            noDays=noDays,
            excludeAuctions=excludeAuctions,
            dateList=dateList,
            adjustDate=adjustDate,
            limitCol=limitCol,
            limitSide=limitSide,
            limitValue=limitValue,
            offsetBins=offsetBins,
            timeZone=timeZone,
            includeDateType=includeDateType,
            excludeDateType=excludeDateType,
        )

    def getRawData(
        self,
        symList: List[str],
        columns: Literal["trade", "quote", "aligntradequote", "depth"],
        startDate: Optional[List[date]] = None,
        endDate: Optional[List[date]] = None,
        startTime: Optional[List[datetime]] = None,
        endTime: Optional[List[datetime]] = None,
        timeZone: Optional[List[str]] = None,
        tradeRule: Optional[Literal["OB", "ALL", "CNS"]] = None,
        multiVenue: Optional[Literal["primary", "multi"]] = None,
        includeDateType: Optional[Literal["", "HALF", "REBAL", "DISRUPT"]] = None,
        excludeDateType: Optional[Literal["NONE", "HALF", "REBAL", "DISRUPT"]] = None,
    ):
        return self.sync(
            "getRawData",
            symList=symList,
            columns=columns,
            startDate=startDate,
            endDate=endDate,
            startTime=startTime,
            endTime=endTime,
            timeZone=timeZone,
            tradeRule=tradeRule,
            multiVenue=multiVenue,
            includeDateType=includeDateType,
            excludeDateType=excludeDateType,
        )

    def getSummaryMetrics(
        self,
        symList: List[str],
        columns: Literal[
            "meanvolume",
            "volume",
            "medianvolume",
            "stddevvolume",
            "minvolume",
            "maxvolume",
            "meantradesize",
            "meanfragmentation",
            "mediantradesize",
            "meantradecount",
            "mediantradecount",
            "meanlevelcount",
            "medianlevelcount",
            "meanhighlowmove",
            "medianhighlowmove",
            "closevolatility",
            "meanturnover",
            "medianturnover",
            "meanspread",
            "medianspread",
            "meanbidasksize",
            "meanclosevolume",
            "meanopenvolume",
            "meanpctclosevolume",
            "meanpctopenvolume",
            "meanspreadticks",
            "meantimeweightedspread",
            "meantimeweightedspreadticks",
        ],
        startDate: Optional[List[date]] = None,
        endDate: Optional[List[date]] = None,
        tradeRule: Optional[Literal["OB", "ALL", "CNS"]] = None,
        multiVenue: Optional[Literal["primary", "multi"]] = None,
        corpAction: Optional[bool] = None,
        ccy: Optional[str] = None,
        specDates: Optional[List[str]] = None,
        noDays: Optional[int] = None,
        excludeAuctions: Optional[Literal["opening", "closing", "none", "all"]] = None,
        dateList: Optional[List[date]] = None,
        adjustDate: Optional[date] = None,
        includeDateType: Optional[Literal["", "HALF", "REBAL", "DISRUPT"]] = None,
        excludeDateType: Optional[Literal["NONE", "HALF", "REBAL", "DISRUPT"]] = None,
    ):
        return self.sync(
            "getSummaryMetrics",
            symList=symList,
            columns=columns,
            startDate=startDate,
            endDate=endDate,
            tradeRule=tradeRule,
            multiVenue=multiVenue,
            corpAction=corpAction,
            ccy=ccy,
            specDates=specDates,
            noDays=noDays,
            excludeAuctions=excludeAuctions,
            dateList=dateList,
            adjustDate=adjustDate,
            includeDateType=includeDateType,
            excludeDateType=excludeDateType,
        )
