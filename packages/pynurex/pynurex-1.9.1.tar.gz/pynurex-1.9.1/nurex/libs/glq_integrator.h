/*
 *  Copyright(C) 2017, Andrej Prochazka
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Affero General Public License for more details.

 *  You should have received a copy of the GNU Affero General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
#ifndef GLQ_INTEGRATOR_H
#define GLQ_INTEGRATOR_H
#include <array>

namespace integrators{

template<int order>
struct GL_data{
};

template<int order>
class GaussLegendreIntegration{
public:
    template<typename F>
    double integrate(F& f, double a, double b) const;
    template<typename F>
    double operator()(F& f, double a, double b) const {return integrate(f, a, b);}
    double w(int i) const {return GL_data<order>::w()[i];}
    double x(int i) const {return GL_data<order>::x()[i];}
    int n() const {return order;}
    std::array<double,order> get_points(double a = -1.0, double b = 1.0)const;
};

template<int order>
template<typename F>
double GaussLegendreIntegration<order>::integrate(F& f, double a, double b) const{
    double res=0.0;
    double p = 0.5*(b-a);
    double q = 0.5*(b+a);

    if(order%2){res+= w(0) * (f(p*x(0) + q));} // in case odd-order
    for(int i=order%2;i<order/2 + order%2;i++){
        res += w(i) * (f(p*x(i) + q) + f(-p*x(i) + q));
    }
    return p*res;
}

template<int order>
std::array<double,order> GaussLegendreIntegration<order>::get_points(double a,  double b)const{
    std::array<double,order> points;
    double p = 0.5*(b-a);
    double q = 0.5*(b+a);

    int num = (order/2);
    for(int i=0;i< num;i++){
        points[num-i-1] = -p*x(i) + q;
        points[num+i] = p*x(i) + q;
    }
    return points;
}


template<int order>
class GaussLegendreIntegration2D{
public:
    template<typename F>
    double integrate(F& f, double a, double b, double c, double d) const;
    template<typename F>
    double operator()(F& f, double a, double b, double c, double d) const {return integrate(f, a,b,c,d);}
private:
    GaussLegendreIntegration<order> integrator;
};

template<int order>
template<typename F>
double GaussLegendreIntegration2D<order>::integrate(F& f, double a, double b, double c, double d) const{
    double res=0.0;
    double p = (b-a)/2.0;
    double q = (b+a)/2.0;
    double r = (d-c)/2.0;
    double s = (d+c)/2.0;

    double xx, yy, sum;
    for(int i=0;i<order/2;i++){
        xx = (p*integrator.x(i));
        for(int j=0;j<order/2;j++){
            yy = (r*integrator.x(j));
            sum = (f(xx + q, yy + s) + f(xx + q, -yy+s));
            sum += (f(-xx + q, yy + s) + f(-xx + q, -yy+s));
            res += integrator.w(i) * integrator.w(j) * sum;
        }
    }
    return p*r*res;
}

template<int order, int order2 = order>
class GaussLegendreIntegration2DA{
public:
    template<typename F>
    double integrate(F& f, double a, double b, double c, double d) const;
    template<typename F>
    double operator()(F& f, double a, double b, double c, double d) const {return integrate(f, a,b,c,d);}
private:
    GaussLegendreIntegration<order> integrator;
    GaussLegendreIntegration<order2> integrator2;
};

template<int order, int order2>
template<typename F>
double GaussLegendreIntegration2DA<order, order2>::integrate(F& f, double a, double b, double c, double d) const{
    double res=0.0;
    double p = (b-a)/2.0;
    double q = (b+a)/2.0;
    double r = (d-c)/2.0;
    double s = (d+c)/2.0;

    double xx, yy, sum;
    for(int i=0;i<order/2;i++){
        xx = (p*integrator.x(i));
        for(int j=0;j<order2/2;j++){
            yy = (r*integrator2.x(j));
            sum = (f(xx + q, yy + s) + f(xx + q, -yy+s));
            sum += (f(-xx + q, yy + s) + f(-xx + q, -yy+s));
            res += integrator.w(i) * integrator2.w(j) * sum;
        }
    }
    return p*r*res;
}

/// weights
//order = 3

template<>
struct GL_data<3>{
    static const std::array<double,2>& x(){
        static const std::array<double,2> _x = {0.0,0.7745966692414833770359};
        return _x;
    }

    static const std::array<double,2>& w(){
        static const std::array<double,2> _w = {0.8888888888888888888889,0.555555555555555555556};
        return _w;
    }
};

// order = 4
template<>
struct GL_data<4>{
    static const std::array<double,2>& x(){
        static const std::array<double,2> _x =
            {0.3399810435848562648026658,0.8611363115940525752239465};
        return _x;
    }

    static const std::array<double,2>& w(){
        static const std::array<double,2> _w =
            {0.6521451548625461426269361,0.3478548451374538573730639};
        return _w;
    }
};

// order = 5
template<>
struct GL_data<5>{
    static const std::array<double,3>& x(){
        static const std::array<double,3> _x =
            {0.0, 0.5384693101056830910363, 0.9061798459386639927976};
        return _x;
    }

    static const std::array<double,3>& w(){
        static const std::array<double,3> _w =
            {0.568888888888888888888, 0.4786286704993664680413, 0.2369268850561890875143};
        return _w;
    }
};

// order = 6
template<>
struct GL_data<6>{
    static const std::array<double,3>& x(){
        static const std::array<double,3> _x =
            {0.2386191860831969086305017,0.6612093864662645136613996,0.9324695142031520278123016};
        return _x;
    }
    static const std::array<double,3>& w(){
        static const std::array<double,3> _w =
            {0.4679139345726910473898703,0.3607615730481386075698335,0.1713244923791703450402961};
        return _w;
    }
};

// order = 7
template<>
struct GL_data<7>{
    static const std::array<double,4>& x(){
        static const std::array<double,4> _x =
            {0.0, 0.4058451513773971669066, 0.7415311855993944398639,0.9491079123427585245262};
        return _x;
    }
    static const std::array<double,4>& w(){
        static const std::array<double,4> _w =
            {0.417959183673469387755, 0.38183005050511894495, 0.279705391489276667901, 0.129484966168869693271};
        return _w;
    }
};

// order = 8
template<>
struct GL_data<8>{
    static const std::array<double,4>& x(){
        static const std::array<double,4> _x =
            {0.1834346424956498049394761,0.5255324099163289858177390,0.7966664774136267395915539,0.9602898564975362316835609};
        return _x;
    }
    static const std::array<double,4>& w(){
        static const std::array<double,4> _w =
            {0.3626837833783619829651504,0.3137066458778872873379622,0.2223810344533744705443560,0.1012285362903762591525314};
        return _w;
    }
};

// order = 10
template<>
struct GL_data<10>{
    static const std::array<double,5>& x(){
        static const std::array<double,5> _x =
            {0.1488743389816312108848260,0.4333953941292471907992659,0.6794095682990244062343274,0.8650633666889845107320967,0.9739065285171717200779640};
        return _x;
    }
    static const std::array<double,5>& w(){
        static const std::array<double,5> _w =
            {0.2955242247147528701738930,0.2692667193099963550912269,0.2190863625159820439955349,0.1494513491505805931457763,0.0666713443086881375935688};
        return _w;
    }
};

// order  = 12
template<>
struct GL_data<12>{
    static const std::array<double,6>& x(){
        static const std::array<double,6> _x =
            {0.1252334085114689154724414,0.3678314989981801937526915,0.5873179542866174472967024,0.7699026741943046870368938,0.9041172563704748566784659,0.9815606342467192506905491};
        return _x;
    }

    static const std::array<double,6>& w(){
        static const std::array<double,6> _w =
            {0.2491470458134027850005624,0.2334925365383548087608499,0.2031674267230659217490645,0.1600783285433462263346525,0.1069393259953184309602547,0.0471753363865118271946160};
        return _w;
    }
};

// order  = 14
template<>
struct GL_data<14>{
    static const std::array<double,7>& x(){
        static const std::array<double,7> _x =
            {0.1080549487073436620662447,0.3191123689278897604356718,0.5152486363581540919652907,0.6872929048116854701480198,0.8272013150697649931897947,0.9284348836635735173363911,0.9862838086968123388415973};
        return _x;
    }

    static const std::array<double,7>& w(){
        static const std::array<double,7> _w =
            {0.2152638534631577901958764,0.2051984637212956039659241,0.1855383974779378137417166,0.1572031671581935345696019,0.1215185706879031846894148,0.0801580871597602098056333,0.0351194603317518630318329};
        return _w;
    }
};

// order = 16
template<>
struct GL_data<16>{
    static const std::array<double,8>& x(){
        static const std::array<double,8> _x =
           {0.0950125098376374401853193,0.2816035507792589132304605,0.4580167776572273863424194,0.6178762444026437484466718,0.7554044083550030338951012,0.8656312023878317438804679,0.9445750230732325760779884,0.9894009349916499325961542};
        return _x;
    }

    static const std::array<double,8>& w(){
        static const std::array<double,8> _w =
           {0.1894506104550684962853967,0.1826034150449235888667637,0.1691565193950025381893121,0.1495959888165767320815017,0.1246289712555338720524763,0.0951585116824927848099251,0.0622535239386478928628438,0.0271524594117540948517806};
        return _w;
    }
};

// order = 20
template<>
struct GL_data<20>{
    static const std::array<double,10>& x(){
        static const std::array<double,10> _x =
            {0.0765265211334973337546404,0.2277858511416450780804962,0.3737060887154195606725482,0.5108670019508270980043641,0.6360536807265150254528367,0.7463319064601507926143051,0.8391169718222188233945291,0.9122344282513259058677524,0.9639719272779137912676661,0.9931285991850949247861224};
        return _x;
    }

    static const std::array<double,10>& w(){
        static const std::array<double,10> _w =
            {0.1527533871307258506980843,0.1491729864726037467878287,0.1420961093183820513292983,0.1316886384491766268984945,0.1181945319615184173123774,0.1019301198172404350367501,0.0832767415767047487247581,0.0626720483341090635695065,0.0406014298003869413310400,0.0176140071391521183118620};
        return _w;
    }
};

// order = 32
template<>
struct GL_data<32>{
    static const std::array<double,16>& x(){
        static const std::array<double,16> _x =
            {0.0483076656877383162348126,0.1444719615827964934851864,0.2392873622521370745446032,0.3318686022821276497799168,0.4213512761306353453641194,0.5068999089322293900237475,0.5877157572407623290407455,0.6630442669302152009751152,0.7321821187402896803874267,0.7944837959679424069630973,0.8493676137325699701336930,0.8963211557660521239653072,0.9349060759377396891709191,0.9647622555875064307738119,0.9856115115452683354001750,0.9972638618494815635449811};
        return _x;
    }

    static const std::array<double,16>& w(){
        static const std::array<double,16> _w =
            {0.0965400885147278005667648,0.0956387200792748594190820,0.0938443990808045656391802,0.0911738786957638847128686,0.0876520930044038111427715,0.0833119242269467552221991,0.0781938957870703064717409,0.0723457941088485062253994,0.0658222227763618468376501,0.0586840934785355471452836,0.0509980592623761761961632,0.0428358980222266806568786,0.0342738629130214331026877,0.0253920653092620594557526,0.0162743947309056706051706,0.0070186100094700966004071};
        return _w;
    }
};

//order = 64
template<>
struct GL_data<64>{
    static const std::array<double,32>& x(){
        static const std::array<double,32> _x =
            {0.0243502926634244325089558,0.0729931217877990394495429,0.1214628192961205544703765,0.1696444204239928180373136,0.2174236437400070841496487,0.2646871622087674163739642,0.3113228719902109561575127,0.3572201583376681159504426,0.4022701579639916036957668,0.4463660172534640879849477,0.4894031457070529574785263,0.5312794640198945456580139,0.5718956462026340342838781,0.6111553551723932502488530,0.6489654712546573398577612,0.6852363130542332425635584,0.7198818501716108268489402,0.7528199072605318966118638,0.7839723589433414076102205,0.8132653151227975597419233,0.8406292962525803627516915,0.8659993981540928197607834,0.8893154459951141058534040,0.9105221370785028057563807,0.9295691721319395758214902,0.9464113748584028160624815,0.9610087996520537189186141,0.9733268277899109637418535,0.9833362538846259569312993,0.9910133714767443207393824,0.9963401167719552793469245,0.9993050417357721394569056};
        return _x;
    }

    static const std::array<double,32>& w(){
        static const std::array<double,32> _w =
            {};
        return _w;
    }
};


//order = 128
template<>
struct GL_data<128>{
    static const std::array<double,64>& x(){
        static const std::array<double,64> _x =
            {};
        return _x;
    }

    static const std::array<double,64>& w(){
        static const std::array<double,64> _w =
            {0.0244461801962625182113259,0.0244315690978500450548486,0.0244023556338495820932980,0.0243585572646906258532685,0.0243002001679718653234426,0.0242273192228152481200933,0.0241399579890192849977167,0.0240381686810240526375873,0.0239220121367034556724504,0.0237915577810034006387807,0.0236468835844476151436514,0.0234880760165359131530253,0.0233152299940627601224157,0.0231284488243870278792979,0.0229278441436868469204110,0.0227135358502364613097126,0.0224856520327449668718246,0.0222443288937997651046291,0.0219897106684604914341221,0.0217219495380520753752610,0.0214412055392084601371119,0.0211476464682213485370195,0.0208414477807511491135839,0.0205227924869600694322850,0.0201918710421300411806732,0.0198488812328308622199444,0.0194940280587066028230219,0.0191275236099509454865185,0.0187495869405447086509195,0.0183604439373313432212893,0.0179603271850086859401969,0.0175494758271177046487069,0.0171281354231113768306810,0.0166965578015892045890915,0.0162550009097851870516575,0.0158037286593993468589656,0.0153430107688651440859909,0.0148731226021473142523855,0.0143943450041668461768239,0.0139069641329519852442880,0.0134112712886163323144890,0.0129075627392673472204428,0.0123961395439509229688217,0.0118773073727402795758911,0.0113513763240804166932817,0.0108186607395030762476596,0.0102794790158321571332153,0.0097341534150068058635483,0.0091830098716608743344787,0.0086263777986167497049788,0.0080645898904860579729286,0.0074979819256347286876720,0.0069268925668988135634267,0.0063516631617071887872143,0.0057726375428656985893346,0.0051901618326763302050708,0.0046045842567029551182905,0.0040162549837386423131943,0.0034255260409102157743378,0.0028327514714579910952857,0.0022382884309626187436221,0.0016425030186690295387909,0.0010458126793403487793129,0.0004493809602920903763943};
        return _w;
    }
};

} // end of namespace
#endif
