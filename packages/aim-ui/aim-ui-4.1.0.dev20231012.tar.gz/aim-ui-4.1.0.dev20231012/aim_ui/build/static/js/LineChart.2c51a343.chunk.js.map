{"version":3,"file":"static/js/LineChart.2c51a343.chunk.js","mappings":"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","sources":["components/LineChart/LineChart.tsx","config/charts/index.ts","pages/Board/components/VisualizationElements/LineChartVizElement.tsx"],"sourcesContent":["import * as React from 'react';\nimport classNames from 'classnames';\nimport { useResizeObserver } from 'hooks';\n\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\n\nimport { RENDER_LINES_OPTIMIZED_LIMIT } from 'config/charts';\n\nimport {\n  IAttributesRef,\n  ILineChartProps,\n  ILineChartRef,\n} from 'types/components/LineChart/LineChart';\nimport { IFocusedState } from 'types/services/models/metrics/metricsAppModel';\n\nimport {\n  drawArea,\n  clearArea,\n  drawAxes,\n  drawLines,\n  processLineChartData,\n  drawBrush,\n  drawHoverAttributes,\n  drawUnableToRender,\n  CurveEnum,\n  HighlightEnum,\n  ScaleEnum,\n} from 'utils/d3';\n\nimport './LineChart.scss';\n\nconst LineChart = React.forwardRef(function LineChart(\n  props: ILineChartProps,\n  ref: React.ForwardedRef<ILineChartRef>,\n): React.FunctionComponentElement<React.ReactNode> {\n  const {\n    data,\n    index,\n    id = `${index}`,\n    nameKey = '',\n    aggregatedData,\n    aggregationConfig,\n    syncHoverState,\n    axesScaleRange,\n    ignoreOutliers = false,\n    alignmentConfig,\n    highlightMode = HighlightEnum.Off,\n    curveInterpolation = CurveEnum.Linear,\n    chartTitle,\n    zoom,\n    onZoomChange,\n    resizeMode,\n    onMount,\n    axesScaleType = {\n      xAxis: ScaleEnum.Linear,\n      yAxis: ScaleEnum.Linear,\n    },\n    readOnly = false,\n    margin = {\n      top: 30,\n      right: 20,\n      bottom: 30,\n      left: 60,\n    },\n  } = props;\n\n  // boxes\n  const visBoxRef = React.useRef({\n    margin,\n    height: 0,\n    width: 0,\n  });\n  const plotBoxRef = React.useRef({\n    height: 0,\n    width: 0,\n  });\n\n  // containers\n  const parentRef = React.useRef<HTMLDivElement>(null);\n  const visAreaRef = React.useRef<HTMLDivElement>(null);\n\n  // d3 node elements\n  const svgNodeRef = React.useRef(null);\n  const bgRectNodeRef = React.useRef(null);\n  const plotNodeRef = React.useRef(null);\n  const axesNodeRef = React.useRef(null);\n  const linesNodeRef = React.useRef<any>(null);\n  const attributesNodeRef = React.useRef(null);\n  const xAxisLabelNodeRef = React.useRef(null);\n  const yAxisLabelNodeRef = React.useRef(null);\n  const highlightedNodeRef = React.useRef(null);\n\n  // methods and values refs\n  const axesRef = React.useRef({});\n  const linesRef = React.useRef({});\n  const attributesRef = React.useRef<IAttributesRef>({});\n  const humanizerConfigRef = React.useRef({});\n  const rafIDRef = React.useRef<number>();\n\n  const unableToDrawConditions: { condition: boolean; text?: string }[] = [];\n  const updateDeps = [\n    data,\n    zoom,\n    ignoreOutliers,\n    highlightMode,\n    axesScaleType,\n    axesScaleRange,\n    curveInterpolation,\n    aggregationConfig,\n    readOnly,\n    alignmentConfig,\n    resizeMode,\n    id,\n  ];\n\n  function draw() {\n    drawArea({\n      index,\n      id,\n      nameKey,\n      visBoxRef,\n      plotBoxRef,\n      parentRef,\n      visAreaRef,\n      svgNodeRef,\n      bgRectNodeRef,\n      plotNodeRef,\n      axesNodeRef,\n      linesNodeRef,\n      attributesNodeRef,\n      chartTitle,\n    });\n\n    const { processedData, processedAggrData, min, max } = processLineChartData(\n      {\n        data,\n        ignoreOutliers,\n        visBoxRef,\n        axesScaleType,\n        axesScaleRange,\n        aggregatedData,\n        aggregationConfig,\n        unableToDrawConditions,\n        attributesRef,\n      },\n    );\n\n    drawAxes({\n      svgNodeRef,\n      axesNodeRef,\n      axesRef,\n      plotBoxRef,\n      xScale: attributesRef.current.xScale,\n      yScale: attributesRef.current.yScale,\n      visBoxRef,\n      alignmentConfig,\n      axesScaleType,\n      humanizerConfigRef,\n      drawBgTickLines: { y: true, x: false },\n    });\n\n    drawLines({\n      id,\n      processedData,\n      nameKey,\n      linesNodeRef,\n      linesRef,\n      curveInterpolation,\n      xScale: attributesRef.current.xScale,\n      yScale: attributesRef.current.yScale,\n      highlightMode,\n      aggregationConfig,\n      processedAggrData,\n      readOnly,\n    });\n\n    /**\n     * render lines with low quality if lines count are more than 'RENDER_LINES_OPTIMIZED_LIMIT'\n     */\n    if (!readOnly && linesNodeRef.current) {\n      const linesCount = linesNodeRef.current.selectChildren().size();\n      if (linesCount > RENDER_LINES_OPTIMIZED_LIMIT) {\n        linesNodeRef.current.classed('optimizeRendering', true);\n      }\n    }\n\n    drawBrush({\n      id,\n      plotBoxRef,\n      plotNodeRef,\n      visBoxRef,\n      axesRef,\n      attributesRef,\n      linesRef,\n      svgNodeRef,\n      axesScaleType,\n      min,\n      max,\n      axesScaleRange,\n      zoom,\n      onZoomChange,\n      readOnly,\n      unableToDrawConditions,\n    });\n\n    if (!readOnly) {\n      drawHoverAttributes({\n        index,\n        id,\n        nameKey,\n        data,\n        processedData,\n        axesScaleType,\n        highlightMode,\n        syncHoverState,\n        visAreaRef,\n        attributesRef,\n        plotBoxRef,\n        visBoxRef,\n        svgNodeRef,\n        bgRectNodeRef,\n        attributesNodeRef,\n        xAxisLabelNodeRef,\n        yAxisLabelNodeRef,\n        linesNodeRef,\n        highlightedNodeRef,\n        aggregationConfig,\n        alignmentConfig,\n      });\n    }\n\n    drawUnableToRender({\n      renderArr: unableToDrawConditions,\n      visAreaRef,\n      attributesRef,\n      readOnly,\n      syncHoverState,\n    });\n  }\n\n  function renderChart() {\n    clearArea({ visAreaRef });\n    draw();\n  }\n\n  const resizeObserverCallback: ResizeObserverCallback = React.useCallback(\n    (entries: ResizeObserverEntry[]) => {\n      if (entries?.length) {\n        rafIDRef.current = window.requestAnimationFrame(renderChart);\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    updateDeps,\n  );\n\n  const observerReturnCallback = React.useCallback(() => {\n    if (rafIDRef.current) {\n      window.cancelAnimationFrame(rafIDRef.current);\n    }\n  }, []);\n\n  useResizeObserver(resizeObserverCallback, parentRef, observerReturnCallback);\n\n  React.useEffect(() => {\n    attributesRef.current.currentXValue = undefined;\n  }, [alignmentConfig, data]);\n\n  React.useEffect(() => {\n    rafIDRef.current = window.requestAnimationFrame(renderChart);\n    return () => {\n      if (rafIDRef.current) {\n        window.cancelAnimationFrame(rafIDRef.current);\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, updateDeps);\n\n  React.useEffect(() => {\n    if (typeof onMount === 'function') {\n      onMount();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  React.useImperativeHandle(ref, () => ({\n    setActiveLineAndCircle: (\n      lineKey: string,\n      focusedStateActive: boolean = false,\n      force: boolean = false,\n    ) => {\n      attributesRef.current.setActiveLineAndCircle?.(\n        lineKey,\n        focusedStateActive,\n        force,\n      );\n    },\n    updateHoverAttributes: (xValue: number, dataSelector?: string) => {\n      attributesRef.current.updateHoverAttributes?.(xValue, dataSelector);\n    },\n    clearHoverAttributes: () => {\n      attributesRef.current.clearHoverAttributes?.();\n    },\n    setFocusedState: (focusedState: IFocusedState) => {\n      if (focusedState) {\n        attributesRef.current.focusedState = {\n          ...focusedState,\n          visId: focusedState.visId ?? `${focusedState.chartIndex}`,\n        };\n      }\n    },\n  }));\n\n  return (\n    <ErrorBoundary>\n      <div\n        id={'vis-' + id}\n        ref={parentRef}\n        className={classNames('LineChart', {\n          zoomMode: !readOnly && zoom?.active,\n        })}\n      >\n        <div ref={visAreaRef} />\n      </div>\n    </ErrorBoundary>\n  );\n});\n\nLineChart.displayName = 'LineChart';\n\nexport default React.memo(LineChart);\n","export const RENDER_LINES_OPTIMIZED_LIMIT = 100;\n\nexport const GRID_SIZE = {\n  S: 4,\n  M: 6,\n  L: 12,\n};\n\nconst { S, M, L } = GRID_SIZE;\n// Chart grid pattern based on a 12-column grid layout\nexport const CHART_GRID_PATTERN: { [key: number]: number[] } = {\n  1: [L],\n  2: [M, M],\n  3: [S, S, S],\n  4: [M, M, M, M],\n  5: [S, S, S, M, M],\n  6: [S, S, S, S, S, S],\n  7: [S, S, S, M, M, M, M],\n  8: [S, S, S, S, S, S, M, M],\n  9: [S, S, S, S, S, S, S, S, S],\n};\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\n\nimport LineChart from 'components/LineChart/LineChart';\n\nimport { ILineChartRef } from 'types/components/LineChart/LineChart';\n\nfunction LineChartVizElement(props: any) {\n  const onActivePointChange = React.useCallback(\n    _.debounce(props.callbacks?.on_active_point_change, 100),\n    [],\n  );\n  const chartRef = React.useRef<ILineChartRef>(null);\n  const focusedStateRef = React.useRef<any>(null);\n  const activePointKeyRef = React.useRef<any>(null);\n\n  const syncHoverState = React.useCallback(({ activePoint, focusedState }) => {\n    if (activePoint) {\n      if (focusedState?.active) {\n        /** on focus point */\n\n        if (focusedStateRef.current?.key !== focusedState?.key) {\n          focusedStateRef.current = focusedState;\n          activePointKeyRef.current = null;\n          onActivePointChange(activePoint, true);\n        }\n      } else {\n        /** on mouse over */\n\n        focusedStateRef.current = null;\n        if (activePointKeyRef.current !== activePoint.key) {\n          activePointKeyRef.current = activePoint.key;\n          onActivePointChange(activePoint, false);\n        }\n      }\n    } else {\n      /** on mouse leave */\n\n      focusedStateRef.current = null;\n      onActivePointChange(activePoint, false);\n    }\n  }, []);\n\n  return (\n    <div className='VizComponentContainer'>\n      <LineChart\n        ref={chartRef}\n        id={'0'}\n        nameKey={'board'}\n        data={props.data}\n        syncHoverState={syncHoverState}\n      />\n    </div>\n  );\n}\n\nexport default LineChartVizElement;\n"],"names":["LineChart","React","props","ref","data","index","_props$id","id","concat","_props$nameKey","nameKey","aggregatedData","aggregationConfig","syncHoverState","axesScaleRange","_props$ignoreOutliers","ignoreOutliers","alignmentConfig","_props$highlightMode","highlightMode","HighlightEnum","Off","_props$curveInterpola","curveInterpolation","CurveEnum","Linear","chartTitle","zoom","onZoomChange","resizeMode","onMount","_props$axesScaleType","axesScaleType","xAxis","ScaleEnum","yAxis","_props$readOnly","readOnly","_props$margin","margin","top","right","bottom","left","visBoxRef","height","width","plotBoxRef","parentRef","visAreaRef","svgNodeRef","bgRectNodeRef","plotNodeRef","axesNodeRef","linesNodeRef","attributesNodeRef","xAxisLabelNodeRef","yAxisLabelNodeRef","highlightedNodeRef","axesRef","linesRef","attributesRef","humanizerConfigRef","rafIDRef","unableToDrawConditions","updateDeps","renderChart","clearArea","drawArea","_processLineChartData","processLineChartData","processedData","processedAggrData","min","max","drawAxes","xScale","current","yScale","drawBgTickLines","y","x","drawLines","selectChildren","size","classed","drawBrush","drawHoverAttributes","drawUnableToRender","renderArr","draw","resizeObserverCallback","entries","length","window","requestAnimationFrame","observerReturnCallback","cancelAnimationFrame","useResizeObserver","currentXValue","undefined","setActiveLineAndCircle","lineKey","_attributesRef$curren","_attributesRef$curren2","focusedStateActive","arguments","force","call","updateHoverAttributes","xValue","dataSelector","_attributesRef$curren3","_attributesRef$curren4","clearHoverAttributes","_attributesRef$curren5","_attributesRef$curren6","setFocusedState","focusedState","_focusedState$visId","_objectSpread","visId","chartIndex","_jsx","ErrorBoundary","children","className","classNames","zoomMode","active","displayName","_props$callbacks","onActivePointChange","_","callbacks","on_active_point_change","chartRef","focusedStateRef","activePointKeyRef","_ref","_focusedStateRef$curr","activePoint","key"],"sourceRoot":""}