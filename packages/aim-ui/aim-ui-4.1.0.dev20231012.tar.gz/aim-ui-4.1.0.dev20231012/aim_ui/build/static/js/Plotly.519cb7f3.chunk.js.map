{"version":3,"file":"static/js/Plotly.519cb7f3.chunk.js","mappings":"0NA+EA,IC5EA,EDMA,SAAmBA,GACjB,IAAAC,EAA0BC,EAAAA,SAAuB,GAAEC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA5CI,EAAKF,EAAA,GAAEG,EAAQH,EAAA,GACtBI,EACEL,EAAAA,SAAkD,UAASM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GADtDE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAG1BG,EAAeT,EAAAA,OAAoC,MAEjDU,GAASC,EAAAA,EAAAA,IAAiBb,GAA1BY,KACR,SAASE,IACP,IAAMC,EAAYJ,EAAaK,QAC3BC,EAAgB,OAATF,QAAS,IAATA,OAAS,EAATA,EAAWG,WAClBC,EAAyB,OAATJ,QAAS,IAATA,OAAS,EAATA,EAAWI,cAC/B,GAAIJ,GAAaE,GAAQE,EAAe,CACtC,IAAIC,EAAQL,EAAUM,YAAc,GAChCC,EAASP,EAAUQ,aAAe,GAGlCC,EAFiBL,EAAcE,YAETD,EACtBK,GAFkBN,EAAcI,aAAe,IAExBD,EAEzBhB,EADEkB,EAAK,GAAKC,EAAK,EACRC,KAAKC,IAAIH,EAAIC,GAEb,EAEb,CACF,CAEA,SAASG,IACPC,OAAOC,uBAAsB,WACvBnB,EAAaK,UACfF,IACAJ,EAAc,WAElB,GACF,CAQA,OANAR,EAAAA,WAAgB,WACVS,EAAaK,SAAWhB,EAAM+B,OAChCjB,GAEJ,GAAG,CAACd,EAAM+B,SAGRC,EAAAA,EAAAA,KAACC,EAAAA,EAAa,CAAAC,UACZF,EAAAA,EAAAA,KAAA,OACEG,IAAKxB,EACLoB,MAAO,CACLK,QAAS,eACTC,UAAWzB,EAAI,SAAA0B,OAAYjC,EAAK,KAAM,IACtC6B,SAEDtB,GACCoB,EAAAA,EAAAA,KAACO,EAAAA,EAAI,CACHR,MAAO,CAAEtB,WAAAA,GACTG,KAAMA,EAAKA,MAAQ,GACnB4B,QAAMC,EAAAA,EAAAA,GAAA,GAAQ7B,EAAK4B,QAAU,CAAC,GAC9BE,OAAQ9B,EAAK8B,OACbC,kBAAkB,EAClBf,WAAYA,EACZgB,cAAehB,EACfiB,SAAUjB,KAGZI,EAAAA,EAAAA,KAACc,EAAAA,GAAO,CAACC,KAAM,GAAIC,UAAW,OAKxC,C,wEEtEA,SAASC,EAAOjD,GACd,OACEgC,EAAAA,EAAAA,KAACC,EAAAA,EAAa,CAAAC,UACZF,EAAAA,EAAAA,KAACkB,EAAAA,EAAS,CACRC,OAAQ,CAAEC,QAASpD,EAAMmD,OAAOC,SAChCC,OAAQrD,EAAMY,KAAKA,KAAKyC,OACxBC,KAAMtD,EAAMY,KAAK2C,SAASD,KAC1BE,QAASxD,EAAMY,KAAK2C,SAASC,QAC7BC,KAAMzD,EAAMY,KAAK8C,OAAOD,KACxBE,SAAU3D,EAAMY,KAAKA,KAAKgD,MAAMhD,KAChCiD,WAAY7D,EAAM6D,cAI1B,CAEA,IAAe3D,EAAAA,KAAW+C,E,oHCQ1B,MA3BA,SAAgBjD,GACd,OACEgC,EAAAA,EAAAA,KAAA,OACED,MAAO,CACLT,OAAQ,OACRwC,SAAU,SACV1B,QAAS,OACT2B,KAAM,EACNC,WAAY,SACZC,eAAgB,UAChB/B,UAEFF,EAAAA,EAAAA,KAACkC,EAAAA,EAAO,CACNtD,KAAM,CACJA,KAAM,CACJA,KAAMZ,EAAMY,OAGhBmB,MAAO,CACLX,MAAO,OACPE,OAAQ,WAKlB,ECjBA,MARA,SAA0BtB,GACxB,OACEgC,EAAAA,EAAAA,KAAA,OAAKmC,UAAU,wBAAwBpC,MAAO,CAAEqC,UAAW,KAAMlC,UAC/DF,EAAAA,EAAAA,KAACqC,GAAM5B,EAAAA,EAAAA,GAAA,GAAKzC,KAGlB,C","sources":["components/FigureBox/FigureBox.tsx","components/FigureBox/index.ts","modules/BaseExplorer/components/Figure/Figure.tsx","pages/Board/components/Plotly.tsx","pages/Board/components/VisualizationElements/PlotlyVizElement.tsx"],"sourcesContent":["import React from 'react';\nimport Plot from 'react-plotly.js';\nimport { useFigureBlobURI } from 'hooks';\n\nimport ErrorBoundary from 'components/ErrorBoundary';\nimport { Spinner } from 'components/kit';\n\nimport { FigureBoxProps } from './';\n\nfunction FigureBox(props: FigureBoxProps) {\n  const [scale, setScale] = React.useState<number>(1);\n  const [visibility, setVisibility] =\n    React.useState<React.CSSProperties['visibility']>('hidden');\n\n  const containerRef = React.useRef<HTMLDivElement | null>(null);\n\n  const { data } = useFigureBlobURI(props);\n  function setContainerScale() {\n    const container = containerRef.current;\n    let plot = container?.firstChild;\n    let parentElement = container?.parentElement;\n    if (container && plot && parentElement) {\n      let width = container.offsetWidth + 20;\n      let height = container.offsetHeight + 20;\n      let containerWidth = parentElement.offsetWidth;\n      let containerHeight = parentElement.offsetHeight - 30;\n      let wK = containerWidth / width; // Calculate width ratio\n      let hK = containerHeight / height; // Calculate height ratio\n      if (wK < 1 || hK < 1) {\n        setScale(Math.min(wK, hK)); // Apply scale based on object-fit: 'contain' pattern\n      } else {\n        setScale(1);\n      }\n    }\n  }\n\n  function onAutoSize() {\n    window.requestAnimationFrame(() => {\n      if (containerRef.current) {\n        setContainerScale();\n        setVisibility('visible');\n      }\n    });\n  }\n\n  React.useEffect(() => {\n    if (containerRef.current && props.style) {\n      setContainerScale();\n    }\n  }, [props.style]);\n\n  return (\n    <ErrorBoundary>\n      <div\n        ref={containerRef}\n        style={{\n          display: 'inline-block',\n          transform: data ? `scale(${scale})` : '',\n        }}\n      >\n        {data ? (\n          <Plot\n            style={{ visibility }}\n            data={data.data || []}\n            layout={{ ...(data.layout || {}) }}\n            frames={data.frames}\n            useResizeHandler={true}\n            onAutoSize={onAutoSize}\n            onInitialized={onAutoSize}\n            onUpdate={onAutoSize}\n          />\n        ) : (\n          <Spinner size={24} thickness={2} />\n        )}\n      </div>\n    </ErrorBoundary>\n  );\n}\n\nexport default FigureBox;\n","import FigureBox from './FigureBox';\n\nexport * from './FigureBox.d';\nexport default FigureBox;\n","import * as React from 'react';\n\nimport ErrorBoundary from 'components/ErrorBoundary';\nimport FigureBox from 'components/FigureBox';\n\nimport { IBoxContentProps } from 'modules/BaseExplorer/types';\n\nfunction Figure(props: IBoxContentProps) {\n  return (\n    <ErrorBoundary>\n      <FigureBox\n        engine={{ blobURI: props.engine.blobURI }}\n        format={props.data.data.format}\n        name={props.data.sequence.name}\n        context={props.data.sequence.context}\n        step={props.data.record.step}\n        blobData={props.data.data.blobs.data}\n        isFullView={props.isFullView}\n      />\n    </ErrorBoundary>\n  );\n}\n\nexport default React.memo(Figure);\n","import * as React from 'react';\n\nimport Figures from 'modules/BaseExplorer/components/Figure/Figure';\n\nfunction Plotly(props: any) {\n  return (\n    <div\n      style={{\n        height: '100%',\n        overflow: 'hidden',\n        display: 'flex',\n        flex: 1,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <Figures\n        data={{\n          data: {\n            data: props.data,\n          },\n        }}\n        style={{\n          width: '100%',\n          height: '100%',\n        }}\n      />\n    </div>\n  );\n}\n\nexport default Plotly;\n","import * as React from 'react';\n\nimport Plotly from '../Plotly';\n\nfunction PlotlyVizElement(props: any) {\n  return (\n    <div className='VizComponentContainer' style={{ minHeight: 400 }}>\n      <Plotly {...props} />\n    </div>\n  );\n}\n\nexport default PlotlyVizElement;\n"],"names":["props","_React$useState","React","_React$useState2","_slicedToArray","scale","setScale","_React$useState3","_React$useState4","visibility","setVisibility","containerRef","data","useFigureBlobURI","setContainerScale","container","current","plot","firstChild","parentElement","width","offsetWidth","height","offsetHeight","wK","hK","Math","min","onAutoSize","window","requestAnimationFrame","style","_jsx","ErrorBoundary","children","ref","display","transform","concat","Plot","layout","_objectSpread","frames","useResizeHandler","onInitialized","onUpdate","Spinner","size","thickness","Figure","FigureBox","engine","blobURI","format","name","sequence","context","step","record","blobData","blobs","isFullView","overflow","flex","alignItems","justifyContent","Figures","className","minHeight","Plotly"],"sourceRoot":""}