{"version":3,"file":"static/js/BoardEmbed.879c686d.chunk.js","mappings":"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","sources":["pages/Apps/useApp.tsx","pages/Board/components/VisualizationElements/BoardVizElement.tsx"],"sourcesContent":["import React from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport * as _ from 'lodash-es';\n\nimport { ANALYTICS_EVENT_KEYS_MAP } from 'config/analytics/analyticsKeysMap';\nimport { PathEnum } from 'config/enums/routesEnum';\n\nimport useBoardStore from 'pages/Board/BoardStore';\n\nimport pyodideEngine, { usePyodideEngine } from 'services/pyodide/store';\nimport * as analytics from 'services/analytics';\n\nfunction useApp() {\n  const history = useHistory();\n  const location = useLocation();\n\n  const isLoading = useBoardStore((state) => state.isLoading);\n  const updateBoard = useBoardStore((state) => state.editBoard);\n  const fetchBoard = useBoardStore((state) => state.fetchBoard);\n  const boards = useBoardStore((state) => state.boards);\n  const notifications = useBoardStore((state) => state.notifyData);\n  const appName = useBoardStore((state) => state.appName);\n  const setAppName = useBoardStore((state) => state.setAppName);\n\n  const allPackagesBoards = usePyodideEngine(pyodideEngine.boardsSelector);\n  const boardsList: string[] = appName\n    ? allPackagesBoards?.[appName] ?? []\n    : [];\n\n  const sortedList = React.useMemo(() => {\n    const list = _.sortBy(boardsList);\n    // Separate directories and files\n    let dirs = list.filter((path) => path.includes('/'));\n    let files = list.filter((path) => !path.includes('/'));\n    // Prioritize directories, then files\n    return [...dirs, ...files];\n  }, [boardsList]);\n\n  React.useEffect(() => {\n    analytics.pageView(ANALYTICS_EVENT_KEYS_MAP.app.pageView);\n  }, []);\n\n  React.useEffect(() => {\n    if (\n      !isLoading &&\n      appName &&\n      sortedList.length > 0 &&\n      location.pathname === PathEnum.App.replace(':appName', appName)\n    ) {\n      const firstBoardPath = sortedList[0]; // replace this with the correct property if different\n      history.replace(\n        `${PathEnum.App.replace(':appName', appName)}/${firstBoardPath}`,\n      );\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [boardsList, location, appName]);\n\n  return {\n    data: sortedList,\n    updateBoard,\n    boards,\n    isLoading,\n    fetchBoard,\n    notifications,\n    appName,\n    setAppName,\n  };\n}\n\nexport default useApp;\n","import * as React from 'react';\n\nimport { Spinner } from 'components/kit';\n\nimport Board from 'pages/Board/Board';\nimport useApp from 'pages/Apps/useApp';\n\nfunction BoardVizElement(props: any) {\n  const { boards, isLoading, fetchBoard, data: boardsList, appName } = useApp();\n\n  const packageName = props.options.package_name;\n\n  let externalPackageNameLastIndex = props.data.indexOf(':');\n\n  let externalPackage =\n    externalPackageNameLastIndex === -1\n      ? null\n      : props.data.slice(0, externalPackageNameLastIndex);\n\n  const boardPath = externalPackage\n    ? props.data\n    : packageName && !boardsList.includes(props.data)\n    ? `${packageName}:${props.data}`\n    : `${appName}:${props.data}`;\n\n  let [code, setCode] = React.useState(boards?.[boardPath]?.code ?? null);\n\n  React.useEffect(() => {\n    if (code === null) {\n      if (!boards?.hasOwnProperty(boardPath)) {\n        fetchBoard(boardPath);\n      } else {\n        setCode(boards?.[boardPath]?.code!);\n      }\n    }\n  }, [code, boards]);\n\n  return (\n    <div\n      className='VizComponentContainer'\n      style={{ flex: 1, padding: 0, border: 'none' }}\n    >\n      {isLoading || code === null ? (\n        <Spinner />\n      ) : (\n        <Board\n          data={{\n            code,\n            path: boardPath,\n          }}\n          editMode={false}\n          previewMode\n          stateStr={props.options.state_str}\n          externalPackage={externalPackage}\n        />\n      )}\n    </div>\n  );\n}\nexport default BoardVizElement;\n"],"names":["_allPackagesBoards$ap","history","useHistory","location","useLocation","isLoading","useBoardStore","state","updateBoard","editBoard","fetchBoard","boards","notifications","notifyData","appName","setAppName","allPackagesBoards","usePyodideEngine","pyodideEngine","boardsSelector","boardsList","sortedList","React","list","_","dirs","filter","path","includes","files","concat","_toConsumableArray","analytics","ANALYTICS_EVENT_KEYS_MAP","app","pageView","length","pathname","PathEnum","App","replace","firstBoardPath","data","props","_boards$boardPath$cod","_boards$boardPath","_useApp","useApp","packageName","options","package_name","externalPackageNameLastIndex","indexOf","externalPackage","slice","boardPath","_React$useState","code","_React$useState2","_slicedToArray","setCode","_boards$boardPath2","hasOwnProperty","_jsx","className","style","flex","padding","border","children","Spinner","Board","editMode","previewMode","stateStr","state_str"],"sourceRoot":""}