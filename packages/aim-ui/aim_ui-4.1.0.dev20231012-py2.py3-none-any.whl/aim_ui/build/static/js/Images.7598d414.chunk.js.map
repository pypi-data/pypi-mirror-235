{"version":3,"file":"static/js/Images.7598d414.chunk.js","mappings":"wLA2BA,ICxBA,EDKA,SAAkBA,GAChB,IAAAC,GAA0BC,EAAAA,EAAAA,IAAgBF,GAAlCG,EAAIF,EAAJE,KAAMC,EAAOH,EAAPG,QAEd,OACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAa,CAAAC,UACZF,EAAAA,EAAAA,KAAA,OAAKG,MAAOR,EAAMQ,MAAMD,SACrBJ,EAAKM,KACJJ,EAAAA,EAAAA,KAAA,OACEG,MAAO,CAAEE,UAAW,OAAQC,SAAU,QACtCF,IAAKN,EAAKM,IACVG,IAAKR,KAGPC,EAAAA,EAAAA,KAACQ,EAAAA,GAAO,CAACC,KAAM,GAAIC,UAAW,OAKxC,C,4HEwBA,MA5CA,SAAoBf,GAClB,IAAMG,EAAOH,EAAMG,KAAKa,KAAI,SAACC,GAAU,OAAAC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAClCD,GACAA,EAAMd,MACNc,EAAME,QACNF,EAAMG,OAAM,IAOjB,OACEf,EAAAA,EAAAA,KAAA,OACEgB,UAAU,aACVb,MAAO,CACLc,OAAQ,OACRC,SAAU,OACVC,QAAS,OACTC,WAAY,SACZC,eAAgB,SAChBC,UAAW,GACXjB,UAAW,KACXH,SAEDJ,EAAKa,KAAI,SAACY,GAAS,OAClBvB,EAAAA,EAAAA,KAACwB,EAAAA,EAAQ,CAEPC,SAAUF,EAAKG,MAAM5B,KACrB6B,OAAQJ,EAAKI,OACb5B,QAASwB,EAAKxB,QACd6B,KAAML,EAAKK,KACXC,QAASN,EAAKM,QACdC,KAAMP,EAAKO,KACXC,MAAOR,EAAKQ,MACZC,OAAQ,CACNC,QAASC,EAAAA,EAAcD,UA5BlB,SAACV,GAAS,IAAAY,EAAA,SAAAC,OAChB,OAAJb,QAAI,IAAJA,GAAe,QAAXY,EAAJZ,EAAMc,iBAAS,IAAAF,OAAX,EAAJA,EAAiBG,KAAI,KAAAF,OAAIb,EAAKK,KAAI,KAAAQ,OAAIG,KAAKC,UAAUjB,EAAKM,SAAQ,KAAAO,OACnEb,EAAKO,KAAI,KAAAM,OACPb,EAAKQ,MAAK,CAgBHU,CAAOlB,GAWZ,KAIV,ECzCA,MAHA,SAA0B5B,GACxB,OAAOK,EAAAA,EAAAA,KAAC0C,EAAU,CAAC5C,KAAMH,EAAMG,MACjC,C","sources":["components/ImageBox/ImageBox.tsx","components/ImageBox/index.ts","pages/Board/components/ImagesList.tsx","pages/Board/components/VisualizationElements/ImagesVizElement.tsx"],"sourcesContent":["import React from 'react';\nimport { useImageBlobURI } from 'hooks';\n\nimport ErrorBoundary from 'components/ErrorBoundary';\nimport { Spinner } from 'components/kit';\n\nimport { ImageBoxProps } from './';\n\nfunction ImageBox(props: ImageBoxProps) {\n  const { data, caption } = useImageBlobURI(props);\n\n  return (\n    <ErrorBoundary>\n      <div style={props.style}>\n        {data.src ? (\n          <img\n            style={{ maxHeight: '100%', maxWidth: '100%' }}\n            src={data.src}\n            alt={caption}\n          />\n        ) : (\n          <Spinner size={24} thickness={2} />\n        )}\n      </div>\n    </ErrorBoundary>\n  );\n}\nexport default ImageBox;\n","import ImageBox from './ImageBox';\n\nexport * from './ImageBox.d';\nexport default ImageBox;\n","import * as React from 'react';\n\nimport ImageBox from 'components/ImageBox';\n\nimport pyodideEngine from 'services/pyodide/store';\n\nfunction ImagesList(props: any) {\n  const data = props.data.map((image: any) => ({\n    ...image,\n    ...image.data,\n    ...image.images,\n    ...image.record,\n  }));\n\n  const boxKey = (item: any) =>\n    `${item?.container?.hash}_${item.name}_${JSON.stringify(item.context)}_${\n      item.step\n    }_${item.index}`;\n  return (\n    <div\n      className='ImagesList'\n      style={{\n        height: '100%',\n        overflow: 'auto',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        minHeight: 40,\n        maxHeight: 100,\n      }}\n    >\n      {data.map((item: any) => (\n        <ImageBox\n          key={boxKey(item)}\n          blobData={item.blobs.data}\n          format={item.format}\n          caption={item.caption}\n          name={item.name}\n          context={item.context}\n          step={item.step}\n          index={item.index}\n          engine={{\n            blobURI: pyodideEngine.blobURI,\n          }}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default ImagesList;\n","import * as React from 'react';\n\nimport ImagesList from '../ImagesList';\n\nfunction ImagesVizElement(props: any) {\n  return <ImagesList data={props.data} />;\n}\nexport default ImagesVizElement;\n"],"names":["props","_useImageBlobURI","useImageBlobURI","data","caption","_jsx","ErrorBoundary","children","style","src","maxHeight","maxWidth","alt","Spinner","size","thickness","map","image","_objectSpread","images","record","className","height","overflow","display","alignItems","justifyContent","minHeight","item","ImageBox","blobData","blobs","format","name","context","step","index","engine","blobURI","pyodideEngine","_item$container","concat","container","hash","JSON","stringify","boxKey","ImagesList"],"sourceRoot":""}