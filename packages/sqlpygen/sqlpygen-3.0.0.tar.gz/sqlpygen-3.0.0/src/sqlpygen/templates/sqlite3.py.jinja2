"""{{ module }}

This module has been generated with SqlPyGen from {{ source_file }}.
"""

import sqlite3
ConnectionType = sqlite3.Connection
CursorType = sqlite3.Cursor

{% macro py_type(type) %}
{% if type.nullable %}{{ type.name }} | None{% else %}{{ type.name }}{% endif %}
{% endmacro %}

from typing import cast, Generator
from contextlib import closing
from dataclasses import dataclass

SCHEMA = {}
{% for schema in schemas %}
SCHEMA["{{ schema.name }}"] = """
{{ schema.sql }}
"""

{% endfor %}

QUERY = {}
{% for query in queries %}
QUERY["{{ query.name }}"] = """
{{ query.sql | parameterized_query }}
"""

{% endfor %}

{% for table in tables %}
{% set RowType = "%sRow" % table.name %}

@dataclass(frozen=True, slots=True)
class {{ RowType }}:
    {% for field in table.fields %}
    {{ field.name }}: {{ py_type(field.type) }}
    {% endfor %}

class {{ table.name }}:
    def __init__(self, cursor: CursorType):
        self.cursor = cursor

    def __iter__(self) -> Generator[{{ table.name }}Row, None, None]:
        with closing(self.cursor):
            for row in self.cursor:
                yield {{ RowType }}(*row)

    def item(self) -> {{ py_type(table.fields[0].type) }}:
        with closing(self.cursor):
            row = self.cursor.fetchone()
            assert row is not None, "Received zero rows"
            ret = cast({{ py_type(table.fields[0].type) }}, row[0])
            return ret

{% endfor %}

def create_schema(connection: ConnectionType) -> None:
    """Create the table schema."""
    {% for schema in schemas %}
    try:
        sql = SCHEMA["{{ schema.name }}"]

        connection.execute(sql)
    except Exception as e:
        raise RuntimeError(f"Error executing schema: {{ schema.name }}: {e}") from e
    {% endfor %}

{% macro query_params(params) %}
{% for field in params %}{{ field.name }}: {{ py_type(field.type) }}, {% endfor %}
{% endmacro %}

{% macro query_return(return_) %}
{% if return_ %}{{ return_ }}{% else %}None{% endif %}
{% endmacro %}

{% macro query_args(params) %}
dict({% for field in params %}{{ field.name }}={{ field.name }}, {% endfor %})
{% endmacro %}

{% for query in queries %}
def {{ query.name }}(connection: ConnectionType, {{ query_params(query.params) }}) -> {{ query_return(query.return_) }}:
    """Query {{query.name}}."""
    cursor = connection.cursor()
    try:
        sql = QUERY["{{ query.name }}"]
        query_args = {{ query_args(query.params) }}
        cursor.execute(sql, query_args)

        {% if query.return_ %}
        return {{ query.return_ }}(cursor)
        {% endif %}
    except Exception as e:
        raise RuntimeError(f"Error executing query: {{ query.name }}: {e}") from e

{% endfor %}
