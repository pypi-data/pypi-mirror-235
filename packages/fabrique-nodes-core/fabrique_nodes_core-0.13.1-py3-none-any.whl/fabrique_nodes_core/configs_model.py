# generated by datamodel-codegen:
#   filename:  example.json
#   timestamp: 2022-10-05T22:01:30+00:00

from __future__ import annotations

from typing import Dict, List, Optional, Literal

from pydantic import BaseModel


class Port(BaseModel):
    """ Port Model

    :param id_: port id, unique in inputs/outputs
    :param name: visible port label
    :param type_: port type
    :param visible: invisible ports are ignored in the business logic of the node
    :param required: optional ports may not be present in the destructuring object
    :param special: port code processing modifier in the business logic of the node
    :param code: the content of this field is similar to the content of a cell in spreadsheets, it can be a formula,
    the name of an object field, jsonpath, etc. depending on your code processor
    :param schema_: port json schema, if its type is object or array, can be used for automatic destructuring
    """
    id_: str
    name: str
    type_: str = 'any'
    visible: bool = True
    required: bool = True
    special: bool = False
    code: str = ''
    schema_: Optional[str] = ''


class NodeData(BaseModel):
    """ NodeData model for API

    :param name: node instance name (user defined)
    :param g_ports_in: grouped input ports [[ port0_of_g0, port1_of_g0 ],[ port0_of_g1, port1_of_g1]]
    :param g_ports_out: grouped output ports [[ port0_of_g0, port1_of_g0 ],[ port0_of_g1, port1_of_g1]]
    :param description: user defined description for node instance
    :param schema_: json schema may be useful for StructOps nodes
    :param type_: node type
    :param group_type_: automaticaly defined by nodes groups
    :param ui_config: ui form model
    :param category: one of ['StructOps', 'IO', 'Funcional', 'Stateful', 'Misc'] for node grouping and coloring
    """
    name: Optional[str] = ''
    g_ports_in: Optional[List[List[Port]]] = [[]]
    g_ports_out: Optional[List[List[Port]]] = [[]]
    description: Optional[str] = ''
    schema_: Optional[str] = ''
    type_: Optional[str]
    group_type_: Optional[str]
    ui_config: Optional[dict]
    category: Optional[Literal['StructOps', 'IO', 'Functional', 'Stateful', 'Misc', 'Conditional', 'Comment']]


class PipelineNodeData(NodeData):
    category: Optional[Literal['Actor', 'Bus', 'Comment']]


class Node(BaseModel):
    id: str
    position: Optional[Dict]
    data: Optional[NodeData]


class PipelineNode(BaseModel):
    id: str
    position: Optional[Dict]
    data: Optional[PipelineNodeData]


class Edge(BaseModel):
    id: str
    source: str  # source node id
    sourceHandle: str  # source port id
    target: str  # target node id
    targetHandle: str  # target port id


class Model(BaseModel):
    '''Data Model for actor project'''
    id: str
    nodes: Dict[str, Node]
    edges: Dict[str, Edge]


class PipelineModel(Model):
    nodes: Dict[str, PipelineNode]
    actors: Dict[str, Model]
