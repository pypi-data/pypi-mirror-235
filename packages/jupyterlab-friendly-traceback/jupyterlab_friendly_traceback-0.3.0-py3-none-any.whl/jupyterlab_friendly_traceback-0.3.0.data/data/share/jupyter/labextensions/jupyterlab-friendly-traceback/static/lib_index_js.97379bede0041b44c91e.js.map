{"version":3,"file":"lib_index_js.97379bede0041b44c91e.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAyD;AACD;AACH;AACD;AACD;AACnD,yBAAyB,8DAAO;AAChC;AACA,YAAY,gDAAc;AAC1B,CAAC;AACM;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,+DAAa;AAChD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA,oCAAoC;AACpC;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kEAAkB;AACrC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA,iEAAe,iBAAiB,EAAC","sources":["webpack://jupyterlab-friendly-traceback/./lib/index.js"],"sourcesContent":["import { INotebookTracker, } from \"@jupyterlab/notebook\";\nimport { DisposableDelegate } from \"@lumino/disposable\";\nimport { ToolbarButton } from \"@jupyterlab/apputils\";\nimport { LabIcon } from \"@jupyterlab/ui-components\";\nimport friendlySvgStr from \"../style/friendly.svg\";\nconst friendlyIcon = new LabIcon({\n    name: \"Friendly\",\n    svgstr: friendlySvgStr,\n});\nexport class FriendlyButton {\n    constructor() {\n        this._enabled = null;\n        this.revert = () => {\n            this._enabled = false;\n        };\n        // launch friendly\n        this.friendly = (panel) => {\n            const kernelConnection = panel.context.sessionContext.session.kernel;\n            let code = \"\";\n            switch (this._enabled) {\n                case null:\n                    code =\n                        \"from friendly.jupyter import *; from friendly.ipython_common.excepthook import enable, disable\";\n                    this._enabled = true;\n                    break;\n                case true:\n                    code = \"disable()\";\n                    this._enabled = false;\n                    break;\n                case false:\n                    code = \"enable()\";\n                    this._enabled = true;\n                    break;\n            }\n            kernelConnection.requestExecute({\n                code,\n            });\n        };\n    }\n    createNew(panel) {\n        const callback = () => {\n            this.friendly(panel);\n            toggleButtonState();\n        };\n        const friendlyButton = new ToolbarButton({\n            className: \"friendly-button\",\n            icon: friendlyIcon,\n            onClick: callback,\n            tooltip: \"Activate/DeActivate the friendly traceback\",\n        });\n        // handle kernel restart\n        panel.context.sessionContext.kernelChanged.connect(async () => {\n            const session = panel.context.sessionContext.session;\n            if (session) {\n                let code = \"from friendly.jupyter import *; from friendly.ipython_common.excepthook import enable, disable\";\n                if (!this._enabled) {\n                    code = code + \";disable()\";\n                }\n                session.kernel.requestExecute({\n                    code,\n                });\n            }\n        });\n        const toggleButtonState = () => {\n            const activeClass = \"friendly-button-active\";\n            if (this._enabled) {\n                friendlyButton.addClass(activeClass);\n            }\n            else {\n                friendlyButton.removeClass(activeClass);\n            }\n        };\n        panel.toolbar.insertItem(0, \"friendly\", friendlyButton);\n        return new DisposableDelegate(() => {\n            friendlyButton.dispose();\n        });\n    }\n}\nconst friendlyExtension = {\n    id: \"jupyterlab-friendly-traceback\",\n    autoStart: true,\n    requires: [INotebookTracker],\n    activate: (app, tracker) => {\n        console.log(\"jupyterlab-friendly-traceback is activated!\");\n        const fButton = new FriendlyButton();\n        app.docRegistry.addWidgetExtension(\"Notebook\", fButton);\n        // handle re-open notebook\n        tracker.currentChanged.connect(async () => {\n            fButton.revert();\n        });\n    },\n};\nexport default friendlyExtension;\n"],"names":[],"sourceRoot":""}