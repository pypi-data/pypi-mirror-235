# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['behringer_mixer']

package_data = \
{'': ['*']}

install_requires = \
['python-osc>=1.8.0,<2.0.0']

setup_kwargs = {
    'name': 'behringer-mixer',
    'version': '0.0.2',
    'description': 'Module to get basic information from Behringer digital mixers eg X32/XAir etc.',
    'long_description': '# behringer-mixer\nPython module to get basic information from Behringer digital mixers eg X32/XAir etc.\n\nInitial inspiration (and some code) comes from https://github.com/onyx-and-iris/xair-api-python.\n\n## What it does and what it doesn\'t do.\nThis module is a simple interface to a series of Behringer digital mixers.  It does NOT support all parameters or controls.  It is primarily focussed on getting and setting fader information.  It supports getting this information, both on a once off basis and subscribing for real-time updates.\n\nIt currently supports the following functionality for all channels/busses/matrices/dcas/main/lr:\n- Fader Value (float and dB) [get/set]\n- Fader Mute status(float and dB) [get/set]\n- Fader Name (float and dB) [get]\n\nIt also supports\n- Current scene/snapshot [get]\n- Change scene/snapshot [set]\n\nIf you want a module that allows you to control the full functionality of the mixer, eg configuring effects/eq etc then I would recommend checking out https://github.com/onyx-and-iris/xair-api-python instead.\n\n## Prerequisites\n\n-   Python 3.10 or greater\n\n<!--## Installation\n\n```\npip install behringer-mixer\n```\n-->\n\n## Usage\n\n\n### Example\n```python\n\nfrom behringer_mixer import mixer_api\n\ndef updates_function(data):\n    print(f"The property {data.property} has been set to {data.value}")\n\ndef main():\n    with mixer_api.connect("X32", ip="192.168.201.149") as mixer:\n        state = mixer.state()\n        print(state)\n        mixer.subscribe(updates_function)\n        mixer.set_value("/ch/1/mix_fader", 0)\n\nif __name__ == "__main__":\n    main()\n```\n\n### Property Keys\nThe data returned by both the `state` and `subscription` callback function is based on a number of property keys for the mixer.  While these keys are \'similar\' to the values used in the OSC commands they are not always the same.\n\nEach key is a mixture of a base \'group\' key eg `/ch/1/` and a more specific key.  \nThey keys have also been altered slightly to maintain a consistent approach between different mixers. eg. For channel/bus numbers the leading zero has been removed. on the XAir mixers the main fader is `/main/lr` whereas on the X32 it is `/main/st`.  This modules returns both as `/main/st`.\n\n#### `mixer_api.connect("<mixer_type>", ip="<ip_address>")`\nThe code is written to support the following mixer types:\n- `X32`\n- `XR18`\n- `XR16`\n- `XR12`\n(I currently only have access to an X32.)\n\nThe following keyword arguments may be passed:\n\n-   `ip`: ip address of the mixer\n-   `port`: mixer port, defaults to 10023 for x32 and 10024 for xair\n-   `delay`: a delay between each command, defaults to 20ms.\n    -   a note about delay, stability may rely on network connection. For wired connections the delay can be safely reduced.  \n\nOn connection, the function requests the current state of the appropriate faders from the mixer.  This results in a number of OSC messages being sent.  If you have problems receiving all this data, then tweaking the delay setting may be appropriate.\n\n#### `mixer.state()`\nReturns the current state of the mixer as a dictionary of values\n```\n{\n\t\'/ch/1/mix_fader\': 0.75,\n\t\'/ch/1/mix_fader_db\': 0.0,\n    ...\n\t\'/ch/1/mix_on\': False,\n\t\'/ch/2/mix_on\': False,\n\t\'/ch/1/config_name\': \'VOX 1\',\n\t...\n\t\'/bus/1/mix_fader\': 0.37829911708831787,\n\t\'/bus/1/mix_fader_db\': -19.7,\n\t...\n\t\'/bus/4/mix_on\': True,\n\t...\n\t\'/bus/2/config_name\': \'\',\n\t...\n\t\'/dca/3/config_name\': \'Drums\',\n\t...\n\t\'/main/st/mix_fader\': 0.7497556209564209,\n\t\'/main/st/mix_fader_db\': -0.0,\n\t\'/main/st/mix_on\': True,\n\t...\n\t\'/scene/current\': 6\n}\n```\n\n#### `mixer.reload()`\nCauses the the mixer to be requeried for it\'s current state. This only updates the modules internal state.  You would then need to call `mixer.state()` to receive the updated state.\n\n#### `mixer.subscribe(callback_function)`\nThis registered a `callback_function` that is called whenever there is a change at the mixer on one of the monitored properties.\nThe callback function must receive one dictionary parameter that contains the data that has been updated.\nThe content of this data paramter is as follows\n\n```python\n{ \n    \'property\': \'/ch/01/mix_fader\',\n    \'value\': 0.85\n}\n```\n\nUpdates will automatically be stopped when the code passes outside the `with` context.\n\n#### `mixer.set_value(address, value)`\nTells the mixer to update a particular field parameter to the `value` specified.\n`address` should be in the format returned by the `mixer.state()` call.\n`value should be in a format appropriate to the address being used. The module does no checking on the appropriateness of the value.\nThis call also updates the internal state of the module.\n\n#### `mixer.load_scene(scene_number)`\nChanges the current/scene snapshot of the mixer.\n`scene_number` is the index\n\n#### `mixer.send(address, value)` (Low Level Call)\nThis is a low level call to send an OSC message to the mixer.  As this is a low level call, the address of the OSC message being sent would have to conform to that required by the mixer in its documenation, no changing of the address is performed.  This call does not update the internal state\n\n#### `mixer.query(address)` (Low Level Call)\nThis is a low level call and returns the response of a previous `send` call.\n\n\n\n## Tests\n\nThese tests attempt to connect to a mixer to exercise get/set from the channels.\nThe tests will change the state of the mixer, so it is recommended you save the current settings before running.\nIt is also recommended that any amplifier is turned off as feedback could occur if signals are present on the channels.\n\nTo run all tests:\n\n`pytest -v`.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details\n\n## Documentation\n\n[XAir OSC Commands](https://behringer.world/wiki/doku.php?id=x-air_osc)\n\n[X32 OSC Commands](https://wiki.munichmakerlab.de/images/1/17/UNOFFICIAL_X32_OSC_REMOTE_PROTOCOL_%281%29.pdf)\n\n## Special Thanks\n\n[Onyx-and-Iris](https://github.com/onyx-and-iris) for writing the XAir Python module\n',
    'author': 'wrodie',
    'author_email': 'warren@rodie.net',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/wrodie/behringer-mixer',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.10,<4.0',
}


setup(**setup_kwargs)
