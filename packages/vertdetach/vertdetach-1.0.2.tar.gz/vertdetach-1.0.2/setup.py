# -*- coding: utf-8 -*-
from setuptools import setup

package_dir = \
{'': 'src'}

packages = \
['vertdetach']

package_data = \
{'': ['*']}

install_requires = \
['numpy>=1.23.3', 'pandas>=1.2.5', 'scipy>=1.7.3']

setup_kwargs = {
    'name': 'vertdetach',
    'version': '1.0.2',
    'description': 'DETACH (Device Temperature and Acceleration Change) algorithm for detecting non-wear from raw accelerometer data.',
    'long_description': '# vertdetach \n[![DOI](https://zenodo.org/badge/447634532.svg)](https://zenodo.org/badge/latestdoi/447634532)\n\nDETACH (Device Temperature and Acceleration Change) algorithm detects non-wear periods for body-worn accelerometers \nby integrating a ‘rate-of-change’ criterion for temperature into a combined temperature-acceleration algorithm.\n\n### Publication\n\nVert, A., Weber, K. S., Thai, V., Turner, E., Beyer, K. B., Cornish, B. F., Godkin, F. E., Wong, C., McIlroy, W. E., \n& Van Ooteghem, K. (2022). Detecting accelerometer non-wear periods using change in acceleration combined with \nrate-of-change in temperature. *BMC Medical Research Methodology, 22*. https://doi.org/10.1186/s12874-022-01633-6\n\n## Using the vertdetach Algorithm\nThe DETACH algorithm is stored as a function called vertdetach within the /src/vertdetach/vertdetach.py Python file.\n\nThe function itself is defined as follows\n```python\nvertdetach(x_values, y_values, z_values, temperature_values, accel_freq=75,\n           temperature_freq=0.25, std_thresh_mg=8.0, low_temperature_cutoff=26, high_temperature_cutoff=30,\n           temp_dec_roc=-0.2, temp_inc_roc=0.1, num_axes=2, quiet=False)\n```\n\n### Input Arguments\nThe input arguments and their definitions are listed in the table below:\n\n| Argument                | Data Type   | Optional (default value) or Required | Description                                                                                             |\n|-------------------------|-------------|--------------------------------------|---------------------------------------------------------------------------------------------------------|\n| x_values                | NumPy Array | Required                             | x-axis accelerometer values                                                                             |\n| y_values                | NumPy Array | Required                             | y-axis accelerometer values                                                                             |\n| z_values                | NumPy Array | Required                             | x-axis accelerometer values                                                                             |\n| temperature_values      | NumPy Array | Required                             | Temperature values                                                                                      |\n| accel_freq              | float       | Optional (75)                        | Frequency of the accelerometer in Hz                                                                    |\n| temperature_freq        | float       | Optional (0.25)                      | Frequency of the temperature in Hz                                                                      |\n| std_thresh_mg           | float       | Optional (8.0)                       | The value which the standard deviation (STD) of an axis in the window must be below to trigger non-wear |\n| low_temperature_cutoff  | float       | Optional (26.0)                      | Low temperature threshold for non-wear classification (see paper for more details)                      |\n| high_temperature_cutoff | float       | Optional (30.0)                      | High temperature threshold for non-wear classification (see paper for more details)                     |\n| temp_dec_roc            | float       | Optional (-0.2)                      | Temperature decrease rate-of-change threshold for non-wear classification (see paper for more details)  |\n| temp_inc_roc            | float       | Optional (0.1)                       | Temperature increase rate-of-change threshold for non-wear classification (see paper for more details)  |\n| num_axes                | int         | Optional (2)                         | Number of axes that must be below the STD threshold to be considered non-wear                           |\n| quiet                   | bool        | Optional (False)                     | Whether or not to quiet print statements.                                                               |\n### Returns\nThe algorithm returns a tuple with two objects:\n1. start_stop_df: A pandas DataFrame with the start and end datapoints of the non-wear bouts.\n2. vert_nonwear_array: A numpy array with the same length of the accelerometer data marked as either wear (0) or non-wear (1)\n\n### Example\nExample python code to determine the percentage of non-wear time from \n```python\nfrom src.vertdetach.vertdetach import vertdetach\nimport numpy as np\n\n# Load Data\naccelerometer_vals = np.load("path\\to\\raw\\accelerometer.npy")\ntemperature_values = np.load("path\\to\\raw\\temperature.npy")\nx_values = accelerometer_vals[0]\ny_values = accelerometer_vals[1]\nz_values = accelerometer_vals[2]\n\n# Define Frequencies\naccel_freq = 75\ntemperature_freq = 0.25\n\n# Calculate Non-wear\nstart_stop_df, nonwear_array = vertdetach(x_values = x_values, y_values = y_values, z_values = z_values, \n                                          temperature_values = temperature_values, accel_freq = accel_freq, \n                                          temperature_freq = temperature_freq)\n\n# Analysis\ntotal_wear_time = np.sum(nonwear_array)\npct_worn = total_wear_time/len(nonwear_array) * 100\n\nprint("The device was not worn %s percent of the time" % pct_worn)\n\n```\n## Version/Changelog\n\nv1.0.3\n- loosen dependency requirements to minimum version instead of minor version\n\nv1.0.2\n- [Detecting accelerometer non-wear periods using change in acceleration combined with rate-of-change in temperature.](https://doi.org/10.1186/s12874-022-01633-6)\n\n## Installation\n\nTo install the latest release of vertdetach directly from GitHub using pip, run the following line in terminal or \nconsole:\n\n`pip install git+https://github.com/nimbal/vertdetach`\n\nTo install a specific release, insert `@v#.#.#` after the repository name replacing with the tag associated with that \nrelease. For example:\n\n`pip install git+https://github.com/nimbal/vertdetach@v1.0.0`\n\n## Include vertdetach as Package Dependency\n\nTo include the latest release of vertdetach as a dependency in your Python package, include the following\nstring within the list alongside your other dependencies:\n\n`install_requires=[\'vertdetach@git+https://github.com/nimbal/vertdetach@[version]\']`\n\nTo include a specific release, replace `[version]` with the tag associated with that release.\n\n## vertdetach Package Dependencies\n- numpy\n- pandas\n- scipy\n',
    'author': 'Adam Vert',
    'author_email': 'vertadam@gmail.com',
    'maintainer': 'Ali Neishabouri',
    'maintainer_email': 'ali.neishabouri@theactigraph.com',
    'url': 'https://github.com/actigraph/vertdetach',
    'package_dir': package_dir,
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.8.1,<3.12',
}


setup(**setup_kwargs)
